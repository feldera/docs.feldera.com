"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[4388],{13813:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"sql/grammar","title":"SQL Grammar","description":"This is a short formal description of the grammar supported in a BNF","source":"@site/docs/sql/grammar.md","sourceDirName":"sql","slug":"/sql/grammar","permalink":"/sql/grammar","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Feldera SQL","permalink":"/sql/"},"next":{"title":"Identifiers","permalink":"/sql/identifiers"}}');var i=s(74848),t=s(28453);const a={},l="SQL Grammar",o={},d=[{value:"Creating user-defined types",id:"creating-user-defined-types",level:2},{value:"Creating tables",id:"creating-tables",level:2},{value:"Table properties that impact the program semantics",id:"table-properties-that-impact-the-program-semantics",level:3},{value:"Materialized tables",id:"materialized-tables",level:4},{value:"Interned strings",id:"interned-strings",level:4},{value:"Append-only tables",id:"append-only-tables",level:4},{value:"Size hints",id:"size-hints",level:4},{value:"LATENESS",id:"lateness",level:3},{value:"WATERMARKS",id:"watermarks",level:3},{value:"Creating user-defined functions.",id:"creating-user-defined-functions",level:2},{value:"Creating user-defined aggregates.",id:"creating-user-defined-aggregates",level:2},{value:"Creating views",id:"creating-views",level:2},{value:"Creating indexes",id:"creating-indexes",level:2},{value:"Aggregate queries",id:"aggregate-queries",level:3},{value:"Sub-queries",id:"sub-queries",level:2},{value:"Grouping functions",id:"grouping-functions",level:3},{value:"Window aggregates",id:"window-aggregates",level:2},{value:"Table functions",id:"table-functions",level:2},{value:"<code>ASOF</code> joins",id:"asof-joins",level:2},{value:"Lambda expressions",id:"lambda-expressions",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"sql-grammar",children:"SQL Grammar"})}),"\n",(0,i.jsx)(n.p,{children:"This is a short formal description of the grammar supported in a BNF\nform."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Constructs enclosed between ",(0,i.jsx)(n.code,{children:"[]"})," are optional."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"*"})," denotes zero or many repetitions."]}),"\n",(0,i.jsxs)(n.li,{children:["Uppercase words (",(0,i.jsx)(n.code,{children:"FUNCTION"}),") and single-quoted text (",(0,i.jsx)(n.code,{children:"')'"}),") indicate\ngrammar terminals."]}),"\n",(0,i.jsxs)(n.li,{children:["Parentheses ",(0,i.jsx)(n.code,{children:"()"})," are used for grouping productions together."]}),"\n",(0,i.jsxs)(n.li,{children:["The vertical bar ",(0,i.jsx)(n.code,{children:"|"})," indicates choice between two constructs."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["SQL reserved keywords cannot be used as table and view names.  In\naddition, the following keywords are reserved: ",(0,i.jsx)(n.code,{children:"USER"}),", ",(0,i.jsx)(n.code,{children:"NOW"}),'.  All\nidentifiers starting with "Feldera" are also reserved (in all case\ncombinations).']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"statementList:\n      statement [ ';' statement ]* [ ';' ]\n\nstatement\n  :   createTableStatement\n  |   declareRecursiveViewStatement\n  |   createViewStatement\n  |   createFunctionStatement\n  |   createTypeStatement\n  |   createIndexStatement\n  |   createAggregateStatement\n  |   latenessStatement\n\ncolumnDecl\n  :   column generalType [ INTERNED ]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-user-defined-types",children:"Creating user-defined types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"generalType\n  :   type [NOT NULL]\n\ncreateTypeStatement\n  :   CREATE TYPE name AS '(' typedef ')'\n\ntypedef\n  : generalType\n  | name generalType [, name type ]*\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/sql/types#user-defined-types",children:"user-defined types"})]}),"\n",(0,i.jsx)(n.h2,{id:"creating-tables",children:"Creating tables"}),"\n",(0,i.jsx)("a",{id:"default"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"createTableStatement\n  :   CREATE TABLE name\n      '(' tableElement [, tableElement ]* ')'\n      [ 'WITH' keyValueList ]\n\ntableElement\n  :   columnName generalType ( columnConstraint )*\n  |   columnName\n  |   tableConstraint\n\ncolumnConstraint\n  :   PRIMARY KEY\n  |   FOREIGN KEY REFERENCES identifier '(' identifier ')'\n  |   LATENESS expression\n  |   WATERMARK expression\n  |   DEFAULT expression\n  |   INTERNED\n\ntableConstraint\n  :   [ CONSTRAINT name ]\n      {\n          CHECK '(' expression ')'\n      |   PRIMARY KEY parensColumnList\n      }\n  |   FOREIGN KEY parensColumnList REFERENCES identifier parensColumnList\n\nparensColumnList\n  :   '(' columnName [, columnName ]* ')'\n\nkeyValueList\n  : '(' keyValue ( ',' keyValue )* ')'\n\nkeyValue\n  : stringLiteral '=' stringLiteral\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Columns that are part of a ",(0,i.jsx)(n.code,{children:"PRIMARY KEY"})," cannot have nullable types."]}),"\n",(0,i.jsxs)(n.p,{children:["Columns that are part of a ",(0,i.jsx)(n.code,{children:"FOREIGN KEY"})," must refer to ",(0,i.jsx)(n.code,{children:"PRIMARY KEY"}),"\ncolumns in some table.  Their types must must match (but ",(0,i.jsx)(n.code,{children:"FOREIGN KEY"}),"\ncolumns may be nullable)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CREATE TABLE"})," is used to declare tables.  Tables correspond to input\ndata sources.  A table declaration must list the table columns and\ntheir types.  Here is an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE empsalary (\n    depname varchar not null PRIMARY KEY,\n    empno bigint FOREIGN KEY REFERENCES employee(empid),\n    salary int,\n    enroll_date date\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A table declaration can have an optional ",(0,i.jsx)(n.code,{children:"WITH"})," clause which is used\nto specify properties of the connector that provides the source data.\nThe properties are specified as key-value pairs, each written as a\nstring.  Here is an example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE empsalary (\n    depname varchar,\n    empno bigint,\n    salary int,\n    enroll_date date\n) WITH (\n    'source' = 'kafka',\n    'url' = '127.0.0.1:8080'\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"table-properties-that-impact-the-program-semantics",children:"Table properties that impact the program semantics"}),"\n",(0,i.jsx)(n.h4,{id:"materialized-tables",children:"Materialized tables"}),"\n",(0,i.jsxs)(n.p,{children:["Unlike a database, Feldera does not normally maintain the contents of\ntables; it will only store as much data as necessary to compute future\noutputs.  By specifying the property ",(0,i.jsx)(n.code,{children:"'materialized' = 'true'"})," or by\nadding a primary key constraint to the table, a user\ninstructs Feldera to also maintain the complete contents of the table.\nSuch materialized tables can be browsed and queried at runtime.\nSee ",(0,i.jsx)(n.a,{href:"/sql/materialized",children:"Materialized Tables and Views"})," for more details."]}),"\n",(0,i.jsx)(n.h4,{id:"interned-strings",children:"Interned strings"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"INTERNED"})," annotation can be added to a column with type ",(0,i.jsx)(n.code,{children:"VARCHAR"}),"\nor ",(0,i.jsx)(n.code,{children:"CHAR"})," (and other equivalent type aliases, such as ",(0,i.jsx)(n.code,{children:"STRING"})," and\n",(0,i.jsx)(n.code,{children:"TEXT"}),"), and is a hint to the compiler to use an interned\nimplementation for these strings (currently this annotation is ignored\non other column types).  Interned strings keep a single copy of each\nstring and replace such strings with a cryptographic hash function of\nthe string value.  This works well if strings are only used for\nequality comparisons; when interned strings participate in other\ncomputations, or before being emitted to the output, they are\nconverted back to their original values."]}),"\n",(0,i.jsx)(n.h4,{id:"append-only-tables",children:"Append-only tables"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"append_only"})," Boolean property describes tables that only support\ninsertions.  Updates or deletes are not allowed in such tables."]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/sql/streaming#append_only-tables",children:"Streaming SQL Extensions, append-only\ntables"})]}),"\n",(0,i.jsx)(n.h4,{id:"size-hints",children:"Size hints"}),"\n",(0,i.jsxs)(n.p,{children:["The property ",(0,i.jsx)(n.code,{children:"expected_size"})," can be used to pass information to the\nSQL compiler about the expected size of a table in steady state\noperation.  The value of this property should be an integer value."]}),"\n",(0,i.jsx)(n.h3,{id:"lateness",children:"LATENESS"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"latenessStatement\n  :   LATENESS view '.' column expression\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/sql/streaming#lateness-expressions",children:"Streaming SQL Extensions, LATENESS"})]}),"\n",(0,i.jsx)(n.h3,{id:"watermarks",children:"WATERMARKS"}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/sql/streaming#watermark-expressions",children:"Streaming SQL Extensions, WATERMARKS"})]}),"\n",(0,i.jsx)(n.h2,{id:"creating-user-defined-functions",children:"Creating user-defined functions."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CREATE FUNCTION"})," is used to declare ",(0,i.jsx)(n.a,{href:"/sql/udf",children:"user-defined functions"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"createFunctionStatement\n  :   CREATE FUNCTION name '(' [ columnDecl [, columnDecl ]* ] ')' RETURNS generalType\n      [ AS expression ]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-user-defined-aggregates",children:"Creating user-defined aggregates."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CREATE AGGREGATE"})," is used to declare ",(0,i.jsx)(n.a,{href:"/sql/udf#user-defined-aggregates",children:"user-defined aggregates"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"createAggregateStatement\n  :   CREATE [ LINEAR ] AGGREGATE name '(' [ columnDecl [, columnDecl ]* ] ')' RETURNS generalType\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-views",children:"Creating views"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CREATE VIEW"})," is used to declare a view.  The optional ",(0,i.jsx)(n.code,{children:"LOCAL"}),"\nkeyword can be used to indicate that the declared view is not exposed\nto the outside world as an output of the computation.  This is useful\nfor modularizing the SQL code, by declaring intermediate views that\nare used in the implementation of other views.\nThe ",(0,i.jsx)(n.code,{children:"MATERIALIZED"})," keyword instructs Feldera to maintain a full copy\nof the view's output in addition to producing the\nstream of changes.\nSuch materialized views can be browsed and queried at runtime.\nSee ",(0,i.jsx)(n.a,{href:"/sql/materialized",children:"Materialized Tables and Views"})," for more details."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"DECLARE RECURSIVE VIEW"})," is used to declare a view that can afterwards\nbe used in a recursive SQL query.  The syntax of this statement is\nreminiscent of a table declaration, without constraints.  Recursive\nqueries are documented in ",(0,i.jsx)(n.a,{href:"recursion",children:"this section"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"declareRecursiveViewStatement:\n  :   DECLARE RECURSIVE VIEW name\n      '(' columnDecl [, columnDecl ]* ')'\n\ncreateViewStatement\n  :   CREATE [ LOCAL | MATERIALIZED ] VIEW name\n      [ '(' columnName [, columnName ]* ')' ]\n      [ 'WITH' keyValueList ]\n      AS query\n"})}),"\n",(0,i.jsx)("a",{id:"setop"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"query\n  :   values\n  |   WITH withItem [ , withItem ]* query\n  |   {\n          select\n      |   selectWithoutFrom\n      |   query UNION [ ALL | DISTINCT ] query\n      |   query EXCEPT [ ALL | DISTINCT ] query\n      |   query MINUS [ ALL | DISTINCT ] query\n      |   query INTERSECT [ ALL | DISTINCT ] query\n      }\n      [ ORDER BY orderItem [, orderItem ]* ]\n      [ LIMIT { count | ALL } ]\n\n\nwithItem\n  :   name\n      [ '(' column [, column ]* ')' ]\n      AS '(' query ')'\n"})}),"\n",(0,i.jsx)("a",{id:"values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"values\n  :   { VALUES | VALUE } expression [, expression ]*\n\nselect\n  :   SELECT [ ALL | DISTINCT ]\n          { * | projectItem [, projectItem ]* }\n      FROM tableExpression\n      [ WHERE booleanExpression ]\n      [ GROUP BY [ ALL | DISTINCT ] { groupItem [, groupItem ]* } ]\n      [ HAVING booleanExpression ]\n"})}),"\n",(0,i.jsx)("a",{id:"lateral"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"tablePrimary\n  :   tableName '(' TABLE tableName ')'\n  |   tablePrimary '(' columnDecl [, columnDecl ]* ')'\n  |   [ LATERAL ] '(' query ')'\n  |   UNNEST '(' expression ')' [ WITH ORDINALITY ]\n  |   TABLE '(' functionName '(' expression [, expression ]* ')' ')'\n"})}),"\n",(0,i.jsx)("a",{id:"cube"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"groupItem:\n      expression\n  |   '(' ')'\n  |   '(' expression [, expression ]* ')'\n  |   CUBE '(' expression [, expression ]* ')'\n  |   ROLLUP '(' expression [, expression ]* ')'\n\nselectWithoutFrom\n  :   SELECT [ ALL | DISTINCT ]\n          { * | projectItem [, projectItem ]* }\n"})}),"\n",(0,i.jsx)("a",{id:"order"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"orderItem\n  :   expression [ ASC | DESC ] [ NULLS FIRST | NULLS LAST ]\n"})}),"\n",(0,i.jsx)("a",{id:"as"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"projectItem\n  :   expression [ [ AS ] columnAlias ]\n  |   tableAlias . *\n"})}),"\n",(0,i.jsx)("a",{id:"join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"tableExpression\n  :   tableReference [, tableReference ]*\n  |   tableExpression [ NATURAL ] [ { LEFT | RIGHT | FULL } [ OUTER | ASOF ] ] JOIN tableExpression [ joinCondition ]\n  |   tableExpression CROSS JOIN tableExpression\n  |   tableExpression [ CROSS | OUTER ] APPLY tableExpression\n\njoinCondition\n  :   ON booleanExpression\n  |   USING '(' column [, column ]* ')'\n\ntableReference\n  :   tablePrimary [ pivot ] [ [ AS ] alias [ '(' columnAlias [, columnAlias ]* ')' ] ]\n\npivot\n  :   PIVOT '('\n      pivotAgg [, pivotAgg ]*\n      FOR pivotList\n      IN '(' pivotExpr [, pivotExpr ]* ')'\n      ')'\n\npivotAgg\n  :   agg '(' [ ALL | DISTINCT ] value [, value ]* ')'\n      [ [ AS ] alias ]\n\npivotList\n  :   columnOrList\n\npivotExpr\n  :   exprOrList [ [ AS ] alias ]\n\ncolumnOrList\n  :   column\n  |   '(' column [, column ]* ')'\n\nexprOrList\n  :   expr\n  |   '(' expr [, expr ]* ')'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Beware that in the SQL ",(0,i.jsx)(n.code,{children:"UNION"}),", ",(0,i.jsx)(n.code,{children:"EXCEPT"}),", and ",(0,i.jsx)(n.code,{children:"INTERSECT"})," statements\nthe column names are ",(0,i.jsx)(n.em,{children:"not"})," used to reorder columns."]}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"orderItem"}),", if expression is a positive integer n, it denotes the\nnth item in the ",(0,i.jsx)(n.code,{children:"SELECT"})," clause."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-indexes",children:"Creating indexes"}),"\n",(0,i.jsxs)(n.p,{children:["Feldera supports the ",(0,i.jsx)(n.code,{children:"CREATE INDEX"})," SQL statement with the following\nsyntax:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"createIndexStatement\n   : CREATE INDEX identifier ON identifier(columnOrList);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For the purpose of incremental view maintenance Feldera automatically\ncreates all required indexes by analyzing the query defining the view.\nThe SQL ",(0,i.jsx)(n.code,{children:"CREATE INDEX"})," statement is used for a different purpose in\nFeldera than in standard databases; the statement is used to specify\n",(0,i.jsx)(n.em,{children:"unique keys"})," for output views.  Consider the following SQL program\nfragment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"CREATE VIEW V AS SELECT id, ... FROM ...;\n\nCREATE INDEX v_index ON V(id);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CREATE INDEX"})," statement creates an index named ",(0,i.jsx)(n.code,{children:"v_index"})," over the\nview ",(0,i.jsx)(n.code,{children:"V"}),", treating column ",(0,i.jsx)(n.code,{children:"id"})," as a primary key.  The index does ",(0,i.jsx)(n.em,{children:"not"}),"\nenforce uniqueness of the unique columns at runtime.  This information\ncan be used by some output connectors, which can refer to ",(0,i.jsx)(n.code,{children:"v_index"})," to\n",(0,i.jsx)(n.a,{href:"/connectors/unique_keys",children:"provide more efficient updates"}),".\nIndexes only have effect for views that are not ",(0,i.jsx)(n.code,{children:"LOCAL"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"A view can have multiple indexes."}),"\n",(0,i.jsx)(n.h3,{id:"aggregate-queries",children:"Aggregate queries"}),"\n",(0,i.jsxs)(n.p,{children:["An aggregate query is a query that contains a ",(0,i.jsx)(n.code,{children:"GROUP BY"})," or a ",(0,i.jsx)(n.code,{children:"HAVING"}),"\nclause, or aggregate functions in the ",(0,i.jsx)(n.code,{children:"SELECT"})," clause. In the\n",(0,i.jsx)(n.code,{children:"SELECT"}),", ",(0,i.jsx)(n.code,{children:"HAVING"})," and ",(0,i.jsx)(n.code,{children:"ORDER"})," BY clauses of an aggregate query, all\nexpressions must be constant within the current group (that is,\ngrouping constants as defined by the ",(0,i.jsx)(n.code,{children:"GROUP BY"})," clause, or constants),\nor aggregate functions, or a combination of constants and aggregate\nfunctions. Aggregate and grouping functions may only appear in an\naggregate query, and only in a ",(0,i.jsx)(n.code,{children:"SELECT"}),", ",(0,i.jsx)(n.code,{children:"HAVING"})," or ",(0,i.jsx)(n.code,{children:"ORDER BY"}),"\nclause.  Aggregate functions are described in ",(0,i.jsx)(n.a,{href:"/sql/aggregates#standard-aggregate-operations",children:"this\nsection"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"sub-queries",children:"Sub-queries"}),"\n",(0,i.jsxs)(n.p,{children:["A scalar sub-query is a sub-query used as an expression. If the\nsub-query returns no rows, the value is ",(0,i.jsx)(n.code,{children:"NULL"}),"; if it returns more\nthan one row, it is an error."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"IN"}),", ",(0,i.jsx)(n.code,{children:"EXISTS"}),", and scalar sub-queries can occur in any place where an\nexpression can occur (such as the ",(0,i.jsx)(n.code,{children:"SELECT"})," clause, ",(0,i.jsx)(n.code,{children:"WHERE"})," clause,\n",(0,i.jsx)(n.code,{children:"ON"})," clause of a ",(0,i.jsx)(n.code,{children:"JOIN"}),", or as an argument to an aggregate function)."]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"IN"}),", ",(0,i.jsx)(n.code,{children:"EXISTS"}),", or scalar sub-query may be correlated; that is,\nit may refer to tables in the ",(0,i.jsx)(n.code,{children:"FROM"})," clause of an enclosing query."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GROUP BY DISTINCT"})," removes duplicate grouping sets (for example,\n",(0,i.jsx)(n.code,{children:"GROUP BY DISTINCT GROUPING SETS ((a), (a, b), (a))"})," is equivalent to\n",(0,i.jsx)(n.code,{children:"GROUP BY GROUPING SETS ((a), (a, b))"}),"); ",(0,i.jsx)(n.code,{children:"GROUP BY ALL"})," is equivalent\nto ",(0,i.jsx)(n.code,{children:"GROUP BY"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"MINUS"})," is equivalent to ",(0,i.jsx)(n.code,{children:"EXCEPT"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"grouping-functions",children:"Grouping functions"}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Function"}),(0,i.jsx)("th",{children:"Description"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsxs)("td",{children:[(0,i.jsx)("code",{children:"GROUPING("}),"expression, [ expression ]",(0,i.jsx)("code",{children:")"})]}),(0,i.jsx)("td",{children:"Returns a bit vector of the grouping expressions"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsxs)("td",{children:[(0,i.jsx)("code",{children:"GROUPING_ID("}),"expression, [ expression ]",(0,i.jsx)("code",{children:")"})]}),(0,i.jsxs)("td",{children:["Synonym for ",(0,i.jsx)("code",{children:"GROUPING"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Example using ",(0,i.jsx)(n.code,{children:"GROUPING"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"select deptno, job, count(*) as c, grouping(deptno) as d,\n  grouping(job) j, grouping(deptno, job) as x\nfrom emp\ngroup by cube(deptno, job);\n+--------+-----------+----+---+---+---+\n| DEPTNO | JOB       | C  | D | J | X |\n+--------+-----------+----+---+---+---+\n|     10 | CLERK     |  1 | 0 | 0 | 0 |\n|     10 | MANAGER   |  1 | 0 | 0 | 0 |\n|     10 | PRESIDENT |  1 | 0 | 0 | 0 |\n|     10 |           |  3 | 0 | 1 | 1 |\n|     20 | ANALYST   |  2 | 0 | 0 | 0 |\n|     20 | CLERK     |  2 | 0 | 0 | 0 |\n|     20 | MANAGER   |  1 | 0 | 0 | 0 |\n|     20 |           |  5 | 0 | 1 | 1 |\n|     30 | CLERK     |  1 | 0 | 0 | 0 |\n|     30 | MANAGER   |  1 | 0 | 0 | 0 |\n|     30 | SALESMAN  |  4 | 0 | 0 | 0 |\n|     30 |           |  6 | 0 | 1 | 1 |\n|        | ANALYST   |  2 | 1 | 0 | 2 |\n|        | CLERK     |  4 | 1 | 0 | 2 |\n|        | MANAGER   |  3 | 1 | 0 | 2 |\n|        | PRESIDENT |  1 | 1 | 0 | 2 |\n|        | SALESMAN  |  4 | 1 | 0 | 2 |\n|        |           | 14 | 1 | 1 | 3 |\n+--------+-----------+----+---+---+---+\n"})}),"\n",(0,i.jsx)(n.h2,{id:"window-aggregates",children:"Window aggregates"}),"\n",(0,i.jsxs)(n.p,{children:["One type of expression that can appear in a ",(0,i.jsx)(n.code,{children:"SELECT"})," statement is a\nwindow aggregate.  The grammar for window aggregates is:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"windowedAggregateCall\n  : agg '(' [ ALL | DISTINCT ] value [, value ]* ')'\n      [ RESPECT NULLS | IGNORE NULLS ]\n      OVER windowSpec\n  | agg '(' '*' ')'\n      OVER windowSpec\n\nwindowSpec\n  :   '('\n      [ windowName ]\n      PARTITION BY expression [, expression ]*\n      [ ORDER BY orderItem [, orderItem ]* ]\n      [\n          RANGE BETWEEN windowRange AND windowRange\n      ]\n      ')'\n\nwindowRange\n  :   CURRENT\n  |   ( UNBOUNDED | expression ) ( PRECEDING | FOLLOWING )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where ",(0,i.jsx)(n.code,{children:"agg"})," is a window aggregate function as described in the ",(0,i.jsx)(n.a,{href:"/sql/aggregates#window-aggregate-functions",children:"section\non aggregation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Currently we require window ranges to have constant values.  This\nprecludes ranges such as ",(0,i.jsx)(n.code,{children:"INTERVAL 1 YEAR"}),", which have variable sizes.\nThe window bounds must be non-negative constant values."]}),"\n",(0,i.jsx)(n.h2,{id:"table-functions",children:"Table functions"}),"\n",(0,i.jsxs)(n.p,{children:["Table functions are invoked using the syntax ",(0,i.jsx)(n.code,{children:"TABLE(function(arguments))"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/sql/table#table-functions-1",children:"Table functions"})]}),"\n",(0,i.jsxs)(n.h2,{id:"asof-joins",children:[(0,i.jsx)(n.code,{children:"ASOF"})," joins"]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.code,{children:"ASOF JOIN"}),' operation combines rows from two tables based on\ntimestamp values.  For each row in the left table, the join\nfinds at most a single row in the right table that has the "closest"\ntimestamp value. The matched row on the right side is the closest\nmatch whose timestamp column is compared using the comparison operator in\nthe ',(0,i.jsx)(n.code,{children:"MATCH_CONDITION"})," clause.  Currently, only ",(0,i.jsx)(n.code,{children:">="})," is supported.\nThe comparison is performed using SQL semantics, which returns ",(0,i.jsx)(n.code,{children:"false"}),"\nwhen comparing ",(0,i.jsx)(n.code,{children:"NULL"})," values with any other values.  Thus a ",(0,i.jsx)(n.code,{children:"NULL"}),"\ntimestamp in the left table will not match any timestamps in the right table."]}),"\n",(0,i.jsxs)(n.p,{children:["Currently, only the ",(0,i.jsx)(n.code,{children:"LEFT"})," form of the ",(0,i.jsx)(n.code,{children:"ASOF JOIN"})," is supported.  In this case,\nwhen there is no match for a row in the left table, the columns from\nthe right table are null-padded."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT *\nFROM left_table LEFT ASOF JOIN right_table\nMATCH_CONDITION ( left_table.timecol >= right_table.timecol )\nON left_table.col = right_table.col\n"})}),"\n",(0,i.jsx)(n.h2,{id:"lambda-expressions",children:"Lambda expressions"}),"\n",(0,i.jsx)(n.p,{children:"Lambda expressions are a class of expressions that represent functions.\nThe grammar for lambda expressions is given by:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"lambdaExpression:\n      parameters '->' expression\n\nparameters:\n      '(' [ identifier [, identifier ] ] ')'\n  |   identifier\n"})}),"\n",(0,i.jsx)(n.p,{children:"Lambda expressions can be used as arguments for higher-order function.\nHere is an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT EXISTS(ARRAY[1, -12, 3], x -> x > 0)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);