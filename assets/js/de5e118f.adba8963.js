"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[6636],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(96540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},53585:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"use_cases/fine_grained_authorization/dynamic","title":"Implementing a dynamic FGA model","description":"What if we wanted to allow not only the object graph, but also the access control","source":"@site/docs/use_cases/fine_grained_authorization/dynamic.md","sourceDirName":"use_cases/fine_grained_authorization","slug":"/use_cases/fine_grained_authorization/dynamic","permalink":"/use_cases/fine_grained_authorization/dynamic","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Implementing a static FGA model","permalink":"/use_cases/fine_grained_authorization/static"},"next":{"title":"Use Case: OpenTelemetry","permalink":"/use_cases/otel/intro"}}');var t=i(74848),s=i(28453);const a={},l="Implementing a dynamic FGA model",o={},d=[{value:"Modeling objects and relationships",id:"modeling-objects-and-relationships",level:2},{value:"Modeling rules as data",id:"modeling-rules-as-data",level:2},{value:"Lights, Camera, Action!",id:"lights-camera-action",level:3},{value:"Changing the rules",id:"changing-the-rules",level:2},{value:"Optimizations",id:"optimizations",level:2},{value:"Takeaways",id:"takeaways",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"implementing-a-dynamic-fga-model",children:"Implementing a dynamic FGA model"})}),"\n",(0,t.jsx)(n.p,{children:"What if we wanted to allow not only the object graph, but also the access control\nmodel itself to change at runtime? For instance, consider building a generic FGA platform\nlike OpenFGA, where users can define new object types, relationships, and rules.\nWith the approach we've taken so far, such changes would require creating a new SQL program\nand re-computing all derived relationships from scratch. In a large system, this may cause\nservice disruptions, which may not be acceptable, especially if these changes occur frequently."}),"\n",(0,t.jsx)(n.p,{children:"In this section we build an FGA implementation that supports incremental updates to the\nauthorization model in addition to incremental updates to the object graph.\nThe key idea is to model FGA rules as relational data instead of hard-coding them as SQL queries."}),"\n",(0,t.jsxs)(n.p,{children:["The implementation described below is available as a ",(0,t.jsx)(n.a,{href:"https://try.feldera.com/create/?name=dynamic-fga",children:"pre-packaged use case\nin the Feldera online sandbox"})," as well\nas in your local Feldera installation."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"The implementation in this section prioritizes simplicity and clarity over performance.\nWhile it is not the most optimized solution, it is intentionally designed to effectively illustrate\nthe concept."})}),"\n",(0,t.jsx)(n.h2,{id:"modeling-objects-and-relationships",children:"Modeling objects and relationships"}),"\n",(0,t.jsx)(n.p,{children:"In the interests of clarity, we use strings instead of integers for unique object IDs, allowing\nobjects to be referenced by their names."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create type id_t as string;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We start by modeling all object types as a single table. This approach allows new object types\nto be introduced without requiring additional tables. Since different object types have varying\nsets of attributes, we use a dynamically-typed representation of attributes with the\n",(0,t.jsxs)(n.a,{href:"/sql/json",children:[(0,t.jsx)(n.code,{children:"VARIANT"})," type"]}),". Think of a ",(0,t.jsx)(n.code,{children:"VARIANT"})," instance as a JSON document."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create type properties_t as variant;\n\n-- All objects in the object graph.\ncreate table objects (\n    id id_t not null primary key,\n    properties properties_t\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, we model all relationships that form the edges of the object graph as a separate table.\nFollowing common FGA terminology, a relationship connects a ",(0,t.jsx)(n.strong,{children:"subject"})," (the entity holding a\npermission) to a ",(0,t.jsx)(n.strong,{children:"resource"})," (the entity to which the relationship grants access):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create table relationships (\n    -- Subject id (reference to the `objects` table).\n    subject_id id_t not null,\n    -- Resource id (reference to the `objects` table).\n    resource_id id_t not null,\n    relationship id_t not null\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here are some example relationships:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"subject_id"}),(0,t.jsx)(n.th,{children:"resource_id"}),(0,t.jsx)(n.th,{children:"relationship"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"emily"}),(0,t.jsx)(n.td,{children:"engineering"}),(0,t.jsx)(n.td,{children:"member"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"accounting"}),(0,t.jsx)(n.td,{children:"financials"}),(0,t.jsx)(n.td,{children:"editor"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"folder1"}),(0,t.jsx)(n.td,{children:"folder2"}),(0,t.jsx)(n.td,{children:"parent"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"modeling-rules-as-data",children:"Modeling rules as data"}),"\n",(0,t.jsxs)(n.p,{children:["We need a way to model logical conditions as part of FGA rules. A condition\nis a Boolean function over subject and resource attributes. Since SQL does not support\nfunction-typed values, we represent conditions as strings containing expressions,\ne.g., ",(0,t.jsx)(n.code,{children:"subject.is_banned != true"}),".\nWe use ",(0,t.jsx)(n.a,{href:"https://jmespath.org/",children:"JMESPath"})," syntax for expressions.  JMESPath is a JSON query\nlanguage similar to JSONPath, but with better support for evaluating conditions over JSON\ndocuments (rather than just filtering and extracting values from the document):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- JMESPath expression.\ncreate type predicate_t as string;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The JMESPath expression that defines the condition has access to two predefined variables:\n",(0,t.jsx)(n.code,{children:"subject"})," and ",(0,t.jsx)(n.code,{children:"resource"}),", which store subject and resource attributes respectively,\ne.g., ",(0,t.jsx)(n.code,{children:"subject.is_banned != `true` "}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["We create a ",(0,t.jsx)(n.a,{href:"/sql/udf",children:"user-defined function (UDF)"})," that evaluates\nJMESPath expressions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Returns `true` if the expression evaluates to `true`, `false` if it evaluates to any other value\n-- and `NULL` if `condition` is not a valid JMESPAth expression.\ncreate function check_condition(\n    condition predicate_t,\n    subject_properties properties_t,\n    resource_properties properties_t\n) returns boolean;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The implementation of this UDF in Rust is given below. It uses the ",(0,t.jsxs)(n.a,{href:"https://crates.io/crates/jmespath",children:[(0,t.jsx)(n.code,{children:"jmespath"})," crate"]}),"\nto evaluate the JMESPath expression:"]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsxs)("summary",{children:[" ",(0,t.jsx)(n.code,{children:"check_condition"})," UDF implementation in Rust "]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use std::collections::BTreeMap;\nuse feldera_sqllib::Variant;\n\npub fn check_condition(\n    condition: Option<SqlString>,\n    subject_properties: Option<Variant>,\n    resource_properties: Option<Variant>)\n-> Result<Option<bool>, Box<dyn std::error::Error>> {\n    Ok(do_check_condition(condition, subject_properties, resource_properties))\n}\n\npub fn do_check_condition(\n    condition: Option<SqlString>,\n    subject_properties: Option<Variant>,\n    resource_properties: Option<Variant>)\n-> Option<bool> {\n    let condition = condition?;\n    let subject_properties = subject_properties?;\n    let resource_properties = resource_properties?;\n\n    let expr = jmespath::compile(condition.str()).map_err(|e| println!("invalid jmes expression: {e}")).ok()?;\n    let all_properties = Variant::Map(BTreeMap::from(\n        [(Variant::String(SqlString::from_ref("subject")), subject_properties),\n         (Variant::String(SqlString::from_ref("resource")), resource_properties)]));\n\n    let result = expr.search(all_properties).map_err(|e| println!("error evaluating jmes expression: {e}")).ok()?;\n    Some(result.as_ref() == &jmespath::Variable::Bool(true))\n}\n'})})]}),"\n",(0,t.jsx)(n.p,{children:"We can now define tables that store FGA rules. As before we model rules with one and two\nprerequisites only:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Rules with one pre-requisite:\n--\n-- prerequisite_relationship(object1, object2) and condition(object1, object2) -> derived_relationship(object1, object2)\ncreate table unary_rules (\n    prerequisite_relationship id_t,\n    condition predicate_t,\n    derived_relationship id_t\n);\n\n-- Rules with two pre-requisites.\n--\n-- prerequisite1_relationship(object1, object2) and prerequisite2_relationship(object2, object3) and condition(object1, object3)\n--     -> derived_relationship(object1, object3)\ncreate table binary_rules (\n    prerequisite1_relationship id_t,\n    prerequisite2_relationship id_t,\n    condition predicate_t,\n    derived_relationship id_t\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:"As an example, here is a complete set of rules for the file management service:"}),"\n",(0,t.jsx)(n.p,{children:"Unary rules:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"prerequisite_relationship"}),(0,t.jsx)(n.th,{children:"condition"}),(0,t.jsx)(n.th,{children:"derived_relationship"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"editor"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"group-can-write"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"viewer"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"group-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"group-can-write \xa0"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"group-can-read   \xa0"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Binary rules:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"prerequisite1_relationship"}),(0,t.jsx)(n.th,{children:"prerequisite2_relationship"}),(0,t.jsx)(n.th,{children:"condition"}),(0,t.jsx)(n.th,{children:"derived_relationship"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"group-can-write"}),(0,t.jsx)(n.td,{children:"parent"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"group-can-write"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"group-can-read"}),(0,t.jsx)(n.td,{children:"parent       \xa0"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"true"})}),(0,t.jsx)(n.td,{children:"group-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"member          \xa0"}),(0,t.jsx)(n.td,{children:"group-can-write \xa0"}),(0,t.jsxs)(n.td,{children:["subject.is_banned != ",(0,t.jsx)(n.code,{children:"true"})]}),(0,t.jsx)(n.td,{children:"user-can-write"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"member          \xa0"}),(0,t.jsx)(n.td,{children:"group-can-read"}),(0,t.jsxs)(n.td,{children:["subject.is_banned != ",(0,t.jsx)(n.code,{children:"true"})]}),(0,t.jsx)(n.td,{children:"user-can-read"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"The final step is to write SQL views that evaluate these rules over the object graph."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Relationships derived using unary rules.\ndeclare recursive view derived_unary_relationships (\n    subject_id id_t not null,\n    resource_id id_t not null,\n    relationship id_t\n);\n\n-- Relationships derived using binary rules.\ndeclare recursive view derived_binary_relationships (\n    subject_id id_t not null,\n    resource_id id_t not null,\n    relationship id_t\n);\n\n-- All derived relationships.\ndeclare recursive view derived_relationships (\n    subject_id id_t not null,\n    resource_id id_t not null,\n    relationship id_t\n);\n\ncreate materialized view derived_unary_relationships as\nselect\n    derived_relationships.subject_id,\n    derived_relationships.resource_id,\n    unary_rules.derived_relationship as relationship\nfrom\n    derived_relationships\n    join unary_rules on derived_relationships.relationship = unary_rules.prerequisite_relationship\n    join objects subject on subject.id = derived_relationships.subject_id\n    join objects resource on resource.id = derived_relationships.resource_id\nwhere\n    check_condition(unary_rules.condition, subject.properties, resource.properties);\n\ncreate materialized view derived_binary_relationships as\nselect\n    r1.subject_id,\n    r2.resource_id,\n    binary_rules.derived_relationship as relationship\nfrom\nderived_relationships r1\n    join binary_rules on r1.relationship = binary_rules.prerequisite1_relationship\n    join derived_relationships r2 on r1.resource_id = r2.subject_id and binary_rules.prerequisite2_relationship = r2.relationship\n    join objects subject on subject.id = r1.subject_id\n    join objects resource on resource.id = r2.resource_id\nwhere\n    check_condition(binary_rules.condition, subject.properties, resource.properties);\n\ncreate materialized view derived_relationships as\nselect * from relationships\nunion all\nselect * from derived_unary_relationships\nunion all\nselect * from derived_binary_relationships;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"lights-camera-action",children:"Lights, Camera, Action!"}),"\n",(0,t.jsx)(n.p,{children:"Let's see if it works. Open the complete code provided above in one of the following environments:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Feldera online sandbox: ",(0,t.jsx)(n.a,{href:"https://try.feldera.com/create/?name=dynamic-fga",children:"https://try.feldera.com/create/?name=dynamic-fga"})," OR"]}),"\n",(0,t.jsxs)(n.li,{children:["Your local Feldera instance: ",(0,t.jsx)(n.a,{href:"http://127.0.0.1:8080/create/?name=dynamic-fga",children:"127.0.0.1:8080/create/?name=dynamic-fga"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Start the pipeline and create rules for the file manager example using ad hoc queries:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"insert into unary_rules values\n  ('editor', '`true`', 'group-can-write'),         -- Rule 1.\n  ('viewer', '`true`', 'group-can-read'),          -- Rule 3.\n  ('group-can-write', '`true`', 'group-can-read'); -- Rule 4.\n\ninsert into binary_rules values\n  ('group-can-write', 'parent', '`true`', 'group-can-write'),                     -- Rule 2.\n  ('group-can-read', 'parent', '`true`', 'group-can-read'),                       -- Rule 5.\n  ('member', 'group-can-write', 'subject.is_banned != `true`', 'user-can-write'), -- Rule 6.\n  ('member', 'group-can-read', 'subject.is_banned != `true`', 'user-can-read');   -- Rule 7.\n"})}),"\n",(0,t.jsx)(n.p,{children:"Populate the object graph:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"insert into objects values\n  ('user:emily', '{\"is_banned\": false}'),\n  ('user:irene', '{\"is_banned\": false}'),\n  ('user:adam', '{\"is_banned\": true}'),\n  ('group:engineering', '{}'),\n  ('group:it', '{}'),\n  ('group:accounting', '{}'),\n  ('file:designs', '{}'),\n  ('file:financials', '{}'),\n  ('file:f1', '{}'),\n  ('file:f2', '{}'),\n  ('file:f3', '{}');\n\ninsert into relationships values\n  ('user:emily', 'group:engineering', 'member'),\n  ('user:irene', 'group:it', 'member'),\n  ('user:adam', 'group:accounting', 'member'),\n  ('group:engineering', 'file:designs', 'editor'),\n  ('group:it', 'file:designs', 'editor'),\n  ('group:it', 'file:financials', 'editor'),\n  ('group:accounting', 'file:financials', 'editor'),\n  ('group:accounting', 'file:designs', 'reader'),\n  ('file:designs', 'file:f1', 'parent'),\n  ('file:designs', 'file:f2', 'parent'),\n  ('file:financials', 'file:f3', 'parent');\n"})}),"\n",(0,t.jsx)(n.p,{children:"Validate the output of the program:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select *\nfrom derived_relationships\nwhere\n  relationship = 'user-can-read';\n"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"subject_id"}),(0,t.jsx)(n.th,{children:"resource_id"}),(0,t.jsx)(n.th,{children:"relationship"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":emily"]}),(0,t.jsxs)(n.td,{children:["file",":designs"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":irene"]}),(0,t.jsxs)(n.td,{children:["file",":financials"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":irene"]}),(0,t.jsxs)(n.td,{children:["file",":f3"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":emily"]}),(0,t.jsxs)(n.td,{children:["file",":f1"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":irene"]}),(0,t.jsxs)(n.td,{children:["file",":f1"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":irene"]}),(0,t.jsxs)(n.td,{children:["file",":f2"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":irene"]}),(0,t.jsxs)(n.td,{children:["file",":designs"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":emily"]}),(0,t.jsxs)(n.td,{children:["file",":f2"]}),(0,t.jsx)(n.td,{children:"user-can-read"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"changing-the-rules",children:"Changing the rules"}),"\n",(0,t.jsxs)(n.p,{children:["With this new implementation, we gain a level of flexibility that was not achievable with our initial static FGA\nimplementation. Specifically, we can now dynamically add, remove, and modify rules, relationships, and object types as needed.\nFor example, consider enhancing our file manager authorization model by introducing an owner relationship. In this model, if\na group is designated as the ",(0,t.jsx)(n.code,{children:"owner"})," of a file, all users within that group will have the permission to permanently delete\nthe file from the system."]}),"\n",(0,t.jsx)(n.p,{children:"The corresponding FGA rules are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 8:"})," ",(0,t.jsx)(n.code,{children:"owner(group, file) -> group-can-write(group, file)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 9:"})," ",(0,t.jsx)(n.code,{children:"owner(group, file) -> group-can-permanently-delete(group, file)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 10:"})," ",(0,t.jsx)(n.code,{children:"group-can-permanently-delete(group, file1) and parent(file1, file2) -> group-can-permanently-delete(group, file2)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 11:"})," ",(0,t.jsx)(n.code,{children:"member(user, group) and group-can-permanently-delete(group, file) and (not user.is_banned) -> user-can-permanently-delete(user, file)"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In SQL:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"insert into unary_rules values\n  ('owner', '`true`', 'group-can-write'),\n  ('owner', '`true`', 'group-can-permanently-delete');\n\ninsert into binary_rules values\n  ('group-can-permanently-delete', 'parent', '`true`', 'group-can-permanently-delete'),\n  ('member', 'group-can-permanently-delete', 'subject.is_banned != `true`', 'user-can-permanently-delete');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Let's see if it worked.  Make ",(0,t.jsx)(n.code,{children:"group:engineering"})," an owner of ",(0,t.jsx)(n.code,{children:"file:designs"})," and list all derived\n",(0,t.jsx)(n.code,{children:"user-can-permanently-delete"})," relationships:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"insert into relationships values ('group:engineering', 'file:designs', 'owner');\n\nselect *\nfrom derived_relationships\nwhere\n  relationship = 'user-can-permanently-delete';\n"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"subject_id"}),(0,t.jsx)(n.th,{children:"resource_id"}),(0,t.jsx)(n.th,{children:"relationship"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":emily"]}),(0,t.jsxs)(n.td,{children:["file",":designs"]}),(0,t.jsx)(n.td,{children:"user-can-permanently-delete"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":emily"]}),(0,t.jsxs)(n.td,{children:["file",":f1"]}),(0,t.jsx)(n.td,{children:"user-can-permanently-delete"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["user",":emily"]}),(0,t.jsxs)(n.td,{children:["file",":f2"]}),(0,t.jsx)(n.td,{children:"user-can-permanently-delete"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"With only a few lines of code, we  have built a fully dynamic FGA implementation that can incrementally reconfigure\nitself on the fly with 0 downtime or service disruption!"}),"\n",(0,t.jsx)(n.h2,{id:"optimizations",children:"Optimizations"}),"\n",(0,t.jsx)(n.p,{children:"The main shortcoming of proactively computing all relationships that can be derived from the object graph is that the\nnumber of all possible derived relationships can be very large, making them expensive to compute and store; however only\na very small subset of these relationships will typically be accessed at runtime. We therefore want to optimize our\ncomputation to only derive the subset of relationships that can be accessed by authorization checks performed by the system.\nFor example, only users who are logged into the system can issue authorization requests; hence we only need to consider\ncurrently active users in the computation.  When a new user logs in, their permissions can be incrementally computed on the fly."}),"\n",(0,t.jsxs)(n.p,{children:["Similarly, not all resources in the system can be addressable at any given time, for example it's possible that users can\nonly access files when they are browsing their parent folder.  In this case, we should only track permissions for currently\nactive resources.  Let's implement this last optimization as an example.  Replace the ",(0,t.jsx)(n.code,{children:"create table objects(..);"})," declaration\nwith the following fragment:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'-- All objects in the system, including active and currently inactive objects.\ncreate table all_objects (\n    id id_t not null primary key,\n    properties properties_t\n);\n\n-- Currently active objects.\n--\n-- This table is a subset of object ids, including only those objects for which authorization rules need to be evaluated.\n-- The definition of an "active object" varies depending on the application and may include, for example, folders or wiki pages\n-- currently accessed or open by at least one user.\ncreate table active_objects(\n    object_id id_t not null\n);\n\n-- Relevant objects are all active objects plus all objects from which\n-- an active object can be reached by following object graph edges.\ndeclare recursive view relevant_objects(\n    object_id id_t not null\n);\n\ncreate view relevant_objects as\nselect * from active_objects\nunion all\nselect relationships.subject_id\n    from relevant_objects join relationships on relevant_objects.object_id = relationships.resource_id;\n\n-- Objects whose id\'s are in `relevant_objects`.\ncreate materialized view objects as\nselect all_objects.*\n    from all_objects join relevant_objects on all_objects.id = relevant_objects.object_id;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The new program will only compute derived relationships over objects in ",(0,t.jsx)(n.code,{children:"relevant_objects"})," only."]}),"\n",(0,t.jsx)(n.h2,{id:"takeaways",children:"Takeaways"}),"\n",(0,t.jsx)(n.p,{children:"Whether you are adding a flexible authorization layer to your application or building a general-purpose policy\nframework, Feldera offers a high-performance off-the-shelf compute engine for the job. Two features of Feldera\nmake it ideal for this purpose:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Incremental query evaluation"})," enables Feldera to handle changes to the object graph or the FGA model\nin real-time by avoiding complete recomputation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Support for mutually recursive views"})," allows naturally capturing iterative graph traversal with recursive queries."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"With these capabilities, Feldera stands out as a powerful solution for advanced authorization and policy management tasks."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);