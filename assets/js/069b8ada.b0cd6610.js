"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[9016],{13252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"connectors/sinks/iceberg","title":"Iceberg Sink Kafka Connector","description":"Direct Iceberg output is not currently supported in Feldera.","source":"@site/docs/connectors/sinks/iceberg.md","sourceDirName":"connectors/sinks","slug":"/connectors/sinks/iceberg","permalink":"/connectors/sinks/iceberg","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var c=t(74848),i=t(28453);const o={},s="Iceberg Sink Kafka Connector",a={},l=[{value:"Writing to Iceberg via Kafka Connect",id:"writing-to-iceberg-via-kafka-connect",level:2},{value:"Workflow",id:"workflow",level:4},{value:"Avro format configuration",id:"avro-format-configuration",level:5},{value:"Iceberg sink connector configuration for Kafka Connect",id:"iceberg-sink-connector-configuration-for-kafka-connect",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"iceberg-sink-kafka-connector",children:"Iceberg Sink Kafka Connector"})}),"\n",(0,c.jsx)(n.p,{children:"Direct Iceberg output is not currently supported in Feldera.\nHowever, you can write to Iceberg indirectly via the Iceberg Sink Kafka Connect Connector."}),"\n",(0,c.jsx)(n.h2,{id:"writing-to-iceberg-via-kafka-connect",children:"Writing to Iceberg via Kafka Connect"}),"\n",(0,c.jsxs)(n.p,{children:["Feldera enables integration with Apache Iceberg by first writing\nchange data capture (CDC) records to Kafka, and then using the\n",(0,c.jsx)(n.a,{href:"https://github.com/databricks/iceberg-kafka-connect",children:"Iceberg Sink Connector for Kafka Connect"})," to persist these changes\nto Iceberg tables."]}),"\n",(0,c.jsx)(n.h4,{id:"workflow",children:"Workflow"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"Feldera writes Avro-encoded CDC data to a Kafka topic."}),"\n",(0,c.jsx)(n.li,{children:"Kafka Connect consumes this topic using the Iceberg Sink Connector."}),"\n",(0,c.jsx)(n.li,{children:"The connector writes updates to an Iceberg table."}),"\n"]}),"\n",(0,c.jsx)(n.h5,{id:"avro-format-configuration",children:"Avro format configuration"}),"\n",(0,c.jsx)(n.p,{children:"The Avro format must be configured with:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["An index on the identifying columns of the view, consistent with ",(0,c.jsx)(n.code,{children:"iceberg.tables.default-id-columns"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"update_format"})," set to ",(0,c.jsx)(n.code,{children:"raw"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"cdc_field"})," defined (e.g. set to ",(0,c.jsx)(n.code,{children:"op"}),")","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["This ",(0,c.jsx)(n.code,{children:"cdc_field"})," should match the ",(0,c.jsx)(n.code,{children:"iceberg.tables.cdc-field"})," config in Iceberg sink connector for Kafka Connect."]}),"\n",(0,c.jsxs)(n.li,{children:["If ",(0,c.jsx)(n.code,{children:"cdc_field"})," is not set, it will be append-only log of output records without any CDC metadata."]}),"\n",(0,c.jsxs)(n.li,{children:["Each output record will contain the field ",(0,c.jsx)(n.code,{children:"op"})," which will have one of the following values:","\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"I"})," for ",(0,c.jsx)(n.strong,{children:"Insert"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"D"})," for ",(0,c.jsx)(n.strong,{children:"Delete"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"U"})," for ",(0,c.jsx)(n.strong,{children:"Upsert"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Example:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-sql",children:'create materialized view pizzas with (\n   \'connectors\' = \'[\n    {\n      "index": "idx1",\n      "transport": {\n          "name": "kafka_output",\n          "config": {\n              "bootstrap.servers": "localhost:29092",\n              "topic": "pizzas"\n          }\n      },\n      "format": {\n          "name": "avro",\n          "config": {\n              "registry_urls": ["http://localhost:18081"],\n              "update_format": "raw",\n              "cdc_field": "op",\n              "subject_name_strategy": "topic_name"\n          }\n      }\n    }\n   ]\'\n) as select * from tbl order by order_number desc limit 10;\ncreate index idx1 on pizzas(order_number);\n'})}),"\n",(0,c.jsx)(n.admonition,{type:"important",children:(0,c.jsx)(n.p,{children:"The index attribute is required and ensures proper materialization of the Iceberg table.\nFor more information, see documentation](/connectors/unique_keys#views-with-unique-keys)."})}),"\n",(0,c.jsx)(n.h4,{id:"iceberg-sink-connector-configuration-for-kafka-connect",children:"Iceberg sink connector configuration for Kafka Connect"}),"\n",(0,c.jsx)(n.p,{children:"Sample configuration for setting up Iceberg Sink Connector using Kafka\nConnect."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{\n    "connector.class": "io.tabular.iceberg.connect.IcebergSinkConnector",\n    "tasks.max": "6",\n    "topics": "pizzas",\n    "iceberg.tables": "rpc.pizzas",\n    "iceberg.catalog": "demo",\n    "iceberg.catalog.type": "rest",\n    "iceberg.catalog.uri": "http://iceberg-rest:8181",\n    "iceberg.catalog.client.region": "us-east-1",\n    "iceberg.catalog.s3.endpoint": "http://minio:9000",\n    "iceberg.catalog.s3.path-style-access": "true",\n    "iceberg.tables.auto-create-enabled": "true",\n    "iceberg.tables.evolve-schema-enabled": "true",\n    "iceberg.control.commit.interval-ms": 30000,\n    "iceberg.tables.cdc-field": "op",\n    "iceberg.tables.default-id-columns": "order_number",\n    "iceberg.tables.upsert-mode-enabled": "true",\n    "key.converter.schema.registry.url": "http://registry:8081",\n    "key.converter": "io.confluent.connect.avro.AvroConverter",\n    "key.converter.schemas.enable": "true",\n    "value.converter.schema.registry.url": "http://registry:8081",\n    "value.converter": "io.confluent.connect.avro.AvroConverter",\n    "value.converter.schemas.enable": "true"\n}\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Ensure that ",(0,c.jsx)(n.code,{children:"iceberg.tables.default-id-columns"})," is consistent with the index\ndefinition in Feldera."]}),"\n",(0,c.jsx)(n.li,{children:"Ensure that the Iceberg table is accessible from Kafka Connect."}),"\n",(0,c.jsxs)(n.li,{children:["Ensure that ",(0,c.jsx)(n.code,{children:"iceberg.tables.auto-create-enabled"})," is set to ",(0,c.jsx)(n.code,{children:"true"})," if the\ntable doesn't already exist."]}),"\n",(0,c.jsxs)(n.li,{children:["Ensure that ",(0,c.jsx)(n.code,{children:"iceberg.tables.evolve-schema-enabled"})," is set to ",(0,c.jsx)(n.code,{children:"true"})," if you\nwant to dynamically update the Iceberg table schema to match the SQL view\ndeclaration."]}),"\n",(0,c.jsxs)(n.li,{children:["Ensure that ",(0,c.jsx)(n.code,{children:"iceberg.tables.cdc-field"})," is set to the same value as ",(0,c.jsx)(n.code,{children:"cdc_field"}),"\nin the output connector configuration in Feldera."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const c={},i=r.createContext(c);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);