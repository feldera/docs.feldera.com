"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[391],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(96540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},55841:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"connectors/sinks/redis","title":"Redis output connector","description":"Redis support is an experimental feature of Feldera.","source":"@site/docs/connectors/sinks/redis.md","sourceDirName":"connectors/sinks","slug":"/connectors/sinks/redis","permalink":"/connectors/sinks/redis","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Confluent JDBC Connector","permalink":"/connectors/sinks/confluent-jdbc"},"next":{"title":"PostgreSQL","permalink":"/connectors/sinks/postgresql"}}');var t=s(74848),o=s(28453);const i={},c="Redis output connector",l={},a=[{value:"Configuration",id:"configuration",level:2},{value:"Required Transport Parameters",id:"required-transport-parameters",level:3},{value:"Optional Transport Parameters",id:"optional-transport-parameters",level:3},{value:"Format parameters",id:"format-parameters",level:3},{value:"Example",id:"example",level:2},{value:"Key",id:"key",level:3}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"redis-output-connector",children:"Redis output connector"})}),"\n",(0,t.jsx)(n.admonition,{title:"Experimental feature",type:"caution",children:(0,t.jsx)(n.p,{children:"Redis support is an experimental feature of Feldera."})}),"\n",(0,t.jsx)(n.p,{children:"Feldera allows you to output data from a SQL view to Redis."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The user configures the Redis connector with a subset of columns that serve as a unique key for the view."}),"\n",(0,t.jsx)(n.li,{children:"The connector stores each row from the view in Redis, using the specified columns as the Redis key."}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["You must ensure that the selected columns form a ",(0,t.jsx)(n.strong,{children:"unique key"}),". Using a non-unique key can lead to ",(0,t.jsx)(n.strong,{children:"data loss"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"required-transport-parameters",children:"Required Transport Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connection_string"})," - Redis connection string.\nThe connection string follows the following format:\n",(0,t.jsx)(n.code,{children:"redis://[<username>][:<password>@]<hostname>[:port][/[<db>][?protocol=<protocol>]]"}),"\nThis is parsed by the ",(0,t.jsx)(n.code,{children:"redis"})," crate\n(See docs: ",(0,t.jsx)(n.a,{href:"https://docs.rs/redis/latest/redis/#connection-parameters",children:"Connection Parameters"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"optional-transport-parameters",children:"Optional Transport Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key_separator"})," - Separator used to join multiple components into a single key.\n",(0,t.jsx)(n.code,{children:":"})," by default."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"format-parameters",children:"Format parameters"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Currently, only the ",(0,t.jsx)(n.code,{children:"json"})," format is supported."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key_fields"})," - A ",(0,t.jsx)(n.strong,{children:"list"})," of columns used to form the ",(0,t.jsx)(n.code,{children:"key"})," used in Redis."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["Consider a Feldera pipeline with table ",(0,t.jsx)(n.code,{children:"t0"})," and view ",(0,t.jsx)(n.code,{children:"v0"})," as defined\nbelow."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'create table t0 (c0 int, c1 int, c2 varchar);\n\ncreate materialized view v0 with (\n\'connectors\' = \'[\n  {\n    "transport": {\n      "name": "redis_output",\n      "config": {\n        "connection_string": "redis://127.0.0.1:6379/0",\n        "key_separator": ":"\n      }\n    },\n    "format": {\n        "name": "json",\n        "config": {\n          "key_fields": ["c0","c2"]\n        }\n    }\n  }\n]\'\n) as select * from t0;\n'})}),"\n",(0,t.jsx)(n.p,{children:"We populate this table with an ad-hoc query as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"INSERT INTO t0 VALUES (1, 1, 'first')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The view ",(0,t.jsx)(n.code,{children:"v0"})," will select this row from the table ",(0,t.jsx)(n.code,{children:"t0"}),". This will be pushed to\nredis as follows:"]}),"\n",(0,t.jsxs)(n.p,{children:["Key: ",(0,t.jsx)(n.code,{children:"1:first"}),"\nValue: ",(0,t.jsx)(n.code,{children:'"{\\"c0\\":1,\\"c1\\":1,\\"c2\\":\\"first\\"}\\n"'})]}),"\n",(0,t.jsx)(n.h3,{id:"key",children:"Key"}),"\n",(0,t.jsxs)(n.p,{children:["The key is formed by combining the values of the columns specified in the\nconnector definition via ",(0,t.jsx)(n.code,{children:"key_fields"}),". You may specify a separator used to\nform this key by defining the ",(0,t.jsx)(n.code,{children:"key_separator"})," field in the connector definition."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"config": {\n  "key_fields": ["c0", "c1"],\n  "key_separator": ":"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The key will be as follows: ",(0,t.jsx)(n.code,{children:"c0:c1"})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);