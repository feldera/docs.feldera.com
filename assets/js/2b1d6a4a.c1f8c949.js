"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[5310],{14795:(e,n,t)=>{t.d(n,{A:()=>v});t(96540);var s=t(34164),i=t(26972),r=t(28774),a=t(53465),c=t(16654),o=t(21312),l=t(51107);const d={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var u=t(74848);function p({className:e,href:n,children:t}){return(0,u.jsx)(r.A,{href:n,className:(0,s.A)("card padding--lg",d.cardContainer,e),children:t})}function h({className:e,href:n,icon:t,title:i,description:r}){return(0,u.jsxs)(p,{href:n,className:e,children:[(0,u.jsxs)(l.A,{as:"h2",className:(0,s.A)("text--truncate",d.cardTitle),title:i,children:[t," ",i]}),r&&(0,u.jsx)("p",{className:(0,s.A)("text--truncate",d.cardDescription),title:r,children:r})]})}function m({item:e}){const n=(0,i.Nr)(e),t=function(){const{selectMessage:e}=(0,a.W)();return n=>e(n,(0,o.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n}))}();return n?(0,u.jsx)(h,{className:e.className,href:n,icon:"\ud83d\uddc3\ufe0f",title:e.label,description:e.description??t(e.items.length)}):null}function f({item:e}){const n=(0,c.A)(e.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",t=(0,i.cC)(e.docId??void 0);return(0,u.jsx)(h,{className:e.className,href:e.href,icon:n,title:e.label,description:e.description??t?.description})}function x({item:e}){switch(e.type){case"link":return(0,u.jsx)(f,{item:e});case"category":return(0,u.jsx)(m,{item:e});default:throw new Error(`unknown item type ${JSON.stringify(e)}`)}}const g={docCardListItem:"docCardListItem_W1sv"};function j({className:e}){const n=(0,i.a4)();return(0,u.jsx)(v,{items:n,className:e})}function b({item:e}){return(0,u.jsx)("article",{className:(0,s.A)(g.docCardListItem,"col col--6"),children:(0,u.jsx)(x,{item:e})})}function v(e){const{items:n,className:t}=e;if(!n)return(0,u.jsx)(j,{...e});const r=(0,i.d1)(n);return(0,u.jsx)("section",{className:(0,s.A)("row",t),children:r.map(((e,n)=>(0,u.jsx)(b,{item:e},n)))})}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},38160:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"pipelines/index","title":"Pipelines","description":"Feldera expresses incremental computations via Pipelines. A Pipeline is defined using SQL tables and views. Pipelines receive input data","source":"@site/docs/pipelines/index.mdx","sourceDirName":"pipelines","slug":"/pipelines/","permalink":"/pipelines/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Command line tool (fda)","permalink":"/interface/cli"},"next":{"title":"Feldera SQL","permalink":"/sql/"}}');var i=t(74848),r=t(28453),a=t(14795);const c={},o="Pipelines",l={},d=[{value:"Pipeline architecture",id:"pipeline-architecture",level:2},{value:"Connectors",id:"connectors",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pipelines",children:"Pipelines"})}),"\n",(0,i.jsxs)(n.p,{children:["Feldera expresses incremental computations via ",(0,i.jsx)(n.code,{children:"Pipelines"}),". A ",(0,i.jsx)(n.code,{children:"Pipeline"})," is defined using SQL tables and views. Pipelines receive input data\nthrough input connectors. Pipelines can send the results computed by views to destinations via output connectors."]}),"\n",(0,i.jsx)(n.h2,{id:"pipeline-architecture",children:"Pipeline architecture"}),"\n",(0,i.jsx)(n.p,{children:"The diagram below illustrates the internal architecture of a Feldera pipeline:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Architecture of a Feldera Pipeline",src:t(54692).A+"",width:"2028",height:"514"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Input connectors"})," ingest data from external sources such as message queues, databases, and data lakehouses.  A pipeline can have multiple\ninput connectors of different types, including several connectors feeding the same table.  An input connector buffers data in its\ninternal queue until the SQL engine is ready to accept more inputs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Incremental SQL engine"}),". The Feldera SQL engine ingests buffered input data as changes to internal SQL tables. It performs\n",(0,i.jsx)(n.strong,{children:"Incremental View Maintenance (IVM)"}),", efficiently computing updates to SQL views based on input changes."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Output connectors"})," send changes to external data sinks. Like input connectors, a pipeline can have any number of\noutput connectors of different types and there can be multiple output connectors attached to the same table.  Output data is buffered\nin an internal queue until the connector is ready to send it downstream."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"connectors",children:"Connectors"}),"\n",(0,i.jsx)(n.p,{children:"A connector is a combination of two things: a transport and often a format. The transport describes where the input data comes from or output data is sent to (e.g., Kafka,\nS3, PubSub and so on). The format defines the shape or envelope of the data (e.g., JSON, CSV, Parquet and more). Typically, the format has to be compatible\nwith the schema of the tables and views."}),"\n",(0,i.jsx)(n.p,{children:"Read the references below to learn more about SQL pipeline features."}),"\n","\n",(0,i.jsx)(a.A,{})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},53465:(e,n,t)=>{t.d(n,{W:()=>l});var s=t(96540),i=t(44586);const r=["zero","one","two","few","many","other"];function a(e){return r.filter((n=>e.includes(n)))}const c={locale:"en",pluralForms:a(["one","other"]),select:e=>1===e?"one":"other"};function o(){const{i18n:{currentLocale:e}}=(0,i.A)();return(0,s.useMemo)((()=>{try{return function(e){const n=new Intl.PluralRules(e);return{locale:e,pluralForms:a(n.resolvedOptions().pluralCategories),select:e=>n.select(e)}}(e)}catch(n){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${n.message}\n`),c}}),[e])}function l(){const e=o();return{selectMessage:(n,t)=>function(e,n,t){const s=e.split("|");if(1===s.length)return s[0];s.length>t.pluralForms.length&&console.error(`For locale=${t.locale}, a maximum of ${t.pluralForms.length} plural forms are expected (${t.pluralForms.join(",")}), but the message contains ${s.length}: ${e}`);const i=t.select(n),r=t.pluralForms.indexOf(i);return s[Math.min(r,s.length-1)]}(t,n,e)}}},54692:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/pipeline_architecture-6c211495a6dd45115b6d5fdf7ed79679.png"}}]);