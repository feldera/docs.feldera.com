"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[3105],{28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>c});var t=r(96540);const s={},i=t.createContext(s);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(i.Provider,{value:n},e.children)}},46709:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"connectors/sources/postgresql","title":"PostgreSQL input connector","description":"This page describes configuration options specific to the PostgreSQL connector.","source":"@site/docs/connectors/sources/postgresql.md","sourceDirName":"connectors/sources","slug":"/connectors/sources/postgresql","permalink":"/connectors/sources/postgresql","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Debezium","permalink":"/connectors/sources/debezium"},"next":{"title":"AWS S3","permalink":"/connectors/sources/s3"}}');var s=r(74848),i=r(28453);const d={},c="PostgreSQL input connector",o={},a=[{value:"PostgreSQL input connector configuration",id:"postgresql-input-connector-configuration",level:2},{value:"Data type mapping",id:"data-type-mapping",level:2},{value:"A simple example",id:"a-simple-example",level:2},{value:"An example for every type",id:"an-example-for-every-type",level:2},{value:"Connecting with TLS/SSL",id:"connecting-with-tlsssl",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"postgresql-input-connector",children:"PostgreSQL input connector"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This page describes configuration options specific to the PostgreSQL connector.\nSee ",(0,s.jsx)(n.a,{href:"/connectors/",children:"top-level connector documentation"})," for general information\nabout configuring input and output connectors."]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://postgresql.org/",children:"PostgreSQL"})," is an open-source SQL database.\nWe support loading PostgreSQL data into Feldera using a custom connector that\nallows to execute SQL queries against a PostgreSQL database and stream the\nresults into Feldera. The connector is based on the ",(0,s.jsx)(n.a,{href:"https://docs.rs/tokio-postgres/",children:"tokio-postgres"})," Rust library."]}),"\n",(0,s.jsx)(n.p,{children:"The PostgreSQL connector does not yet support fault tolerance."}),"\n",(0,s.jsx)(n.h2,{id:"postgresql-input-connector-configuration",children:"PostgreSQL input connector configuration"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"uri"}),"*"]}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:['A PostgreSQL connection URL, e.g., "postgresql://postgres:1234@127.0.0.1:7373/postgres" (see the tokio-postgres ',(0,s.jsx)(n.a,{href:"https://docs.rs/tokio-postgres/0.7.12/tokio_postgres/config/struct.Config.html",children:"Config"})," struct for a detailed list of options)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"query"}),"*"]}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{}),(0,s.jsxs)(n.td,{children:['A PostgreSQL query which returns a list of rows to be ingested, e.g., "select a, b from table where a = 1 limit 100;" (check the ',(0,s.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/sql-select.html",children:"SELECT"})," documentation in PostgreSQL for the syntax)"]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"[*]: Required fields"}),"\n",(0,s.jsx)(n.h2,{id:"data-type-mapping",children:"Data type mapping"}),"\n",(0,s.jsxs)(n.p,{children:["We currently serialize PostgreSQL records to JSON before sending them to Feldera. This means that the ingestion rules are\ndictated by the deserialization rules of the ",(0,s.jsx)(n.a,{href:"/formats/json",children:"JSON format"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The following table lists supported PostgreSQL data types and the corresponding Feldera type where a conversion is guaranteed to work.\nMore complex types from PostgreSQL might work but are not yet officially supported and tested.\nPlease ",(0,s.jsx)(n.a,{href:"https://github.com/feldera/feldera/issues",children:"let us know"})," if you need support for a specific type."]})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"PostgreSQL type"}),(0,s.jsx)(n.th,{children:"Feldera SQL type"}),(0,s.jsx)(n.th,{children:"Comment"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BOOL"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BOOLEAN"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BYTEA"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BYTEA"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CHAR"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CHAR"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"VARCHAR"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"VARCHAR"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BPCHAR"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"STRING"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"NAME"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"STRING"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DATE"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DATE"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TIME"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TIME"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TIMESTAMP"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TIMESTAMP"})}),(0,s.jsx)(n.td,{children:"Feldera currently does not support timestamps with time zones."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INT2"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INT2"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INT4"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INT4"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INT8"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INT8"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FLOAT4"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FLOAT4"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FLOAT8"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FLOAT8"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TEXT"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TEXT"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"UUID"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"UUID"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"JSON"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"VARIANT"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"NUMERIC(P,S)"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DECIMAL(P,S)"})}),(0,s.jsxs)(n.td,{children:["The largest supported precision ",(0,s.jsx)(n.code,{children:"P"})," is 28 and scale ",(0,s.jsx)(n.code,{children:"S"})," is 10."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"T[]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"T ARRAY"})}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"a-simple-example",children:"A simple example"}),"\n",(0,s.jsxs)(n.p,{children:["We first connect to a PostgreSQL database running on ",(0,s.jsx)(n.code,{children:"127.0.0.1:7373"})," with the username ",(0,s.jsx)(n.code,{children:"postgres"})," and password ",(0,s.jsx)(n.code,{children:"1234"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"psql postgresql://postgres:1234@127.0.0.1:7373/postgres\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Next we create a table ",(0,s.jsx)(n.code,{children:"people"})," with columns ",(0,s.jsx)(n.code,{children:"id"}),", ",(0,s.jsx)(n.code,{children:"name"}),", and ",(0,s.jsx)(n.code,{children:"age"})," by pasting the following SQL in ",(0,s.jsx)(n.code,{children:"psql"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"create table people (\n    id varchar(36),\n    name varchar(36),\n    age bigint\n);\n\ninsert into people (id, name, age)\nvalues\n    ('11111111-1111-1111-1111-111111111111', 'Alice', 30),\n    ('22222222-2222-2222-2222-222222222222', 'Bob', 25),\n    ('33333333-3333-3333-3333-333333333333', 'Charlie', 40);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can load this table from PostgreSQL into Feldera using the ",(0,s.jsx)(n.code,{children:"postgres_input"})," connector:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'create table people (\n    id varchar(36),\n    name varchar(36),\n    the_age bigint,\n    extra bigint not null\n) WITH (\n    \'materialized\' = \'true\',\n    \'connectors\' = \'[{\n    "transport": {\n      "name": "postgres_input",\n      "config": {\n        "uri": "postgresql://postgres:1234@127.0.0.1:7373/postgres",\n        "query": "select id, name, age as the_age, 1 as extra from people;"\n      }\n    }\n  }]\'\n);\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Column names need to match the source table in feldera, hence the ",(0,s.jsx)(n.code,{children:"age"})," column in the ",(0,s.jsx)(n.code,{children:"people"})," table is renamed to ",(0,s.jsx)(n.code,{children:"the_age"})," in the PostgreSQL query."]}),"\n",(0,s.jsxs)(n.li,{children:["The feldera table contains an ",(0,s.jsx)(n.code,{children:"extra"})," non-nullable column. Failing to provide a value for this column in the query will result in an ingest error. We use ",(0,s.jsx)(n.code,{children:"1"})," as a placeholder value in the PostgreSQL query."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"an-example-for-every-type",children:"An example for every type"}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of a table with every supported PostgreSQL type.\nYou can create this table and insert a record in PostgreSQL by pasting the following SQL in ",(0,s.jsx)(n.code,{children:"psql"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE all_types_example (\n    my_bool              BOOL,\n    my_bool_array        BOOL[],\n    my_bytea             BYTEA,\n    my_bytea_array       BYTEA[],\n    my_char              CHAR,\n    my_char_array        CHAR[],\n    my_varchar           VARCHAR(50),\n    my_varchar_array     VARCHAR(50)[],\n    my_name              NAME,\n    my_name_array        NAME[],\n    my_date              DATE,\n    my_date_array        DATE[],\n    my_time              TIME,\n    my_time_array        TIME[],\n    my_timestamp         TIMESTAMP,\n    my_timestamp_array   TIMESTAMP[],\n    my_int2              INT2,\n    my_int2_array        INT2[],\n    my_int4              INT4,\n    my_int4_array        INT4[],\n    my_int8              INT8,\n    my_int8_array        INT8[],\n    my_float4            FLOAT4,\n    my_float4_array      FLOAT4[],\n    my_float8            FLOAT8,\n    my_float8_array      FLOAT8[],\n    my_text              TEXT,\n    my_text_array        TEXT[],\n    my_uuid              UUID,\n    my_uuid_array        UUID[],\n    my_json              JSON,\n    my_decimal           DECIMAL(28, 2),\n    my_decimal_array     DECIMAL(28, 2)[]\n);\n\nINSERT INTO all_types_example (\n    my_bool,\n    my_bool_array,\n    my_bytea,\n    my_bytea_array,\n    my_char,\n    my_char_array,\n    my_varchar,\n    my_varchar_array,\n    my_name,\n    my_name_array,\n    my_date,\n    my_date_array,\n    my_time,\n    my_time_array,\n    my_timestamp,\n    my_timestamp_array,\n    my_int2,\n    my_int2_array,\n    my_int4,\n    my_int4_array,\n    my_int8,\n    my_int8_array,\n    my_float4,\n    my_float4_array,\n    my_float8,\n    my_float8_array,\n    my_text,\n    my_text_array,\n    my_uuid,\n    my_uuid_array,\n    my_json,\n    my_decimal,\n    my_decimal_array\n)\nVALUES (\n    -- BOOL, BOOL[]\n    TRUE,\n    '{TRUE, FALSE, TRUE}',\n\n    -- BYTEA, BYTEA[]\n    E'\\\\xDEADBEEF',\n    '{\"\\\\\\\\xABCD\",\"\\\\\\\\x1234\"}',\n\n    -- CHAR, CHAR[]\n    'A',\n    '{\"B\",\"C\"}',\n\n    -- VARCHAR(50), VARCHAR(50)[]\n    'Hello, World!',\n    '{\"Hello\",\"Array\"}',\n\n    -- NAME, NAME[]\n    'SomeStringValue',\n    '{\"StringValue1\",\"StringValue2\"}',\n\n    -- DATE, DATE[]\n    '2025-01-31',\n    '{\"2025-01-01\",\"2025-12-31\"}',\n\n    -- TIME, TIME[]\n    '12:34:56',\n    '{\"01:02:03\",\"23:59:59\"}',\n\n    -- TIMESTAMP, TIMESTAMP[]\n    '2025-01-31 12:34:56',\n    '{\"2025-01-31 00:00:00\",\"2025-12-31 23:59:59\"}',\n\n    -- INT2, INT2[]\n    12,\n    '{1,2,3}',\n\n    -- INT4, INT4[]\n    1234,\n    '{10,20,30}',\n\n    -- INT8, INT8[]\n    1234567890123,\n    '{999999999999,888888888888}',\n\n    -- FLOAT4, FLOAT4[]\n    3.14,\n    '{1.1,2.2,3.3}',\n\n    -- FLOAT8, FLOAT8[]\n    2.718281828,\n    '{123.456,789.012}',\n\n    -- TEXT, TEXT[]\n    'This is some text.',\n    '{\"Text one\",\"Text two\"}',\n\n    -- UUID, UUID[]\n    '123e4567-e89b-12d3-a456-426614174000',\n    '{\"123e4567-e89b-12d3-a456-426614174001\",\"123e4567-e89b-12d3-a456-426614174002\"}',\n\n    -- JSON, JSON[]\n    '{\"key\":\"value\"}',\n\n    -- DECIMAL(28,2), DECIMAL(28,2)[]\n    12345.67,\n    '{123.45,6789.01}'\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can load this from PostgreSQL into Feldera using the following table definition and ",(0,s.jsx)(n.code,{children:"postgres_input"})," connector:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE all_types_example (\n    my_bool              BOOL,\n    my_bool_array        BOOL ARRAY,\n    my_bytea             BYTEA,\n    my_bytea_array       BYTEA ARRAY,\n    my_char              CHAR,\n    my_char_array        CHAR ARRAY,\n    my_varchar           VARCHAR(50),\n    my_varchar_array     VARCHAR(50) ARRAY,\n    my_name              STRING,\n    my_name_array        STRING ARRAY,\n    my_date              DATE,\n    my_date_array        DATE ARRAY,\n    my_time              TIME,\n    my_time_array        TIME ARRAY,\n    my_timestamp         TIMESTAMP,\n    my_timestamp_array   TIMESTAMP ARRAY,\n    my_int2              INT2,\n    my_int2_array        INT2 ARRAY,\n    my_int4              INT4,\n    my_int4_array        INT4 ARRAY,\n    my_int8              INT8,\n    my_int8_array        INT8 ARRAY,\n    my_float4            FLOAT4,\n    my_float4_array      FLOAT4 ARRAY,\n    my_float8            FLOAT8,\n    my_float8_array      FLOAT8 ARRAY,\n    my_text              TEXT,\n    my_text_array        TEXT ARRAY,\n    my_uuid              UUID,\n    my_uuid_array        UUID ARRAY,\n    my_json              VARIANT,\n    my_decimal           DECIMAL(28, 2),\n    my_decimal_array     DECIMAL(28, 2) ARRAY\n) WITH (\n  \'materialized\' = \'true\',\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "postgres_input",\n      "config": {\n        "uri": "postgresql://postgres:1234@127.0.0.1:7373/postgres",\n        "query": "select * from all_types_example;"\n      }\n    }\n  }]\'\n);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"connecting-with-tlsssl",children:"Connecting with TLS/SSL"}),"\n",(0,s.jsx)(n.p,{children:"TBD"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);