"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[9442],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var r=s(96540);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}},94556:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"sql/aggregates","title":"Aggregate Operations","description":"Standard aggregate operations","source":"@site/docs/sql/aggregates.md","sourceDirName":"sql","slug":"/sql/aggregates","permalink":"/sql/aggregates","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Data Types","permalink":"/sql/types"},"next":{"title":"Array Operations","permalink":"/sql/array"}}');var t=s(74848),i=s(28453);const d={},a="Aggregate Operations",l={},c=[{value:"Standard aggregate operations",id:"standard-aggregate-operations",level:2},{value:"Window aggregate functions",id:"window-aggregate-functions",level:2},{value:"Pivots",id:"pivots",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"aggregate-operations",children:"Aggregate Operations"})}),"\n",(0,t.jsx)(n.h2,{id:"standard-aggregate-operations",children:"Standard aggregate operations"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"SELECT"})," expression in the ",(0,t.jsx)(n.a,{href:"/sql/grammar",children:"SQL grammar"})," can contain one\nor more aggregation functions.  Aggregate functions are specified\nusing the following grammar:"]}),"\n",(0,t.jsx)("a",{id:"filter"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"aggregateCall:\n      agg '(' [ ALL | DISTINCT ] value [, value ]* ')'\n      [ WITHIN DISTINCT '(' expression [, expression ]* ')' ]\n      [ FILTER '(' WHERE condition ')' ]\n  |   agg '(' '*' ')' [ FILTER (WHERE condition) ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["where ",(0,t.jsx)(n.code,{children:"agg"})," is one of the operators in the following table."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"FILTER"})," is present, the aggregate function only considers rows for\nwhich condition evaluates to ",(0,t.jsx)(n.code,{children:"TRUE"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"DISTINCT"})," is present, duplicate argument values are eliminated\nbefore being passed to the aggregate function."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"WITHIN DISTINCT"})," is present, argument values are made distinct\nwithin each value of specified keys before being passed to the\naggregate function."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Important"}),": the aggregate result type is the same as the type of the\nvalue aggregated.  Since an aggregate combines multiple values, this\ncan cause overflows in the computation, which can cause runtime\nexceptions.  We recommend to use explicit casts in SQL programs\nconverting the aggregated values to a data type wide enough to store\nall intermediate aggregation results.  Example:"]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of ",(0,t.jsx)(n.code,{children:"SELECT SUM(col)"}),", you should write ",(0,t.jsx)(n.code,{children:"SELECT SUM(CAST col AS DECIMAL(10, 4))"})," if you expect 10-digit results to be possible."]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Aggregate"}),(0,t.jsx)("th",{children:"Description"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"array_agg"}),(0,t.jsx)("code",{children:"ARRAY_AGG([ ALL | DISTINCT ] value [ RESPECT NULLS | IGNORE NULLS ] )"})]}),(0,t.jsx)("td",{children:"Gathers all values in an array.  The order of the values in the array is unspecified (but it is deterministic)."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"avg"}),(0,t.jsx)("code",{children:"AVG( [ ALL | DISTINCT ] numeric)"})]}),(0,t.jsx)("td",{children:"Returns the average (arithmetic mean) of numeric across all input values"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"arg_max"}),(0,t.jsx)("code",{children:"ARG_MAX(value, compared)"})]}),(0,t.jsxs)("td",{children:["Returns a ",(0,t.jsx)("code",{children:"value"})," for one of the rows containing the maximum value of ",(0,t.jsx)("code",{children:"compared"})," in the group.\nThe rule for selecting the value is not specified if there are multiple rows with the same maximum value."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"arg_min"}),(0,t.jsx)("code",{children:"ARG_MIN(value, compared)"})]}),(0,t.jsxs)("td",{children:["Returns a  ",(0,t.jsx)("code",{children:"value"})," for one of the rows containing the minimum value of ",(0,t.jsx)("code",{children:"compared"})," in the group.\nThis rule for selecting the value is not specified if there are multiple rows with the same minimum value."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"bit_and"}),(0,t.jsx)("code",{children:"BIT_AND( [ ALL | DISTINCT ] value)"})]}),(0,t.jsx)("td",{children:"Returns the bitwise AND of all non-null input values, or null if none; integer and binary types are supported"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"bit_or"}),(0,t.jsx)("code",{children:"BIT_OR( [ ALL | DISTINCT ] value)"})]}),(0,t.jsx)("td",{children:"Returns the bitwise OR of all non-null input values, or null if none; integer and binary types are supported"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"bit_xor"}),(0,t.jsx)("code",{children:"BIT_XOR( [ ALL | DISTINCT ] value)"})]}),(0,t.jsx)("td",{children:"Returns the bitwise XOR of all non-null input values, or null if none; integer and binary types are supported"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"countstar"}),(0,t.jsx)("code",{children:"COUNT(*)"})]}),(0,t.jsx)("td",{children:"Returns the number of input rows"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"count"}),(0,t.jsx)("code",{children:"COUNT( [ ALL | DISTINCT ] value [, value ]*)"})]}),(0,t.jsxs)("td",{children:["Returns the number of input rows for which value is not null.  If the argument contains multiple expressions, it counts only expressions where ",(0,t.jsx)(n.em,{children:"all"})," fields are non-null."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"countif"}),(0,t.jsx)("code",{children:"COUNTIF( boolean )"})]}),(0,t.jsx)("td",{children:"Returns the number of input rows for which the condition is true."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"every"}),(0,t.jsx)("code",{children:"EVERY(condition)"})]}),(0,t.jsxs)("td",{children:["Returns ",(0,t.jsx)("code",{children:"TRUE"})," if all of the values of condition are ",(0,t.jsx)("code",{children:"TRUE"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"logical_and"}),(0,t.jsx)("code",{children:"LOGICAL_AND"})," or ",(0,t.jsx)("code",{children:"BOOL_AND"})]}),(0,t.jsxs)("td",{children:["Same as ",(0,t.jsx)("code",{children:"EVERY"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"logical_or"}),(0,t.jsx)("code",{children:"LOGICAL_OR"})," or ",(0,t.jsx)("code",{children:"BOOL_OR"})]}),(0,t.jsxs)("td",{children:["Same as ",(0,t.jsx)("code",{children:"SOME"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"max"}),(0,t.jsx)("code",{children:"MAX( [ ALL | DISTINCT ] value)"})]}),(0,t.jsx)("td",{children:"Returns the maximum value of value across all input values"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"min"}),(0,t.jsx)("code",{children:"MIN( [ ALL | DISTINCT ] value)"})]}),(0,t.jsx)("td",{children:"Returns the minimum value of value across all input values"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"some"}),(0,t.jsx)("code",{children:"SOME(condition)"})]}),(0,t.jsxs)("td",{children:["Returns ",(0,t.jsx)("code",{children:"TRUE"})," if one or more of the values of condition is ",(0,t.jsx)("code",{children:"TRUE"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"sum"}),(0,t.jsx)("code",{children:"SUM( [ ALL | DISTINCT ] numeric)"})]}),(0,t.jsx)("td",{children:"Returns the sum of numeric across all input values"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"stddev"}),(0,t.jsx)("code",{children:"STDDEV( [ ALL | DISTINCT ] value)"})]}),(0,t.jsxs)("td",{children:["Synonym for ",(0,t.jsx)("code",{children:"STDDEV_SAMP"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"stddev_pop"}),(0,t.jsx)("code",{children:"STDDEV_POP( [ ALL | DISTINCT ] value)"})]}),(0,t.jsx)("td",{children:"Returns the population standard deviation of numeric across all input values"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"stddev_samp"}),(0,t.jsx)("code",{children:"STDDEV_SAMP( [ ALL | DISTINCT ] value)"})]}),(0,t.jsx)("td",{children:"Returns the sample standard deviation of numeric across all input values"})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Comparisons like ",(0,t.jsx)(n.code,{children:"MAX"}),", ",(0,t.jsx)(n.code,{children:"MIN"}),", ",(0,t.jsx)(n.code,{children:"ARG_MIN"}),", and ",(0,t.jsx)(n.code,{children:"ARG_MAX"})," are defined\nfor all data types, and they use the standard ",(0,t.jsx)(n.a,{href:"/sql/comparisons",children:"comparison\noperations"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"FILTER"})," is specified, then only the input rows for which the\nfilter_clause evaluates to true are fed to the aggregate function;\nother rows are discarded. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT\n    count(*) AS unfiltered,\n    count(*) FILTER (WHERE i < 5) AS filtered\nFROM TABLE\n"})}),"\n",(0,t.jsx)(n.p,{children:"In addition, the following two constructors act as aggregates:"}),"\n",(0,t.jsx)("a",{id:"array"}),"\n",(0,t.jsx)("a",{id:"map"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Constructor"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ARRAY(sub-query)"})}),(0,t.jsx)(n.td,{children:"Creates an array from the result of a sub-query. If the subquery returns a tuple, the array will be an array of tuples."}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"SELECT ARRAY(SELECT empno FROM emp)"})," or ",(0,t.jsx)(n.code,{children:"SELECT ARRAY(SELECT empno, dept FROM emp)"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"MAP(sub-query)"})}),(0,t.jsx)(n.td,{children:"Creates a map from the result of a sub-query that returns two columns. If multiple entries have the same key, the largest value wins."}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SELECT MAP(SELECT empno, deptno FROM emp)"})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"window-aggregate-functions",children:"Window aggregate functions"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"SELECT"})," expression in the ",(0,t.jsx)(n.a,{href:"/sql/grammar",children:"SQL grammar"})," can also\ncontain a ",(0,t.jsx)(n.a,{href:"/sql/grammar#window-aggregates",children:"window aggregate function"}),".\nThe following window aggregate functions are supported:"]}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Aggregate"}),(0,t.jsx)("th",{children:"Description"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"window-avg"}),"AVG(numeric)"]}),(0,t.jsx)("td",{children:"Returns the average (arithmetic mean) of numeric across all values in window"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"window-count"}),(0,t.jsx)("code",{children:"COUNT("}),"value [, value ]*",(0,t.jsx)("code",{children:")"})]}),(0,t.jsx)("td",{children:"Returns the number of rows in window for which value is not null"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"window-countstar"}),(0,t.jsx)("code",{children:"COUNT(*)"})]}),(0,t.jsx)("td",{children:"Returns the number of rows in window"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"dense_rank"}),(0,t.jsx)("code",{children:"DENSE_RANK()"})]}),(0,t.jsxs)("td",{children:["Returns the rank of the current row without gaps.  ",(0,t.jsx)(n.code,{children:"DENSE_RANK"})," is currently only supported if\nthe window is used to compute a TopK aggregate."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"lag"}),(0,t.jsx)("code",{children:"LAG("}),(0,t.jsx)("em",{children:"expression"}),", [",(0,t.jsx)("em",{children:"offset"}),", [ ",(0,t.jsx)("em",{children:"default"})," ] ]",(0,t.jsx)("code",{children:")"})]}),(0,t.jsxs)("td",{children:["Returns ",(0,t.jsx)("em",{children:"expression"})," evaluated at the row that is ",(0,t.jsx)("em",{children:"offset"})," rows before the current row\nwithin the partition; if there is no such row, instead returns ",(0,t.jsx)("em",{children:"default"}),".\nBoth ",(0,t.jsx)("em",{children:"offset"})," and ",(0,t.jsx)("em",{children:"default"})," are evaluated with respect to the current row.\nIf omitted, ",(0,t.jsx)("em",{children:"offset"})," defaults to 1 and ",(0,t.jsx)("em",{children:"default"})," to ",(0,t.jsx)("code",{children:"NULL"}),"."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"lead"}),(0,t.jsx)("code",{children:"LEAD("}),(0,t.jsx)("em",{children:"expression"}),", [",(0,t.jsx)("em",{children:"offset"}),", [ ",(0,t.jsx)("em",{children:"default"})," ] ]",(0,t.jsx)("code",{children:")"})]}),(0,t.jsxs)("td",{children:["Returns ",(0,t.jsx)("em",{children:"expression"})," evaluated at the row that is ",(0,t.jsx)("em",{children:"offset"})," rows after the current row\nwithin the partition; if there is no such row, instead returns ",(0,t.jsx)("em",{children:"default"}),".\nBoth ",(0,t.jsx)("em",{children:"offset"})," and ",(0,t.jsx)("em",{children:"default"})," are evaluated with respect to the current row.\nIf omitted, ",(0,t.jsx)("em",{children:"offset"})," defaults to 1 and ",(0,t.jsx)("em",{children:"default"})," to ",(0,t.jsx)("code",{children:"NULL"}),"."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"window-max"}),(0,t.jsx)("code",{children:"MAX"}),"(",(0,t.jsx)("em",{children:"expression"}),")"]}),(0,t.jsxs)("td",{children:["Returns the maximum value of ",(0,t.jsx)("em",{children:"expression"})," across all values in window"]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"window-min"}),(0,t.jsx)("code",{children:"MIN"}),"(",(0,t.jsx)("em",{children:"expression"}),")"]}),(0,t.jsxs)("td",{children:["Returns the minimum value of ",(0,t.jsx)("em",{children:"expression"})," across all values in window"]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"rank"}),(0,t.jsx)("code",{children:"RANK()"})]}),(0,t.jsxs)("td",{children:["Returns the rank of the current row with gaps.  ",(0,t.jsx)(n.code,{children:"DENSE_RANK"})," is currently only supported if\nthe window is used to compute a TopK aggregate."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"row_number"}),(0,t.jsx)("code",{children:"ROW_NUMBER()"})]}),(0,t.jsxs)("td",{children:["Returns the number of the current row within its partition, counting from 1.\n",(0,t.jsx)(n.code,{children:"ROW_NUMBER"})," is currently only supported if the window is used to compute a TopK aggregate."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{children:[(0,t.jsx)("a",{id:"window-sum"}),(0,t.jsx)("code",{children:"SUM"}),"(",(0,t.jsx)("em",{children:"numeric"}),")"]}),(0,t.jsxs)("td",{children:["Returns the sum of ",(0,t.jsx)("em",{children:"numeric"})," across all values in window"]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Currently, the window aggregate functions ",(0,t.jsx)(n.code,{children:"RANK"}),", ",(0,t.jsx)(n.code,{children:"DENSE_RANK"})," and\n",(0,t.jsx)(n.code,{children:"ROW_NUMBER"})," are only supported if the compiler detects that they are\nbeing used to implement a TopK pattern.  This pattern is expressed in\nSQL with the following structure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM (\n   SELECT empno,\n          row_number() OVER (ORDER BY empno) rn\n   FROM empsalary) emp\nWHERE rn < 3\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pivots",children:"Pivots"}),"\n",(0,t.jsxs)(n.p,{children:["The SQL ",(0,t.jsx)(n.code,{children:"PIVOT"})," operation can be used to turn rows into columns.  It\nusually replaces a ",(0,t.jsx)(n.code,{children:"GROUP-BY"})," operation when the group keys are known\nin advance.  Instead of producing one row for each group, ",(0,t.jsx)(n.code,{children:"PIVOT"})," can\nproduce one ",(0,t.jsx)(n.em,{children:"column"})," for each group."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"PIVOT ( { aggregate_expression [ AS aggregate_expression_alias ] } [ , ... ]\n    FOR column_with_data IN ( column_list ) )\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["aggregate_expression\nSpecifies an aggregate expression (",(0,t.jsx)(n.code,{children:"SUM"}),", ",(0,t.jsx)(n.code,{children:"COUNT(DISTINCT )"}),", etc.)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"aggregate_expression_alias\nSpecifies a column name for the aggregate expression."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"column_with_data\nA column that produces all the values that will become new\ncolumn names."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"column_list\nColumns that show the pivoted data."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE FURNITURE (\n   type VARCHAR,\n   year INTEGER,\n   count INTEGER\n);\nINSERT INTO FURNITURE VALUES\n  ('chair', 2020, 4),\n  ('table', 2021, 3),\n  ('chair', 2021, 4),\n  ('desk', 2023, 1),\n  ('table', 2023, 2);\n\nSELECT year, type, SUM(count) FROM FURNITURE GROUP BY year,type;\nyear | type  | sum\n-------------------\n2020 | chair | 4\n2021 | table | 3\n2021 | chair | 4\n2023 | desk  | 1\n2023 | table | 2\n(5 rows)\n\nSELECT * FROM FURNITURE\nPIVOT (\n    SUM(count) AS ct\n    FOR type IN ('desk' AS desks, 'table' AS tables, 'chair' as chairs)\n);\n\nyear | desks | tables | chairs\n------------------------------\n2020 |       |        |    4\n2021 |       |     3  |    4\n2023 |     1 |     2  |\n(3 rows)\n"})}),"\n",(0,t.jsxs)(n.p,{children:['Notice how the same information is presented in a tabular form where\nwe have a column for each type of object.  PIVOTs require all the\npossible "type"s to be specified when the query is written.  Notice\nthat if we add an additional type, the ',(0,t.jsx)(n.code,{children:"GROUP BY"})," query will produce a\ncorrect result, while the ",(0,t.jsx)(n.code,{children:"PIVOT"})," query will produce the same result."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"INSERT INTO FURNITURE VALUES ('bed', 2020, 5);\nSELECT year, type, SUM(count) FROM FURNITURE GROUP BY year,type;\nyear | type  | sum\n-------------------\n2020 | chair | 4\n2020 | bed   | 5\n2021 | table | 3\n2021 | chair | 4\n2023 | desk  | 1\n2023 | table | 2\n(6 rows)\n\nSELECT * FROM FURNITURE\nPIVOT (\n    SUM(count) AS ct\n    FOR type IN ('desk' AS desks, 'table' AS tables, 'chair' as chairs)\n);\n\nyear | desks | tables | chairs\n------------------------------\n2020 |       |        |    4\n2021 |       |     3  |    4\n2023 |     1 |     2  |\n(3 rows)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);