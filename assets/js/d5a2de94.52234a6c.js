"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[4009],{28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>l});var d=r(96540);const n={},t=d.createContext(n);function i(e){const s=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),d.createElement(t.Provider,{value:s},e.children)}},86940:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"sql/comparisons","title":"Comparison Operations","description":"The following operations can take operands with multiple data types","source":"@site/docs/sql/comparisons.md","sourceDirName":"sql","slug":"/sql/comparisons","permalink":"/sql/comparisons","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Casts and Data Type Conversions","permalink":"/sql/casts"},"next":{"title":"Date- and Time-Related Operations","permalink":"/sql/datetime"}}');var n=r(74848),t=r(28453);const i={},l="Comparison Operations",c={},o=[];function a(e){const s={code:"code",h1:"h1",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"comparison-operations",children:"Comparison Operations"})}),"\n",(0,n.jsx)(s.p,{children:"The following operations can take operands with multiple data types\nbut always return a Boolean value (sometimes nullable):"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("caption",{children:"Comparison Operations"}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Operation"}),(0,n.jsx)("th",{children:"Definition"}),(0,n.jsx)("th",{children:"Observation"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"eq"}),(0,n.jsx)("code",{children:"="})]}),(0,n.jsx)("td",{children:"equality test"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"ne"}),(0,n.jsx)("code",{children:"<>"})]}),(0,n.jsx)("td",{children:"inequality test"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"ne"}),(0,n.jsx)("code",{children:"!="})]}),(0,n.jsx)("td",{children:"inequality test, same as above"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"gt"}),(0,n.jsx)("code",{children:">"})]}),(0,n.jsx)("td",{children:"greater than"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"lt"}),(0,n.jsx)("code",{children:"<"})]}),(0,n.jsx)("td",{children:"less than"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"gte"}),(0,n.jsx)("code",{children:">="})]}),(0,n.jsx)("td",{children:"greater or equal"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"lte"}),(0,n.jsx)("code",{children:"<="})]}),(0,n.jsx)("td",{children:"less or equal"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"isnull"}),(0,n.jsx)("code",{children:"IS NULL"})]}),(0,n.jsxs)("td",{children:["true if operand is ",(0,n.jsx)("code",{children:"NULL"})]}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"isnotnull"}),(0,n.jsx)("code",{children:"IS NOT NULL"})]}),(0,n.jsxs)("td",{children:["true if operand is not ",(0,n.jsx)("code",{children:"NULL"})]}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"nne"}),(0,n.jsx)("code",{children:"<=>"})]}),(0,n.jsxs)("td",{children:["equality check that treats ",(0,n.jsx)("code",{children:"NULL"})," values as equal"]}),(0,n.jsx)("td",{children:"result is not nullable"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"distinct"}),(0,n.jsx)("code",{children:"IS DISTINCT FROM"})]}),(0,n.jsxs)("td",{children:["check if two values are not equal, treating ",(0,n.jsx)("code",{children:"NULL"})," as equal"]}),(0,n.jsx)("td",{children:"result is not nullable"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"notdistinct"}),(0,n.jsx)("code",{children:"IS NOT DISTINCT FROM"})]}),(0,n.jsxs)("td",{children:["check if two values are the same, treating ",(0,n.jsx)("code",{children:"NULL"})," values as equal"]}),(0,n.jsx)("td",{children:"result is not nullable"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"between"}),(0,n.jsx)("code",{children:"BETWEEN ... AND ..."})]}),(0,n.jsxs)("td",{children:[(0,n.jsx)("code",{children:"x BETWEEN a AND b"})," is the same as ",(0,n.jsx)("code",{children:"a <= x AND x <= b"})]}),(0,n.jsx)("td",{children:"inclusive at both endpoints"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"notbetween"}),(0,n.jsx)("code",{children:"NOT BETWEEN ... AND ..."})]}),(0,n.jsxs)("td",{children:["The ",(0,n.jsx)("code",{children:"NOT"})," of the previous operator"]}),(0,n.jsx)("td",{children:"not inclusive at either endpoint"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"in"}),(0,n.jsx)("code",{children:"... [NOT] IN ..."})]}),(0,n.jsx)("td",{children:"checks whether value appears/does not appear in a list or set"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"exists"}),(0,n.jsx)("code",{children:"EXISTS query"})]}),(0,n.jsx)("td",{children:"check whether query results have at least one row"}),(0,n.jsx)("td",{})]})]}),"\n",(0,n.jsxs)(s.p,{children:["Note that the SQL standard mandates ",(0,n.jsx)(s.code,{children:"IS NULL"})," to return ",(0,n.jsx)(s.code,{children:"true"})," for a\n",(0,n.jsx)(s.code,{children:"ROW"})," object where all fields are ",(0,n.jsx)(s.code,{children:"NULL"})," (similarly, ",(0,n.jsx)(s.code,{children:"IS NOT NULL"})," is\nrequired to return ",(0,n.jsx)(s.code,{children:"false"}),").  Our compiler diverges from the standard,\nreturning ",(0,n.jsx)(s.code,{children:"false"})," for ",(0,n.jsx)(s.code,{children:"ROW(null) is null"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Comparison operations (",(0,n.jsx)(s.code,{children:"="}),", ",(0,n.jsx)(s.code,{children:"<>"}),", ",(0,n.jsx)(s.code,{children:"!="}),", ",(0,n.jsx)(s.code,{children:"<"}),", ",(0,n.jsx)(s.code,{children:">"}),", ",(0,n.jsx)(s.code,{children:"<="}),", ",(0,n.jsx)(s.code,{children:">="}),", ",(0,n.jsx)(s.code,{children:"<=>"}),",\n",(0,n.jsx)(s.code,{children:"IS NULL"}),", ",(0,n.jsx)(s.code,{children:"IS NOT NULL"}),") are defined on all data types, even generic\nand recursive data types (including ",(0,n.jsx)(s.code,{children:"ARRAY"}),", ",(0,n.jsx)(s.code,{children:"MAP"}),", ",(0,n.jsx)(s.code,{children:"ROW"}),", ",(0,n.jsx)(s.code,{children:"VARIANT"}),",\nuser-defined types).  For complex types, comparisons are performed\nlexicographically on the type structure.  In such comparisons fields\nwith ",(0,n.jsx)(s.code,{children:"NULL"})," values are compared smaller than any other value."]}),"\n",(0,n.jsx)(s.h1,{id:"other-conditional-operators",children:"Other conditional operators"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"case"}),(0,n.jsx)("code",{children:"CASE value WHEN value1 [, value11 ]* THEN result1 [ WHEN valueN [, valueN1 ]* THEN resultN ]* [ ELSE resultZ ] END"})]}),(0,n.jsx)("td",{children:"Simple case expression: returns the result corresponding to the first valueN that matches value."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"CASE WHEN condition1 THEN result1 [ WHEN conditionN THEN resultN ]* [ ELSE resultZ ] END"})}),(0,n.jsx)("td",{children:"Searched case: returns result corresponding to first condition that evaluates to 'true'."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"coalesce"}),(0,n.jsx)("code",{children:"COALESCE(value0, value1 [, valueN ]*)"})]}),(0,n.jsxs)("td",{children:["Returns the first non-null value. For example, ",(0,n.jsx)("code",{children:"COALESCE(NULL, 5)"})," returns 5."]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"greatest"}),(0,n.jsx)("code",{children:"GREATEST( expr [, expr ]* )"})]}),(0,n.jsxs)("td",{children:["The largest of a number of expressions; if any argument is ",(0,n.jsx)("code",{children:"NULL"}),", the result is ",(0,n.jsx)("code",{children:"NULL"}),"."]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"greatest_ignore_nulls"}),(0,n.jsx)("code",{children:"GREATEST_IGNORE_NULLS( expr [, expr ]* )"})]}),(0,n.jsxs)("td",{children:["The largest of a number of expressions; only if all arguments are ",(0,n.jsx)("code",{children:"NULL"}),", the result is ",(0,n.jsx)("code",{children:"NULL"}),"; otherwise ",(0,n.jsx)("code",{children:"NULL"})," values are ignored."]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"if"}),(0,n.jsx)("code",{children:"IF( condition, ifTrue, ifFalse )"})]}),(0,n.jsx)("td",{children:"Returns ifTrue if the condition evaluates to 'true', returns ifFalse otherwise."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"least"}),(0,n.jsx)("code",{children:"LEAST( expr [, expr ]* )"})]}),(0,n.jsxs)("td",{children:["The smallest of a number of expressions; if any argument is ",(0,n.jsx)("code",{children:"NULL"}),", the result is ",(0,n.jsx)("code",{children:"NULL"}),"."]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"least_ignore_nulls"}),(0,n.jsx)("code",{children:"LEAST_IGNORE_NULLS( expr [, expr ]* )"})]}),(0,n.jsxs)("td",{children:["The smallest of a number of expressions; only if all arguments are ",(0,n.jsx)("code",{children:"NULL"}),", the result is ",(0,n.jsx)("code",{children:"NULL"}),"; otherwise ",(0,n.jsx)("code",{children:"NULL"})," values are ignored."]})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"nullif"}),(0,n.jsx)("code",{children:"NULLIF(value0, value1)"})]}),(0,n.jsxs)("td",{children:["Returns ",(0,n.jsx)(s.code,{children:"NULL"})," if the value0 and value1 are the same. For example, ",(0,n.jsx)("code",{children:"NULLIF(5, 5)"})," returns NULL; ",(0,n.jsx)("code",{children:"NULLIF(5, 0)"})," returns 5."]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}}}]);