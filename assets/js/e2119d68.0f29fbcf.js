"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[5909],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>t});var s=i(96540);const r={},d=s.createContext(r);function c(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(d.Provider,{value:n},e.children)}},81418:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"formats/csv","title":"CSV Format","description":"Feldera can ingest and output data in the CSV format","source":"@site/docs/formats/csv.md","sourceDirName":"formats","slug":"/formats/csv","permalink":"/formats/csv","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Parquet Format","permalink":"/formats/parquet"},"next":{"title":"Raw Format","permalink":"/formats/raw"}}');var r=i(74848),d=i(28453);const c={},t="CSV Format",o={},l=[{value:"Types",id:"types",level:2},{value:"<code>BOOLEAN</code>",id:"boolean",level:3},{value:"Integers (<code>TINYINT</code>, <code>SMALLINT, </code>INTEGER<code>, </code>BIGINT`)",id:"integers-tinyint-smallint-integer-bigint",level:3},{value:"Decimals (<code>DECIMAL</code> / <code>NUMERIC</code>)",id:"decimals-decimal--numeric",level:3},{value:"Floating point numbers (<code>FLOAT</code>, <code>DOUBLE</code>)",id:"floating-point-numbers-float-double",level:3},{value:"Strings (<code>CHAR</code>, <code>VARCHAR</code>, <code>TEXT</code>, <code>STRING</code>)",id:"strings-char-varchar-text-string",level:3},{value:"<code>TIME</code>",id:"time",level:3},{value:"<code>DATE</code>",id:"date",level:3},{value:"<code>TIMESTAMP</code>",id:"timestamp",level:3},{value:"<code>ARRAY</code>",id:"array",level:3},{value:"Configuring CSV event streams",id:"configuring-csv-event-streams",level:2},{value:"Configure connectors",id:"configure-connectors",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"csv-format",children:"CSV Format"})}),"\n",(0,r.jsx)(n.p,{children:"Feldera can ingest and output data in the CSV format"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["via ",(0,r.jsxs)(n.a,{href:"/tutorials/basics/part2",children:[(0,r.jsx)(n.code,{children:"ingress"})," and ",(0,r.jsx)(n.code,{children:"egress"})," REST endpoints"]})," by specifying ",(0,r.jsx)(n.code,{children:"?format=csv"})," in the URL"]}),"\n",(0,r.jsx)(n.li,{children:"as a payload received from or sent to a connector"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here we document the CSV format and how it interacts with different SQL types."}),"\n",(0,r.jsxs)(n.p,{children:["The CSV format expects comma-separated columns and rows\nseparated by a newline (",(0,r.jsx)(n.code,{children:"\\n"}),"). The egress and expected ingress character\nencoding is UTF-8."]}),"\n",(0,r.jsx)(n.p,{children:"The rows must appear in the same order as the program table definition specified\nthe fields. For example, consider the following table:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"create table git_commit (\n    commit_id varchar not null,\n    commit_date timestamp not null,\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"An example CSV row would look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csv",children:"c6d16e61,2024-02-25 12:12:33\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Any unspecified rows following are discarded on ingress: This line\n",(0,r.jsx)(n.code,{children:"c6d16e61,2024-02-25 12:12:33,invalid"})," would be equivalent to the row above for\nthe given table."]}),"\n",(0,r.jsxs)(n.p,{children:["For nullable types that are not strings, a value can be set to ",(0,r.jsx)(n.code,{children:"NULL"})," by either\nleaving the field empty, or writing ",(0,r.jsx)(n.code,{children:"NULL"})," or ",(0,r.jsx)(n.code,{children:"null"})," as the column value. For\nstring types (e.g., ",(0,r.jsx)(n.code,{children:"CHAR"}),", ",(0,r.jsx)(n.code,{children:"VARCHAR"}),"), leaving the field empty will be\ninterpreted as an empty string instead of ",(0,r.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BOOLEAN"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"}),", ",(0,r.jsx)(n.code,{children:"false"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TINYINT,SMALLINT, INTEGER, BIGINT"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"1"}),", ",(0,r.jsx)(n.code,{children:"-9"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FLOAT, DOUBLE, DECIMAL"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"-1.40"}),", ",(0,r.jsx)(n.code,{children:"12.53"}),", ",(0,r.jsx)(n.code,{children:"1e20"}),", ",(0,r.jsx)(n.code,{children:"NaN"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CHAR, VARCHAR, STRING, TEXT"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"abc"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TIME"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"12:12:33"}),", ",(0,r.jsx)(n.code,{children:"23:59:29.483"}),", ",(0,r.jsx)(n.code,{children:"23:59:09.483221092"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TIMESTAMP"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"2024-02-25 12:12:33"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DATE"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"2024-02-25"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BIGINT ARRAY"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[1, 2]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARCHAR ARRAY ARRAY"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"[[ 'abc', '123'], ['c', 'sql']]"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARIANT"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:'"{""foo"": ""bar""}"'})," (see ",(0,r.jsxs)(n.a,{href:"/sql/json",children:[(0,r.jsx)(n.code,{children:"VARIANT"})," documetation"]}),")"]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"boolean",children:(0,r.jsx)(n.code,{children:"BOOLEAN"})}),"\n",(0,r.jsxs)(n.p,{children:["The accepted values are ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"integers-tinyint-smallint-integer-bigint",children:["Integers (",(0,r.jsx)(n.code,{children:"TINYINT"}),", ",(0,r.jsx)(n.code,{children:"SMALLINT, "}),"INTEGER",(0,r.jsx)(n.code,{children:", "}),"BIGINT`)"]}),"\n",(0,r.jsxs)(n.p,{children:["Must be a valid integer and fit the range of the type (see ",(0,r.jsx)(n.a,{href:"/sql/types",children:"SQL\nTypes"}),"), otherwise an error is returned on ingress."]}),"\n",(0,r.jsxs)(n.h3,{id:"decimals-decimal--numeric",children:["Decimals (",(0,r.jsx)(n.code,{children:"DECIMAL"})," / ",(0,r.jsx)(n.code,{children:"NUMERIC"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Either scientific notation (e.g., ",(0,r.jsx)(n.code,{children:"3e234"}),") or standard floating point numbers\nare valid ",(0,r.jsx)(n.code,{children:"1.23"}),". The provided value must fit within the specified range or\nprecision, otherwise an error is returned."]}),"\n",(0,r.jsxs)(n.h3,{id:"floating-point-numbers-float-double",children:["Floating point numbers (",(0,r.jsx)(n.code,{children:"FLOAT"}),", ",(0,r.jsx)(n.code,{children:"DOUBLE"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["Either scientific notation (e.g., ",(0,r.jsx)(n.code,{children:"3e234"}),"), or standard floating point numbers\nare valid ",(0,r.jsx)(n.code,{children:"1.23"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Not a number can be specified using ",(0,r.jsx)(n.code,{children:"NaN"})," (case insensitive). Infinity\ncan be specified using ",(0,r.jsx)(n.code,{children:"-Inf"})," or ",(0,r.jsx)(n.code,{children:"Inf"}),", or ",(0,r.jsx)(n.code,{children:"+Inf"})," (case insensitive).\nIf a floating point value is provided that is outside of the valid range\nfor that type, it is set to ",(0,r.jsx)(n.code,{children:"NaN"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"If a value is provided inside the maximum range of the type but still\ncan't be represented by the type it is rounded to the nearest representable\nfloating point value."}),"\n",(0,r.jsxs)(n.h3,{id:"strings-char-varchar-text-string",children:["Strings (",(0,r.jsx)(n.code,{children:"CHAR"}),", ",(0,r.jsx)(n.code,{children:"VARCHAR"}),", ",(0,r.jsx)(n.code,{children:"TEXT"}),", ",(0,r.jsx)(n.code,{children:"STRING"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"Accepts strings with any number of characters."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The CSV parser does not currently enforce limits on the number\nof characters in a string.  Strings that exceed the length\nspecified in the SQL table declaration are ingested\nwithout truncation."})}),"\n",(0,r.jsxs)(n.p,{children:["If a string contains commas, it can be quoted with ",(0,r.jsx)(n.code,{children:'"'}),": ",(0,r.jsx)(n.code,{children:'"string, with, commas"'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that a string of just ",(0,r.jsx)(n.code,{children:"null"})," or ",(0,r.jsx)(n.code,{children:"NULL"})," for a nullable column gets\ntranslated to the ",(0,r.jsx)(n.code,{children:"NULL"})," value in SQL."]}),"\n",(0,r.jsx)(n.h3,{id:"time",children:(0,r.jsx)(n.code,{children:"TIME"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies times using the ",(0,r.jsx)(n.code,{children:"HH:MM:SS.fffffffff"})," format where:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HH"})," is hours from ",(0,r.jsx)(n.code,{children:"00-23"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MM"})," is minutes from ",(0,r.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SS"})," is seconds from ",(0,r.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fffffffff"})," is the sub-second precision up to 9 digits from ",(0,r.jsx)(n.code,{children:"0"})," to ",(0,r.jsx)(n.code,{children:"999999999"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A leading 0 can be skipped in hour, minutes and seconds. Specifying the\nsubsecond precision is optional and can have any number of digits from 0 to 9.\nLeading and trailing whitespaces are ignored for ingress."}),"\n",(0,r.jsx)(n.h3,{id:"date",children:(0,r.jsx)(n.code,{children:"DATE"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies dates using the ",(0,r.jsx)(n.code,{children:"YYYY-MM-DD"})," format."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"YYYY"})," is the year from ",(0,r.jsx)(n.code,{children:"0001-9999"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MM"})," is the month from ",(0,r.jsx)(n.code,{children:"01-12"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DD"})," is the day from ",(0,r.jsx)(n.code,{children:"01-31"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Invalid dates (e.g., ",(0,r.jsx)(n.code,{children:"1997-02-29"}),") are rejected with an error during ingress.\nLeading zeros can be skipped, e.g., ",(0,r.jsx)(n.code,{children:"0001-1-01"}),", ",(0,r.jsx)(n.code,{children:"1-1-1"}),", ",(0,r.jsx)(n.code,{children:"0000-1-1"})," are all\nequal and valid. Leading and trailing whitespaces are ignored for ingress."]}),"\n",(0,r.jsx)(n.h3,{id:"timestamp",children:(0,r.jsx)(n.code,{children:"TIMESTAMP"})}),"\n",(0,r.jsxs)(n.p,{children:["Specifies dates using the ",(0,r.jsx)(n.code,{children:"YYYY-MM-DD HH:MM:SS.fff"})," format."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"YYYY"})," is the year from ",(0,r.jsx)(n.code,{children:"0001-9999"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MM"})," is the month from ",(0,r.jsx)(n.code,{children:"01-12"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DD"})," is the day from ",(0,r.jsx)(n.code,{children:"01-31"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HH"})," is hours from ",(0,r.jsx)(n.code,{children:"00-23"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MM"})," is minutes from ",(0,r.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SS"})," is seconds from ",(0,r.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fff"})," is the sub-second precision up to 3 digits from ",(0,r.jsx)(n.code,{children:"0"})," to ",(0,r.jsx)(n.code,{children:"999"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Note that the same rules as specified in the Date and Time sections apply,\nexcept that the sub-second precision is limited to three digits (microseconds).\nSpecifying more digits for the subsecond precision on ingress will trim the\nfraction to microseconds. Leading and trailing whitespaces are ignored\nfor ingress."}),"\n",(0,r.jsx)(n.h3,{id:"array",children:(0,r.jsx)(n.code,{children:"ARRAY"})}),"\n",(0,r.jsxs)(n.p,{children:["The CSV format does not have native support for arrays. Arrays are expected to\nbe represented in the form of a string that is a valid JSON array. e.g., a value\nfor ",(0,r.jsx)(n.code,{children:"ARRAY BIGINT"})," can be expressed as ",(0,r.jsx)(n.code,{children:"'[1,2,3]'"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"configuring-csv-event-streams",children:"Configuring CSV event streams"}),"\n",(0,r.jsx)(n.h3,{id:"configure-connectors",children:"Configure connectors"}),"\n",(0,r.jsxs)(n.p,{children:["When adding a new input or output connector on a table or view,\nthe data format is specified in the ",(0,r.jsx)(n.code,{children:"format"})," field of the connector configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'create table FAILED_BANKS (\n  name varchar,\n  city varchar,\n  state varchar,\n  cert bigint,\n  acquirer varchar,\n  closing varchar,   -- needs to be translated from \'DD-MMM-YY\' format\n  fund bigint\n) with (\n  \'connectors\' = \'[{\n    "transport": {\n        "name": "url_input",\n        "config": { "path": "https://www.fdic.gov/system/files/2024-07/banklist.csv" }\n    },\n    "format": {\n        "name": "csv",\n        "config": { "headers": true }\n    }\n}]\'\n);\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"delimiter"}),": A single character that delimits fields. The default is ",(0,r.jsx)(n.code,{children:'","'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"headers"}),": Whether the first line of input is a header line. If this is set to true, Feldera ignores the first line. This applies only to input connectors (Feldera never writes a header line for CSV output). The default is ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);