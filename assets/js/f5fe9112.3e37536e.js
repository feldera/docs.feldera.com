"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[7892],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(i.Provider,{value:n},e.children)}},71065:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"connectors/sinks/postgresql","title":"PostgreSQL output connector","description":"PostgreSQL support is an experimental feature of Feldera.","source":"@site/docs/connectors/sinks/postgresql.md","sourceDirName":"connectors/sinks","slug":"/connectors/sinks/postgresql","permalink":"/connectors/sinks/postgresql","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Redis","permalink":"/connectors/sinks/redis"},"next":{"title":"Snowflake (experimental)","permalink":"/connectors/sinks/snowflake"}}');var r=t(74848),i=t(28453);const d={},l="PostgreSQL output connector",c={},a=[{value:"PostgreSQL output configuration",id:"postgresql-output-configuration",level:2},{value:"Connecting with TLS / SSL",id:"connecting-with-tls--ssl",level:3},{value:"Data type mapping",id:"data-type-mapping",level:2},{value:"Example",id:"example",level:2},{value:"Example demonstrating all supported types",id:"example-demonstrating-all-supported-types",level:2},{value:"Outputting multi-dimensional arrays",id:"outputting-multi-dimensional-arrays",level:3}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"postgresql-output-connector",children:"PostgreSQL output connector"})}),"\n",(0,r.jsx)(n.admonition,{title:"Experimental feature",type:"caution",children:(0,r.jsx)(n.p,{children:"PostgreSQL support is an experimental feature of Feldera."})}),"\n",(0,r.jsx)(n.p,{children:"Feldera allows you to output data from a SQL view to a PostgreSQL database.\nThese outputs are made as a series of transactions."}),"\n",(0,r.jsxs)(n.admonition,{type:"important",children:[(0,r.jsxs)(n.p,{children:["Only SQL views with ",(0,r.jsx)(n.a,{href:"/connectors/unique_keys",children:"Uniqueness Constraints"})," can output\ndata to a PostgreSQL table."]}),(0,r.jsx)(n.p,{children:"It is recommended that these unique keys in Feldera be defined as PRIMARY KEYs\nin the PostgreSQL table."})]}),"\n",(0,r.jsx)(n.h2,{id:"postgresql-output-configuration",children:"PostgreSQL output configuration"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"uri"}),"*"]}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["A PostgreSQL connection URL, e.g., ",(0,r.jsx)(n.code,{children:'"postgresql://postgres:1234@127.0.0.1:7373/postgres"'})," (see the tokio-postgres ",(0,r.jsx)(n.a,{href:"https://docs.rs/tokio-postgres/0.7.12/tokio_postgres/config/struct.Config.html",children:"Config"})," struct for a detailed list of options)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"table"}),"*"]}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"The PostgreSQL table to write the outputs to. The schema of this table should be compatible with the schema of the output view."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ssl_ca_pem"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["A sequence of CA certificates in PEM format. Required for TLS, and takes precedence over ",(0,r.jsx)(n.code,{children:"ssl_ca_location"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ssl_ca_location"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["Path to a file containing a sequence of CA certificates in PEM format. Required for TLS, takes lower precedence than ",(0,r.jsx)(n.code,{children:"ssl_ca_pem"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ssl_client_pem"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["The client certificate in PEM format. Takes precedence over ",(0,r.jsx)(n.code,{children:"ssl_client_location"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ssl_client_location"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["The path to the client certificate file in PEM format. Takes lower precedence than ",(0,r.jsx)(n.code,{children:"ssl_client_pem"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ssl_client_key"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["The client certificate key in PEM format. Takes precedence over ",(0,r.jsx)(n.code,{children:"ssl_client_key_location"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ssl_client_key_location"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["The path to the client certificate key file in PEM format. Takes lower precedence than ",(0,r.jsx)(n.code,{children:"ssl_client_key"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ssl_certificate_chain_location"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"The path to the certificate chain file. The file must contain a sequence of PEM-formatted certificates, the first being the leaf certificate, and the remainder forming the chain of certificates up to and including the trusted root certificate."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"verify_hostname"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"true"})}),(0,r.jsx)(n.td,{children:"True to enable hostname verification when using TLS. True by default."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max_records_in_buffer"})}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{}),(0,r.jsxs)(n.td,{children:["The maximum number of records in a single buffer. If not specified, there is no explicit limit on the number of records, but the buffer may still be constrained by ",(0,r.jsx)(n.code,{children:"max_buffer_size_bytes"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max_buffer_size_bytes"})}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1048576"})}),(0,r.jsxs)(n.td,{children:["The maximum buffer size (in bytes) for a single operation. Buffers for ",(0,r.jsx)(n.code,{children:"INSERT"}),", ",(0,r.jsx)(n.code,{children:"UPDATE"}),", and ",(0,r.jsx)(n.code,{children:"DELETE"})," queries are maintained separately. Default is 1 MiB (",(0,r.jsx)(n.code,{children:"1048576"})," bytes)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"on_conflict_do_nothing"})}),(0,r.jsx)(n.td,{children:"bool"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"false"})}),(0,r.jsxs)(n.td,{children:["Specifies how the connector handles conflicts when executing an ",(0,r.jsx)(n.code,{children:"INSERT"})," into a table with a primary key. By default, an existing row with the same key is overwritten. Setting this flag to ",(0,r.jsx)(n.code,{children:"true"})," preserves the existing row and ignores the new insert. ",(0,r.jsxs)("p",{children:[" This setting does not affect ",(0,r.jsx)(n.code,{children:"UPDATE"})," statements, which always replace the value associated with the key."]})]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"[*]: Required fields"}),"\n",(0,r.jsx)(n.p,{children:"The schema of the PostgreSQL table should match the schema of the Feldera view, as outlined in the table below, with the following exceptions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Narrower Feldera types such as ",(0,r.jsx)(n.code,{children:"INT2"})," and ",(0,r.jsx)(n.code,{children:"FLOAT4"})," can be stored in wider PostgreSQL column types like ",(0,r.jsx)(n.code,{children:"INT8"})," and ",(0,r.jsx)(n.code,{children:"FLOAT8"})," respectively."]}),"\n",(0,r.jsxs)(n.li,{children:["Columns in the PostgreSQL table that are ",(0,r.jsx)(n.strong,{children:"nullable"})," or have ",(0,r.jsx)(n.strong,{children:"default"})," values may be omitted from the Feldera view."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"connecting-with-tls--ssl",children:"Connecting with TLS / SSL"}),"\n",(0,r.jsxs)(n.p,{children:["Feldera supports connecting to PostgreSQL over TLS / SSL.\nTo enable a secure connection, you ",(0,r.jsx)(n.strong,{children:"must"})," provide the following field:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ssl_ca_pem"}),": The CA certificate in PEM format, used to verify the server certificate."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You can optionally provide the following fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ssl_client_pem"}),": The client certificate in PEM format (if the server requires client authentication)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ssl_client_key"}),": The private key corresponding to the client certificate."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"verify_hostname"}),": Set to ",(0,r.jsx)(n.code,{children:"false"})," to disable hostname verification (not recommended). Defaults to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.code,{children:"ssl_ca_pem"})," is not specified, the connection will default to ",(0,r.jsx)(n.strong,{children:"plaintext"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'create materialized view v1 with (\n    \'connectors\' = \'[{\n        "index": "v1_idx",\n        "transport": {\n            "name": "postgres_output",\n            "config": {\n                "uri": "postgres://postgres:secret@db.badhostname.feldera.com:5432/postgres",\n                "table": "feldera_out",\n                "ssl_client_key": "[REDACTED]",\n                "ssl_client_pem": "[REDACTED]",\n                "ssl_ca_pem": "[REDACTED]",\n                "verify_hostname": false\n            }\n        }\n    }]\'\n) as select * from t0;\ncreate index v1_idx on v1(id);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"data-type-mapping",children:"Data type mapping"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The following table lists supported PostgreSQL data types.\nPlease ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/feldera/issues",children:"let us know"})," if you need support for a specific type."]})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feldera Type"}),(0,r.jsx)(n.th,{children:"PostgreSQL Type"}),(0,r.jsx)(n.th,{children:"Comments"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BOOL"}),(0,r.jsx)(n.td,{children:"BOOL"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TINYINT"}),(0,r.jsx)(n.td,{children:"SMALLINT, INT, BIGINT"}),(0,r.jsx)(n.td,{children:"No direct equivalent but can be stored in wider types."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{children:"SMALLINT"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{children:"INT"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"BIGINT"}),(0,r.jsx)(n.td,{children:"BIGINT"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DECIMAL"}),(0,r.jsx)(n.td,{children:"DECIMAL"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"REAL"}),(0,r.jsx)(n.td,{children:"FLOAT"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DOUBLE"}),(0,r.jsx)(n.td,{children:"DOUBLE PRECISION"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARCHAR"}),(0,r.jsx)(n.td,{children:"VARCHAR"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TIME"}),(0,r.jsx)(n.td,{children:"TIME"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DATE"}),(0,r.jsx)(n.td,{children:"DATE"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"TIMESTAMP"}),(0,r.jsx)(n.td,{children:"TIMESTAMP"}),(0,r.jsx)(n.td,{children:"Feldera TIMESTAMPs do not have timezone information."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARIANT"}),(0,r.jsx)(n.td,{children:"JSON, JSONB"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"UUID"}),(0,r.jsx)(n.td,{children:"UUID"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"VARBINARY"}),(0,r.jsx)(n.td,{children:"BYTEA"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ARRAY"}),(0,r.jsx)(n.td,{children:"ARRAY"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"User Defined Type"}),(0,r.jsx)(n.td,{children:"Equivalent PostgreSQL Composite Type"}),(0,r.jsx)(n.td,{})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"MAP"}),(0,r.jsx)(n.td,{children:"JSON, JSONB"}),(0,r.jsx)(n.td,{children:"No direct equivalent type, but can be stored as JSON / JSONB."})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["Let's first connect to a PostgreSQL database running in ",(0,r.jsx)(n.code,{children:"localhost:5432"})," with\nthe username ",(0,r.jsx)(n.code,{children:"postgres"})," and password ",(0,r.jsx)(n.code,{children:"password"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"psql postgres://postgres:password@localhost:5432/postgres\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, let's create a table ",(0,r.jsx)(n.code,{children:"feldera_out"})," with columns ",(0,r.jsx)(n.code,{children:"id"})," and ",(0,r.jsx)(n.code,{children:"s"})," that Feldera\nwill write to."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- PostgreSQL\nCREATE TABLE feldera_out (id INT PRIMARY KEY, s VARCHAR);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can output data from Feldera to this table using the ",(0,r.jsx)(n.code,{children:"postgres_output"}),"\nconnector."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Feldera SQL\n-- Create a table and fill it with 5 randomly generated records.\ncreate table t0 (id int, s varchar) with (\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n          "rate": 1,\n          "limit": 5\n        }]\n      }\n    }\n  }]\'\n);\n\n-- Create a view that will contain a copy of all records in table `t0` and\n-- attach a Postgres output connector to it.\ncreate materialized view v1 with (\n    \'connectors\' = \'[{\n        "index": "v1_idx",\n        "transport": {\n            "name": "postgres_output",\n            "config": {\n                "uri": "postgres://postgres:password@localhost:5432/postgres",\n                "table": "feldera_out"\n            }\n        }\n    }]\'\n) as select * from t0;\n\n-- Index `v1` using `id` column as a key. The Postgres connector requires this\n-- index to group updates by key.\ncreate index v1_idx on v1(id);\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsx)(n.p,{children:"Column names in Feldera SQL view and PostgreSQL table need to match."})}),"\n",(0,r.jsx)(n.h2,{id:"example-demonstrating-all-supported-types",children:"Example demonstrating all supported types"}),"\n",(0,r.jsx)(n.p,{children:"We create a Feldera pipeline including every supported PostgreSQL type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'-- Feldera SQL\nCREATE TABLE all_types_example (\n    my_bool              BOOL,\n    my_bool_array        BOOL ARRAY,\n    my_bytea             BYTEA,\n    my_char              CHAR,\n    my_char_array        CHAR ARRAY,\n    my_varchar           VARCHAR(50),\n    my_varchar_array     VARCHAR(50) ARRAY,\n    my_name              STRING,\n    my_name_array        STRING ARRAY,\n    my_date              DATE,\n    my_date_array        DATE ARRAY,\n    my_time              TIME,\n    my_time_array        TIME ARRAY,\n    my_timestamp         TIMESTAMP,\n    my_timestamp_array   TIMESTAMP ARRAY,\n    my_int2              INT2,\n    my_int2_array        INT2 ARRAY,\n    my_int4              INT4,\n    my_int4_array        INT4 ARRAY,\n    my_int8              INT8,\n    my_int8_array        INT8 ARRAY,\n    my_float4            FLOAT4,\n    my_float4_array      FLOAT4 ARRAY,\n    my_float8            FLOAT8,\n    my_float8_array      FLOAT8 ARRAY,\n    my_text              TEXT,\n    my_text_array        TEXT ARRAY,\n    my_uuid              UUID,\n    my_uuid_array        UUID ARRAY,\n    my_json              VARIANT,\n    my_decimal           DECIMAL(28, 2),\n    my_decimal_array     DECIMAL(28, 2) ARRAY\n) WITH (\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n          "rate": 1,\n          "limit": 5\n        }]\n      }\n    }\n  }]\'\n);\n\ncreate materialized view v1\nwith (\n    \'connectors\' = \'[{\n        "index": "v1_idx",\n        "transport": {\n            "name": "postgres_output",\n            "config": {\n                "uri": "postgres://postgres:password@localhost:5432/postgres",\n                "table": "all_types_example"\n            }\n        }\n    }]\'\n)\nas select * from all_types_example;\ncreate index v1_idx on v1(my_int2);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now we create the equivalent table in PostgreSQL."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- PostgreSQL\nCREATE TABLE all_types_example (\n    my_bool              BOOL,\n    my_bool_array        BOOL[],\n    my_bytea             BYTEA,\n    my_char              CHAR,\n    my_char_array        CHAR[],\n    my_varchar           VARCHAR(50),\n    my_varchar_array     VARCHAR(50)[],\n    my_name              NAME,\n    my_name_array        NAME[],\n    my_date              DATE,\n    my_date_array        DATE[],\n    my_time              TIME,\n    my_time_array        TIME[],\n    my_timestamp         TIMESTAMP,\n    my_timestamp_array   TIMESTAMP[],\n    my_int2              INT2,\n    my_int2_array        INT2[],\n    my_int4              INT4,\n    my_int4_array        INT4[],\n    my_int8              INT8,\n    my_int8_array        INT8[],\n    my_float4            FLOAT4,\n    my_float4_array      FLOAT4[],\n    my_float8            FLOAT8,\n    my_float8_array      FLOAT8[],\n    my_text              TEXT,\n    my_text_array        TEXT[],\n    my_uuid              UUID,\n    my_uuid_array        UUID[],\n    my_json              JSON,\n    my_decimal           DECIMAL(28, 2),\n    my_decimal_array     DECIMAL(28, 2)[]\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"After the pipeline completes, we can inspect the PostgreSQL table to ensure\nthat Feldera has written to it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- PostgreSQL\nSELECT count(*) FROM all_types_example;\n count\n-------\n     5\n(1 row)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"outputting-multi-dimensional-arrays",children:"Outputting multi-dimensional arrays"}),"\n",(0,r.jsxs)(n.p,{children:["When working with multi-dimensional arrays, like ",(0,r.jsx)(n.code,{children:"BYTEA ARRAY"}),", PostgreSQL\nexpects the sub arrays to be of the same length. If not, the following error is\nraised:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Multidimensional arrays must have sub-arrays with matching dimensions.\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsx)(n.p,{children:"If the sub-arrays are not of the same dimension, the transaction will fail and\nthe data will be lost."})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);