"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[2344],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(96540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},98011:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"sql/table","title":"Table Functions","description":"A table function is a function that returns data of a table type.  The","source":"@site/docs/sql/table.md","sourceDirName":"sql","slug":"/sql/table","permalink":"/sql/table","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"String Operations","permalink":"/sql/string"},"next":{"title":"UUID Operations","permalink":"/sql/uuid"}}');var i=s(74848),o=s(28453);const r={},l="Table Functions",a={},d=[{value:"Descriptors",id:"descriptors",level:2},{value:"Table functions",id:"table-functions-1",level:2},{value:"<code>TUMBLE</code>",id:"tumble",level:3},{value:"Syntax:",id:"syntax",level:4},{value:"<code>HOP</code>",id:"hop",level:3},{value:"Syntax:",id:"syntax-1",level:4}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"table-functions",children:"Table Functions"})}),"\n",(0,i.jsx)(n.p,{children:"A table function is a function that returns data of a table type.  The\ntable-valued function can be used wherever a relation can be used."}),"\n",(0,i.jsx)(n.h2,{id:"descriptors",children:"Descriptors"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DESCRIPTOR"})," operator is used with table functions.  The syntax\nis:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"DESCRIPTOR(name [, name ]*)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"DESCRIPTOR"})," appears as an argument in a function to indicate a list\nof names.  The interpretation of names is left to the function."]}),"\n",(0,i.jsx)(n.h2,{id:"table-functions-1",children:"Table functions"}),"\n",(0,i.jsx)(n.p,{children:"Table functions occur in the FROM clause."}),"\n",(0,i.jsx)(n.p,{children:"The following table functions are predefined:"}),"\n",(0,i.jsx)(n.h3,{id:"tumble",children:(0,i.jsx)(n.code,{children:"TUMBLE"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TUMBLE"})," assigns a window for each row of a relation based on a\ntimestamp column. An assigned time window is specified by its\nbeginning and ending.  All time windows have the same length (in\nabsolute time), and that\u2019s why tumbling sometimes is named as \u201cfixed\nwindowing\u201d. The first parameter of the ",(0,i.jsx)(n.code,{children:"TUMBLE"})," table function is a\ntable parameter."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"timecol"})," must have a ",(0,i.jsx)(n.code,{children:"TIMESTAMP"})," type.  The ",(0,i.jsx)(n.code,{children:"size"}),' must be a\n"short" SQL interval type (e.g., ',(0,i.jsx)(n.code,{children:"DAYS"}),' or shorter), because "long"\nSQL interval values are not constant values (e.g., the duration of a\nmonth is not a constant).']}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"TUMBLE(data, DESCRIPTOR(timecol), size [, offset ])\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Indicates a tumbling window of ",(0,i.jsx)(n.code,{children:"size"})," interval for ",(0,i.jsx)(n.code,{children:"timecol"}),",\noptionally aligned at ",(0,i.jsx)(n.code,{children:"offset"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM TABLE(\n  TUMBLE(\n    TABLE orders,\n    DESCRIPTOR(rowtime),\n    INTERVAL '1' MINUTE));\n\n-- or with the named params\n-- note: the DATA param must be the first\nSELECT * FROM TABLE(\n  TUMBLE(\n    DATA => TABLE orders,\n    TIMECOL => DESCRIPTOR(rowtime),\n    SIZE => INTERVAL '1' MINUTE));\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The result is a table that has all the columns of the ",(0,i.jsx)(n.code,{children:"order"})," table,\nand in addition the following columns, defined by the ",(0,i.jsx)(n.code,{children:"TUMBLE"}),"\nfunction:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"window_start"}),", of the same type as the column ",(0,i.jsx)(n.code,{children:"order.rowtime"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"window_end"}),", of the same type as the column ",(0,i.jsx)(n.code,{children:"order.rowtime"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"hop",children:(0,i.jsx)(n.code,{children:"HOP"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"HOP"})," assigns windows that cover rows within the interval of size and\nshifting every slide based on a timestamp column.  Windows assigned\ncould overlap, so hopping sometime is also named \u201csliding window\u201d."]}),"\n",(0,i.jsx)(n.h4,{id:"syntax-1",children:"Syntax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"HOP(data, DESCRIPTOR(timecol), slide, size [, offset ])\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Indicates a hopping window for ",(0,i.jsx)(n.code,{children:"timecol"}),", covering rows within the\ninterval of ",(0,i.jsx)(n.code,{children:"size"}),", shifting every ",(0,i.jsx)(n.code,{children:"slide"})," and optionally aligned at\n",(0,i.jsx)(n.code,{children:"offset"}),".  The type of the ",(0,i.jsx)(n.code,{children:"timecol"})," has to be ",(0,i.jsx)(n.code,{children:"TIMESTAMP"}),'.  The\nintervals must be compile-time constants, and be expressed as a\n"short" interval (i.e., days or smaller time units), because "long"\nSQL interval values are not constant values (e.g., the duration of a\nmonth is not a constant).']}),"\n",(0,i.jsx)(n.p,{children:"Here is an example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM TABLE(\n  HOP(\n    TABLE orders,\n    DESCRIPTOR(rowtime),\n    INTERVAL '2' MINUTE,\n    INTERVAL '5' MINUTE));\n\n-- or with the named params\n-- note: the DATA param must be the first\nSELECT * FROM TABLE(\n  HOP(\n    DATA => TABLE orders,\n    TIMECOL => DESCRIPTOR(rowtime),\n    SLIDE => INTERVAL '2' MINUTE,\n    SIZE => INTERVAL '5' MINUTE));\n"})}),"\n",(0,i.jsxs)(n.p,{children:["applies hopping with 5-minute interval size on rows from table\n",(0,i.jsx)(n.code,{children:"orders"})," and shifting every 2 minutes."]}),"\n",(0,i.jsxs)(n.p,{children:["The result is a table that has all the columns of the ",(0,i.jsx)(n.code,{children:"order"})," table,\nand in addition the following columns, defined by the ",(0,i.jsx)(n.code,{children:"HOP"}),"\nfunction:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"window_start"}),", of the same type as the column ",(0,i.jsx)(n.code,{children:"order.rowtime"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"window_end"}),", of the same type as the column ",(0,i.jsx)(n.code,{children:"order.rowtime"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"NULL"})," timestamp produces no rows in the result."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);