"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[8882],{28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var r=t(96540);const n={},d=r.createContext(n);function i(e){const s=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(d.Provider,{value:s},e.children)}},44450:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>x,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"sql/operators","title":"Operators","description":"This table shows the operators associativity, starting from highest to lowest:","source":"@site/docs/sql/operators.md","sourceDirName":"sql","slug":"/sql/operators","permalink":"/sql/operators","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Map Operations","permalink":"/sql/map"},"next":{"title":"String Operations","permalink":"/sql/string"}}');var n=t(74848),d=t(28453);const i={},c="Operators",l={},o=[];function h(e){const s={h1:"h1",header:"header",p:"p",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"operators",children:"Operators"})}),"\n",(0,n.jsx)(s.p,{children:"This table shows the operators associativity, starting from highest to lowest:"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Operator"}),(0,n.jsx)("th",{children:"Associativity"}),(0,n.jsx)("th",{children:"Comments"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"."})}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"Field access"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"::"})}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"Infix cast"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"[ index ]"})}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"Collection element"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"plusminus"}),(0,n.jsx)("code",{children:"+, -"})]}),(0,n.jsx)("td",{children:"right"}),(0,n.jsx)("td",{children:"Unary plus, minus"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"muldiv"}),(0,n.jsx)("code",{children:"*, /, %, ||"})]}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"arithmetic"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"+, -"})}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"arithmetic"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"between"}),(0,n.jsx)("code",{children:"BETWEEN, IN, LIKE, SIMILAR, OVERLAPS, CONTAINS"})]}),(0,n.jsx)("td",{children:"N/A"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"comparisons"}),(0,n.jsx)("a",{id:"<=>"}),(0,n.jsx)("code",{children:"<, >, =, <=, >=, <>, !=, <=>"})]}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"comparisons"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("a",{id:"isnull"}),(0,n.jsx)("code",{children:"IS NULL, IS FALSE, IS TRUE, IS UNKNOWN, IS NOT NULL, IS NOT TRUE, IS NOT FALSE, IS NOT UNKNOWN"})]}),(0,n.jsx)("td",{children:"unary"}),(0,n.jsx)("td",{})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"NOT"})}),(0,n.jsx)("td",{children:"right"}),(0,n.jsx)("td",{children:"Boolean"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"AND"})}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"Boolean"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"OR"})}),(0,n.jsx)("td",{children:"left"}),(0,n.jsx)("td",{children:"Boolean"})]})]}),"\n",(0,n.jsx)(s.p,{children:"Arithmetic operations combining signed and unsigned values will\nproduce a result with the wider type; if both types have the same\nwidth, the result is unsigned;"})]})}function x(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);