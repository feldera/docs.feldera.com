"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[9799],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(96540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},90037:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"contributors/ui-testing","title":"Web Console testing","description":"Regression UI testing is performed using Playwright framework.","source":"@site/docs/contributors/ui-testing.md","sourceDirName":"contributors","slug":"/contributors/ui-testing","permalink":"/contributors/ui-testing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=n(74848),r=n(28453);const o={},a="Web Console testing",c={},d=[{value:"Running e2e tests",id:"running-e2e-tests",level:3},{value:"Running ct tests",id:"running-ct-tests",level:3},{value:"Contributing tests",id:"contributing-tests",level:3},{value:"Writing tests",id:"writing-tests",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"web-console-testing",children:"Web Console testing"})}),"\n",(0,i.jsxs)(t.p,{children:["Regression UI testing is performed using Playwright framework.\nThe repository contains end-to-end (e2e) tests that are to be executed against a clean Feldera instance,\nand standalone unit (ct) tests that include UI component tests and TypeScript function tests.\nExisting Playwright tests are executed during CI and can be run manually within provided devcontainer environment.\nAdd environment variable ",(0,i.jsx)(t.code,{children:"CI=true"})," when executing tests in CI setting."]}),"\n",(0,i.jsx)(t.h3,{id:"running-e2e-tests",children:"Running e2e tests"}),"\n",(0,i.jsxs)(t.p,{children:["Run ",(0,i.jsx)(t.code,{children:"yarn test-e2e"})," to execute all e2e tests on all supported platforms in background, or run ",(0,i.jsx)(t.code,{children:"yarn test-e2e-ui"})," to open a UI to run tests interactively.\nTests should be executed against a running Pipeline Manager instance.\nAs an artificial limitation of scope, currently no services for Kafka, Debezium, Snowflake and other similar connector types are available for tests in the CI, so only HTTP connectors and API is available along with the UI itself."]}),"\n",(0,i.jsx)(t.h3,{id:"running-ct-tests",children:"Running ct tests"}),"\n",(0,i.jsxs)(t.p,{children:["Run ",(0,i.jsx)(t.code,{children:"yarn test-ct"})," to execute all ct tests on all supported platforms in background, or run ",(0,i.jsx)(t.code,{children:"yarn test-ct-ui"})," to open a UI to run tests interactively.\nUnit tests do not need Feldera instance to run because they run against individual ESM modules compiled on-demand for the test."]}),"\n",(0,i.jsx)(t.h3,{id:"contributing-tests",children:"Contributing tests"}),"\n",(0,i.jsxs)(t.p,{children:["The tests directory is ",(0,i.jsx)(t.code,{children:"feldera/web-console/tests"}),".\nRegression testing is performed by comparing snapshots with the test results.\nSnapshots are expected in the directory ",(0,i.jsx)(t.code,{children:"feldera/web-console/playwright-snapshots"})," and are generated during test run if they are not found.\nSnapshots are not a part of the feldera repo, and are instead stored at ",(0,i.jsx)(t.a,{href:"https://github.com/feldera/playwright-snapshots",children:"https://github.com/feldera/playwright-snapshots"}),".\nDuring CI, snapshots of the correct version are copied into the build directory.\nEnvironment variable ",(0,i.jsx)(t.code,{children:"PLAYWRIGHT_SNAPSHOTS_COMMIT"})," in ",(0,i.jsx)(t.code,{children:"feldera/.arg"})," specifies the commit hash being used in CI to test against.\nWhen committing new tests or updating screenshots for existing tests, ",(0,i.jsx)(t.code,{children:"PLAYWRIGHT_SNAPSHOTS_COMMIT"})," needs to be updated as well.\nWhen testing locally, you need to manually clone ",(0,i.jsx)(t.code,{children:"playwright-snapshots"})," and checkout the correct commit hash, e.g.:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"cd web-console && yarn test-prepare\n"})}),"\n",(0,i.jsx)(t.p,{children:"OR"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"cd web-console\nnpm i -g degit\ndegit feldera/playwright-snapshots#{commit_hash}\n"})}),"\n",(0,i.jsx)(t.p,{children:"OR"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"cd web-console\ngit clone https://github.com/feldera/playwright-snapshots && git checkout {commit_hash}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"writing-tests",children:"Writing tests"}),"\n",(0,i.jsxs)(t.p,{children:["If you want to use ",(0,i.jsx)(t.code,{children:"Playwright codegen"})," to automatically create new tests from UI interactions,\ninstall Playwright on your host system: ",(0,i.jsx)(t.a,{href:"https://playwright.dev/docs/intro",children:"https://playwright.dev/docs/intro"})]}),"\n",(0,i.jsx)(t.p,{children:"Execute Playwright Codegen with:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"yarn playwright codegen http://127.0.0.1:8080/\n"})}),"\n",(0,i.jsx)(t.p,{children:"Keep in mind that codegen is not designed to produce production-ready code,\nso you might need to edit it."}),"\n",(0,i.jsxs)(t.p,{children:["Prefer using ",(0,i.jsx)(t.code,{children:"data-testid"})," prop and ",(0,i.jsx)(t.code,{children:".getByTestId()"})," to locate the elements.\nWhen that is inconvenient, consider ",(0,i.jsx)(t.code,{children:".getByRole()"}),".\nResort to visible text-based locators when above methods are inconvenient.\nAvoid locating by HTML element names, CSS classes and ",(0,i.jsx)(t.code,{children:"id"})," prop.\nWhen it is impractical to decorate a concrete HTML element with ",(0,i.jsx)(t.code,{children:"data-testid"})," prop -\ndecorate its wrapping element, and then seek from this wrapper by target role, HTML element name or label."]}),"\n",(0,i.jsx)(t.p,{children:"Before all tests, a cleanup procedure defined in tests/global.setup.ts is executed.\nEach test expects a clean Pipeline Manager state, and should contain its own cleanup procedure."}),"\n",(0,i.jsxs)(t.p,{children:["You should use ",(0,i.jsx)(t.code,{children:"test.step()"})," API to semantically group the procedures in your test."]}),"\n",(0,i.jsx)(t.p,{children:"The following naming scheme is used for snapshots:\n'A-B-DESCRIPTION.png', where"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["A is an index number of a current ",(0,i.jsx)(t.code,{children:"test.step()"}),";"]}),"\n",(0,i.jsx)(t.li,{children:"B is an index number of a snapshot in a current test;"}),"\n",(0,i.jsx)(t.li,{children:"DESCRIPTION is a short description of observed view."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);