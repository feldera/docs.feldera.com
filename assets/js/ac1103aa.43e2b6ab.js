"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[6704],{28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>d});var r=t(96540);const a={},s=r.createContext(a);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(s.Provider,{value:e},n.children)}},46127:(n,e,t)=>{t.d(e,{A:()=>r});const r=t.p+"assets/images/part2-arch-11757860624f53493139a623a3b1babf.png"},46774:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"use_cases/batch/part2","title":"Part 2. Convert the Batch Job into a Feldera Pipeline","description":"We now convert the Spark batch job from the previous section into an","source":"@site/docs/use_cases/batch/part2.md","sourceDirName":"use_cases/batch","slug":"/use_cases/batch/part2","permalink":"/use_cases/batch/part2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Part 1: Create a Spark SQL batch job","permalink":"/use_cases/batch/part1"},"next":{"title":"Part 3. Working with Historical and Real Time Data","permalink":"/use_cases/batch/part3"}}');var a=t(74848),s=t(28453);const i={},d="Part 2. Convert the Batch Job into a Feldera Pipeline",l={},o=[{value:"Table Definitions",id:"table-definitions",level:2},{value:"View definitions",id:"view-definitions",level:2},{value:"Backfill",id:"backfill",level:2},{value:"Incremental changes",id:"incremental-changes",level:2},{value:"Takeaways",id:"takeaways",level:2}];function c(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components},{Details:r}=e;return r||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"part-2-convert-the-batch-job-into-a-feldera-pipeline",children:"Part 2. Convert the Batch Job into a Feldera Pipeline"})}),"\n",(0,a.jsxs)(e.p,{children:["We now convert the Spark batch job from the previous section into an\n",(0,a.jsx)(e.strong,{children:"always-on"}),", incremental Feldera pipeline.\nSpecifically, in this section of the tutorial we:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Create Feldera tables and configure them to ingest input records from the Delta Lake."}),"\n",(0,a.jsx)(e.li,{children:"Define a set of views identical to the ones we declared in Spark."}),"\n",(0,a.jsx)(e.li,{children:"Load initial table snapshots and compute initial contents of the views."}),"\n",(0,a.jsx)(e.li,{children:"Demonstrate incremental computation: add new records to the tables and observe\ninstant changes to the views."}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["The implementation described in this section is available as a\n",(0,a.jsx)(e.a,{href:"https://try.feldera.com/create/?name=accelerating-batch-analytics",children:"pre-packaged example in the Feldera online sandbox"}),"\nas well as in your local Feldera installation."]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Architecture Diagram with Delta Lake",src:t(46127).A+"",width:"1276",height:"530"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:" Full Feldera SQL code "}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:'CREATE TABLE LINEITEM (\n        L_ORDERKEY    INTEGER NOT NULL,\n        L_PARTKEY     INTEGER NOT NULL,\n        L_SUPPKEY     INTEGER NOT NULL,\n        L_LINENUMBER  INTEGER NOT NULL,\n        L_QUANTITY    DECIMAL(15,2) NOT NULL,\n        L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,\n        L_DISCOUNT    DECIMAL(15,2) NOT NULL,\n        L_TAX         DECIMAL(15,2) NOT NULL,\n        L_RETURNFLAG  CHAR(1) NOT NULL,\n        L_LINESTATUS  CHAR(1) NOT NULL,\n        L_SHIPDATE    DATE NOT NULL,\n        L_COMMITDATE  DATE NOT NULL,\n        L_RECEIPTDATE DATE NOT NULL,\n        L_SHIPINSTRUCT CHAR(25) NOT NULL,\n        L_SHIPMODE     CHAR(10) NOT NULL,\n        L_COMMENT      VARCHAR(44) NOT NULL\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/lineitem",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\nCREATE TABLE ORDERS  (\n        O_ORDERKEY       INTEGER NOT NULL,\n        O_CUSTKEY        INTEGER NOT NULL,\n        O_ORDERSTATUS    CHAR(1) NOT NULL,\n        O_TOTALPRICE     DECIMAL(15,2) NOT NULL,\n        O_ORDERDATE      DATE NOT NULL,\n        O_ORDERPRIORITY  CHAR(15) NOT NULL,\n        O_CLERK          CHAR(15) NOT NULL,\n        O_SHIPPRIORITY   INTEGER NOT NULL,\n        O_COMMENT        VARCHAR(79) NOT NULL\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/orders",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\nCREATE TABLE PART (\n        P_PARTKEY     INTEGER NOT NULL,\n        P_NAME        VARCHAR(55) NOT NULL,\n        P_MFGR        CHAR(25) NOT NULL,\n        P_BRAND       CHAR(10) NOT NULL,\n        P_TYPE        VARCHAR(25) NOT NULL,\n        P_SIZE        INTEGER NOT NULL,\n        P_CONTAINER   CHAR(10) NOT NULL,\n        P_RETAILPRICE DECIMAL(15,2) NOT NULL,\n        P_COMMENT     VARCHAR(23) NOT NULL\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/part",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\nCREATE TABLE CUSTOMER (\n        C_CUSTKEY     INTEGER NOT NULL,\n        C_NAME        VARCHAR(25) NOT NULL,\n        C_ADDRESS     VARCHAR(40) NOT NULL,\n        C_NATIONKEY   INTEGER NOT NULL,\n        C_PHONE       CHAR(15) NOT NULL,\n        C_ACCTBAL     DECIMAL(15,2)   NOT NULL,\n        C_MKTSEGMENT  CHAR(10) NOT NULL,\n        C_COMMENT     VARCHAR(117) NOT NULL\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/customer",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\nCREATE TABLE SUPPLIER (\n        S_SUPPKEY     INTEGER NOT NULL,\n        S_NAME        CHAR(25) NOT NULL,\n        S_ADDRESS     VARCHAR(40) NOT NULL,\n        S_NATIONKEY   INTEGER NOT NULL,\n        S_PHONE       CHAR(15) NOT NULL,\n        S_ACCTBAL     DECIMAL(15,2) NOT NULL,\n        S_COMMENT     VARCHAR(101) NOT NULL\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/supplier",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\nCREATE TABLE PARTSUPP (\n        PS_PARTKEY     INTEGER NOT NULL,\n        PS_SUPPKEY     INTEGER NOT NULL,\n        PS_AVAILQTY    INTEGER NOT NULL,\n        PS_SUPPLYCOST  DECIMAL(15,2)  NOT NULL,\n        PS_COMMENT     VARCHAR(199) NOT NULL\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/partsupp",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\nCREATE TABLE NATION  (\n        N_NATIONKEY  INTEGER NOT NULL,\n        N_NAME       CHAR(25) NOT NULL,\n        N_REGIONKEY  INTEGER NOT NULL,\n        N_COMMENT    VARCHAR(152)\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/nation",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\nCREATE TABLE REGION  (\n        R_REGIONKEY  INTEGER NOT NULL,\n        R_NAME       CHAR(25) NOT NULL,\n        R_COMMENT    VARCHAR(152)\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/region",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n\ncreate materialized view q1\nas select\n\tl_returnflag,\n\tl_linestatus,\n\tsum(l_quantity) as sum_qty,\n\tsum(l_extendedprice) as sum_base_price,\n\tsum(l_extendedprice * (1 - l_discount)) as sum_disc_price,\n\tsum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,\n\tavg(l_quantity) as avg_qty,\n\tavg(l_extendedprice) as avg_price,\n\tavg(l_discount) as avg_disc,\n\tcount(*) as count_order\nfrom\n\tlineitem\nwhere\n\tl_shipdate <= date \'1998-12-01\' - interval \'90\' day\ngroup by\n\tl_returnflag,\n\tl_linestatus\norder by\n\tl_returnflag,\n\tl_linestatus;\n\ncreate materialized view q2\nas select\n\ts_acctbal,\n\ts_name,\n\tn_name,\n\tp_partkey,\n\tp_mfgr,\n\ts_address,\n\ts_phone,\n\ts_comment\nfrom\n\tpart,\n\tsupplier,\n\tpartsupp,\n\tnation,\n\tregion\nwhere\n\tp_partkey = ps_partkey\n\tand s_suppkey = ps_suppkey\n\tand p_size = 15\n\tand p_type like \'%BRASS\'\n\tand s_nationkey = n_nationkey\n\tand n_regionkey = r_regionkey\n\tand r_name = \'EUROPE\'\n\tand ps_supplycost = (\n\t\tselect\n\t\t\tmin(ps_supplycost)\n\t\tfrom\n\t\t\tpartsupp,\n\t\t\tsupplier,\n\t\t\tnation,\n\t\t\tregion\n\t\twhere\n\t\t\tp_partkey = ps_partkey\n\t\t\tand s_suppkey = ps_suppkey\n\t\t\tand s_nationkey = n_nationkey\n\t\t\tand n_regionkey = r_regionkey\n\t\t\tand r_name = \'EUROPE\'\n\t)\norder by\n\ts_acctbal desc,\n\tn_name,\n\ts_name,\n\tp_partkey\nlimit 100;\n\ncreate materialized view q3\nas select\n\tl_orderkey,\n\tsum(l_extendedprice * (1 - l_discount)) as revenue,\n\to_orderdate,\n\to_shippriority\nfrom\n\tcustomer,\n\torders,\n\tlineitem\nwhere\n\tc_mktsegment = \'BUILDING\'\n\tand c_custkey = o_custkey\n\tand l_orderkey = o_orderkey\n\tand o_orderdate < date \'1995-03-15\'\n\tand l_shipdate > date \'1995-03-15\'\ngroup by\n\tl_orderkey,\n\to_orderdate,\n\to_shippriority\norder by\n\trevenue desc,\n\to_orderdate\nlimit 10;\n\ncreate materialized view q4\nas select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\torders\nwhere\n\to_orderdate >= date \'1993-07-01\'\n\tand o_orderdate < date \'1993-07-01\' + interval \'3\' month\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority;\n\ncreate materialized view q5\nas select\n\tn_name,\n\tsum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n\tcustomer,\n\torders,\n\tlineitem,\n\tsupplier,\n\tnation,\n\tregion\nwhere\n\tc_custkey = o_custkey\n\tand l_orderkey = o_orderkey\n\tand l_suppkey = s_suppkey\n\tand c_nationkey = s_nationkey\n\tand s_nationkey = n_nationkey\n\tand n_regionkey = r_regionkey\n\tand r_name = \'ASIA\'\n\tand o_orderdate >= date \'1994-01-01\'\n\tand o_orderdate < date \'1994-01-01\' + interval \'1\' year\ngroup by\n\tn_name\norder by\n\trevenue desc;\n\ncreate materialized view q6\nas select\n\tsum(l_extendedprice * l_discount) as revenue\nfrom\n\tlineitem\nwhere\n\tl_shipdate >= date \'1994-01-01\'\n\tand l_shipdate < date \'1994-01-01\' + interval \'1\' year\n\tand l_discount between .06 - 0.01 and .06 + 0.01\n\tand l_quantity < 24;\n\ncreate materialized view q7\nas select\n\tsupp_nation,\n\tcust_nation,\n\tl_year,\n\tsum(volume) as revenue\nfrom\n\t(\n\t\tselect\n\t\t\tn1.n_name as supp_nation,\n\t\t\tn2.n_name as cust_nation,\n\t\t\tyear(l_shipdate) as l_year,\n\t\t\tl_extendedprice * (1 - l_discount) as volume\n\t\tfrom\n\t\t\tsupplier,\n\t\t\tlineitem,\n\t\t\torders,\n\t\t\tcustomer,\n\t\t\tnation n1,\n\t\t\tnation n2\n\t\twhere\n\t\t\ts_suppkey = l_suppkey\n\t\t\tand o_orderkey = l_orderkey\n\t\t\tand c_custkey = o_custkey\n\t\t\tand s_nationkey = n1.n_nationkey\n\t\t\tand c_nationkey = n2.n_nationkey\n\t\t\tand (\n\t\t\t\t(n1.n_name = \'FRANCE\' and n2.n_name = \'GERMANY\')\n\t\t\t\tor (n1.n_name = \'GERMANY\' and n2.n_name = \'FRANCE\')\n\t\t\t)\n\t\t\tand l_shipdate between date \'1995-01-01\' and date \'1996-12-31\'\n\t) as shipping\ngroup by\n\tsupp_nation,\n\tcust_nation,\n\tl_year\norder by\n\tsupp_nation,\n\tcust_nation,\n\tl_year;\n\n\ncreate materialized view q8\nas select\n\to_year,\n\tsum(case\n\t\twhen nation = \'BRAZIL\' then volume\n\t\telse 0\n\tend) / sum(volume) as mkt_share\nfrom\n\t(\n\t\tselect\n\t\t\tyear(o_orderdate) as o_year,\n\t\t\tl_extendedprice * (1 - l_discount) as volume,\n\t\t\tn2.n_name as nation\n\t\tfrom\n\t\t\tpart,\n\t\t\tsupplier,\n\t\t\tlineitem,\n\t\t\torders,\n\t\t\tcustomer,\n\t\t\tnation n1,\n\t\t\tnation n2,\n\t\t\tregion\n\t\twhere\n\t\t\tp_partkey = l_partkey\n\t\t\tand s_suppkey = l_suppkey\n\t\t\tand l_orderkey = o_orderkey\n\t\t\tand o_custkey = c_custkey\n\t\t\tand c_nationkey = n1.n_nationkey\n\t\t\tand n1.n_regionkey = r_regionkey\n\t\t\tand r_name = \'AMERICA\'\n\t\t\tand s_nationkey = n2.n_nationkey\n\t\t\tand o_orderdate between date \'1995-01-01\' and date \'1996-12-31\'\n\t\t\tand p_type = \'ECONOMY ANODIZED STEEL\'\n\t) as all_nations\ngroup by\n\to_year\norder by\n\to_year;\n\ncreate materialized view q9\nas select\n\tnation,\n\to_year,\n\tsum(amount) as sum_profit\nfrom\n\t(\n\t\tselect\n\t\t\tn_name as nation,\n\t\t\tyear(o_orderdate) as o_year,\n\t\t\tl_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount\n\t\tfrom\n\t\t\tpart,\n\t\t\tsupplier,\n\t\t\tlineitem,\n\t\t\tpartsupp,\n\t\t\torders,\n\t\t\tnation\n\t\twhere\n\t\t\ts_suppkey = l_suppkey\n\t\t\tand ps_suppkey = l_suppkey\n\t\t\tand ps_partkey = l_partkey\n\t\t\tand p_partkey = l_partkey\n\t\t\tand o_orderkey = l_orderkey\n\t\t\tand s_nationkey = n_nationkey\n\t\t\tand p_name like \'%green%\'\n\t) as profit\ngroup by\n\tnation,\n\to_year\norder by\n\tnation,\n\to_year desc;\n\n\ncreate materialized view q10\nas select\n\tc_custkey,\n\tc_name,\n\tsum(l_extendedprice * (1 - l_discount)) as revenue,\n\tc_acctbal,\n\tn_name,\n\tc_address,\n\tc_phone,\n\tc_comment\nfrom\n\tcustomer,\n\torders,\n\tlineitem,\n\tnation\nwhere\n\tc_custkey = o_custkey\n\tand l_orderkey = o_orderkey\n\tand o_orderdate >= date \'1993-10-01\'\n\tand o_orderdate < date \'1993-10-01\' + interval \'3\' month\n\tand l_returnflag = \'R\'\n\tand c_nationkey = n_nationkey\ngroup by\n\tc_custkey,\n\tc_name,\n\tc_acctbal,\n\tc_phone,\n\tn_name,\n\tc_address,\n\tc_comment\norder by\n\trevenue desc\nlimit 20;\n'})})]}),"\n",(0,a.jsx)(e.h2,{id:"table-definitions",children:"Table Definitions"}),"\n",(0,a.jsx)(e.p,{children:"We create tables for the TPC-H benchmark, with input connectors configured to\nread data from our S3 bucket, e.g.:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:'-- Feldera SQL\nCREATE TABLE LINEITEM (\n        L_ORDERKEY    INTEGER NOT NULL,\n        L_PARTKEY     INTEGER NOT NULL,\n        L_SUPPKEY     INTEGER NOT NULL,\n        L_LINENUMBER  INTEGER NOT NULL,\n        L_QUANTITY    DECIMAL(15,2) NOT NULL,\n        L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,\n        L_DISCOUNT    DECIMAL(15,2) NOT NULL,\n        L_TAX         DECIMAL(15,2) NOT NULL,\n        L_RETURNFLAG  CHAR(1) NOT NULL,\n        L_LINESTATUS  CHAR(1) NOT NULL,\n        L_SHIPDATE    DATE NOT NULL,\n        L_COMMITDATE  DATE NOT NULL,\n        L_RECEIPTDATE DATE NOT NULL,\n        L_SHIPINSTRUCT CHAR(25) NOT NULL,\n        L_SHIPMODE     CHAR(10) NOT NULL,\n        L_COMMENT      VARCHAR(44) NOT NULL\n) WITH (\n \'connectors\' = \'[{\n    "transport": {\n      "name": "delta_table_input",\n      "config": {\n        "uri": "s3://batchtofeldera/lineitem",\n        "aws_skip_signature": "true",\n        "aws_region": "ap-southeast-2",\n        "mode": "snapshot_and_follow"\n      }\n    }\n }]\'\n);\n'})}),"\n",(0,a.jsx)(e.p,{children:"We use the following Delta Lake connector configuration:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"uri"})," - location of the Delta table."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"aws_skip_signature"})," - disables authentication for the public S3 bucket."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"aws_region"})," - AWS region where the bucket is hosted."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"mode"})," - Delta Lake ingest mode. The ",(0,a.jsx)(e.code,{children:"snapshot_and_follow"})," mode configures the\nconnector to read the current snapshot of the Delta table on pipeline startup,\nand then switch to the ",(0,a.jsx)(e.code,{children:"follow"})," mode, ingesting new updates to the table in\nreal-time."]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["Refer to ",(0,a.jsx)(e.a,{href:"/connectors/sources/delta",children:"Delta Lake Input Connector documentation"}),"\nfor details of Delta Lake connector configuration."]}),"\n",(0,a.jsx)(e.admonition,{type:"note",children:(0,a.jsx)(e.p,{children:"Note that our SQL table declaration explicitly lists table columns and their\ntypes.  In the future Feldera will support extracting these declarations\nautomatically from Delta table metadata."})}),"\n",(0,a.jsx)(e.h2,{id:"view-definitions",children:"View definitions"}),"\n",(0,a.jsx)(e.p,{children:"The TPC-H SQL queries we used with Spark can be used in Feldera without\nmodification, e.g.:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"create materialized view q1\nas select\n\tl_returnflag,\n\tl_linestatus,\n\tsum(l_quantity) as sum_qty,\n\tsum(l_extendedprice) as sum_base_price,\n\tsum(l_extendedprice * (1 - l_discount)) as sum_disc_price,\n\tsum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,\n\tavg(l_quantity) as avg_qty,\n\tavg(l_extendedprice) as avg_price,\n\tavg(l_discount) as avg_disc,\n\tcount(*) as count_order\nfrom\n\tlineitem\nwhere\n\tl_shipdate <= date '1998-12-01' - interval '90' day\ngroup by\n\tl_returnflag,\n\tl_linestatus\norder by\n\tl_returnflag,\n\tl_linestatus;\n"})}),"\n",(0,a.jsx)(e.admonition,{type:"note",children:(0,a.jsx)(e.p,{children:"In general, Feldera is not fully compatible with Spark SQL. Existing Spark SQL queries\nmay require porting to Feldera SQL."})}),"\n",(0,a.jsxs)(e.p,{children:["Note that we declare the view as ",(0,a.jsx)(e.a,{href:"/sql/materialized",children:"materialized"}),", instructing Feldera\nto maintain the complete up-to-date snapshot of the view, that can be queried\nusing ",(0,a.jsx)(e.a,{href:"/sql/ad-hoc",children:"ad-hoc queries"})," as described below."]}),"\n",(0,a.jsx)(e.h2,{id:"backfill",children:"Backfill"}),"\n",(0,a.jsxs)(e.p,{children:["Run the program in the ",(0,a.jsx)(e.a,{href:"https://try.feldera.com",children:"Feldera Sandbox"}),".  It should take\napproximately ",(0,a.jsx)(e.strong,{children:"5 seconds"})," to process all data in the Delta Lake (",(0,a.jsx)(e.strong,{children:"867k records"}),").\nAt this point Feldera has ingested all records in the Delta tables, computed the initial\ncontents of the views, and is ready to process incremental input changes."]}),"\n",(0,a.jsxs)(e.p,{children:["We can inspect ",(0,a.jsx)(e.a,{href:"https://docs.feldera.com/sql/materialized",children:"materialized"})," tables\nand views using ",(0,a.jsx)(e.a,{href:"/sql/ad-hoc",children:"ad-hoc queries"}),", e.g., type the following query in the Ad-Hoc Queries\ntab in the Feldera Web Console:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"SELECT * FROM q1;\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Output:"})}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"l_returnflag"}),(0,a.jsx)(e.th,{children:"l_linestatus"}),(0,a.jsx)(e.th,{children:"sum_qty"}),(0,a.jsx)(e.th,{children:"sum_base_price"}),(0,a.jsx)(e.th,{children:"sum_disc_price"}),(0,a.jsx)(e.th,{children:"sum_charge"}),(0,a.jsx)(e.th,{children:"avg_qty"}),(0,a.jsx)(e.th,{children:"avg_price"}),(0,a.jsx)(e.th,{children:"avg_disc"}),(0,a.jsx)(e.th,{children:"count_order"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"A"}),(0,a.jsx)(e.td,{children:"F"}),(0,a.jsx)(e.td,{children:"3774200"}),(0,a.jsx)(e.td,{children:"5320753880.69"}),(0,a.jsx)(e.td,{children:"5054096266.682"}),(0,a.jsx)(e.td,{children:"5256751331.449"}),(0,a.jsx)(e.td,{children:"25.53"}),(0,a.jsx)(e.td,{children:"36002.12"}),(0,a.jsx)(e.td,{children:"0.05"}),(0,a.jsx)(e.td,{children:"147790"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"N"}),(0,a.jsx)(e.td,{children:"O"}),(0,a.jsx)(e.td,{children:"7459297"}),(0,a.jsx)(e.td,{children:"10512270008.9"}),(0,a.jsx)(e.td,{children:"9986238338.384"}),(0,a.jsx)(e.td,{children:"10385578376.585"}),(0,a.jsx)(e.td,{children:"25.54"}),(0,a.jsx)(e.td,{children:"36000.92"}),(0,a.jsx)(e.td,{children:"0.05"}),(0,a.jsx)(e.td,{children:"292000"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"R"}),(0,a.jsx)(e.td,{children:"F"}),(0,a.jsx)(e.td,{children:"3785523"}),(0,a.jsx)(e.td,{children:"5337950526.47"}),(0,a.jsx)(e.td,{children:"5071818532.942"}),(0,a.jsx)(e.td,{children:"5274405503.049"}),(0,a.jsx)(e.td,{children:"25.52"}),(0,a.jsx)(e.td,{children:"35994.02"}),(0,a.jsx)(e.td,{children:"0.04"}),(0,a.jsx)(e.td,{children:"148301"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"N"}),(0,a.jsx)(e.td,{children:"F"}),(0,a.jsx)(e.td,{children:"95257"}),(0,a.jsx)(e.td,{children:"133737795.84"}),(0,a.jsx)(e.td,{children:"127132372.651"}),(0,a.jsx)(e.td,{children:"132286291.229"}),(0,a.jsx)(e.td,{children:"25.3"}),(0,a.jsx)(e.td,{children:"35521.32"}),(0,a.jsx)(e.td,{children:"0.04"}),(0,a.jsx)(e.td,{children:"3765"})]})]})]}),"\n",(0,a.jsx)(e.h2,{id:"incremental-changes",children:"Incremental changes"}),"\n",(0,a.jsxs)(e.p,{children:["We have configured the Delta Lake connectors in the ",(0,a.jsx)(e.code,{children:"snapshot_and_follow"})," mode,\nwhich ingests changes from the transaction log of the Delta table in real-time\nfollowing initial backfill. Unfortunately, the tables in our demo are static, so we\nwill not observe any changes this way. Instead we demonstrate incremental\ncomputation by using ad hoc queries to add a new ",(0,a.jsx)(e.code,{children:"LINEITEM"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"INSERT INTO LINEITEM VALUES (1, 5, 4, 1, 50, 0.80, 0.65, 0.10, 'B', 'C', '1998-09-01', '1998-09-01', '1998-09-01', 'DELIVER IN PERSON', 'TRUCK', 'new record insertion')\n"})}),"\n",(0,a.jsx)(e.p,{children:"This query completes instantly, returning the number of inserted records:"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsx)(e.tr,{children:(0,a.jsx)(e.th,{children:"count"})})}),(0,a.jsx)(e.tbody,{children:(0,a.jsx)(e.tr,{children:(0,a.jsx)(e.td,{children:"1"})})})]}),"\n",(0,a.jsxs)(e.p,{children:["At this point Feldera has added the new record to the input table and incementally\nupdated all views affected by the change.  We can for instance view the updated output\nof ",(0,a.jsx)(e.code,{children:"q1"}),":"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"SELECT * FROM q1;\n"})}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"l_returnflag"}),(0,a.jsx)(e.th,{children:"l_linestatus"}),(0,a.jsx)(e.th,{children:"sum_qty"}),(0,a.jsx)(e.th,{children:"sum_base_price"}),(0,a.jsx)(e.th,{children:"sum_disc_price"}),(0,a.jsx)(e.th,{children:"sum_charge"}),(0,a.jsx)(e.th,{children:"avg_qty"}),(0,a.jsx)(e.th,{children:"avg_price"}),(0,a.jsx)(e.th,{children:"avg_disc"}),(0,a.jsx)(e.th,{children:"count_order"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"A"}),(0,a.jsx)(e.td,{children:"F"}),(0,a.jsx)(e.td,{children:"3774200"}),(0,a.jsx)(e.td,{children:"5320753880.69"}),(0,a.jsx)(e.td,{children:"5054096266.682"}),(0,a.jsx)(e.td,{children:"5256751331.449"}),(0,a.jsx)(e.td,{children:"25.53"}),(0,a.jsx)(e.td,{children:"36002.12"}),(0,a.jsx)(e.td,{children:"0.05"}),(0,a.jsx)(e.td,{children:"147790"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"N"}),(0,a.jsx)(e.td,{children:"O"}),(0,a.jsx)(e.td,{children:"7459297"}),(0,a.jsx)(e.td,{children:"10512270008.9"}),(0,a.jsx)(e.td,{children:"9986238338.384"}),(0,a.jsx)(e.td,{children:"10385578376.585"}),(0,a.jsx)(e.td,{children:"25.54"}),(0,a.jsx)(e.td,{children:"36000.92"}),(0,a.jsx)(e.td,{children:"0.05"}),(0,a.jsx)(e.td,{children:"292000"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"R"}),(0,a.jsx)(e.td,{children:"F"}),(0,a.jsx)(e.td,{children:"3785523"}),(0,a.jsx)(e.td,{children:"5337950526.47"}),(0,a.jsx)(e.td,{children:"5071818532.942"}),(0,a.jsx)(e.td,{children:"5274405503.049"}),(0,a.jsx)(e.td,{children:"25.52"}),(0,a.jsx)(e.td,{children:"35994.02"}),(0,a.jsx)(e.td,{children:"0.04"}),(0,a.jsx)(e.td,{children:"148301"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"N"}),(0,a.jsx)(e.td,{children:"F"}),(0,a.jsx)(e.td,{children:"95257"}),(0,a.jsx)(e.td,{children:"133737795.84"}),(0,a.jsx)(e.td,{children:"127132372.651"}),(0,a.jsx)(e.td,{children:"132286291.229"}),(0,a.jsx)(e.td,{children:"25.3"}),(0,a.jsx)(e.td,{children:"35521.32"}),(0,a.jsx)(e.td,{children:"0.04"}),(0,a.jsx)(e.td,{children:"3765"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"B"}),(0,a.jsx)(e.td,{children:"C"}),(0,a.jsx)(e.td,{children:"50"}),(0,a.jsx)(e.td,{children:"0.80"}),(0,a.jsx)(e.td,{children:"0.28"}),(0,a.jsx)(e.td,{children:"0.308"}),(0,a.jsx)(e.td,{children:"50"}),(0,a.jsx)(e.td,{children:"0.80"}),(0,a.jsx)(e.td,{children:"0.65"}),(0,a.jsx)(e.td,{children:"1"})]})]})]}),"\n",(0,a.jsx)(e.p,{children:"Note the new row that has been added to the view."}),"\n",(0,a.jsx)(e.p,{children:"Recall that with Spark, every input change, no matter how small, required running the\nentire batch job from scratch."}),"\n",(0,a.jsx)(e.p,{children:"There is another way to observe incremental changes in Feldera. Select the set of views\nyou are interested in in the Changes Stream tab in the Web Console and insert more records\nusing ad-hoc queries.  The corresponding changes will show up in the Change Stream tab."}),"\n",(0,a.jsx)(e.h2,{id:"takeaways",children:"Takeaways"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["We converted the Spark batch job into an ",(0,a.jsx)(e.strong,{children:"always-on"}),", incremental pipeline."]}),"\n",(0,a.jsxs)(e.li,{children:["We demonstrated incremental computation by adding a new record and ",(0,a.jsx)(e.strong,{children:"instantly"}),"\nobserving changes in the output the view, without needing to re-run the pipeline."]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"In the next part of this tutorial, we will demonstrate how to orchestrate different input\nconnectors in order to ingest historical and real-time data from multiple\nsources."})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}}}]);