"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[7838],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var r=i(96540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},88449:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"use_cases/fine_grained_authorization/static","title":"Implementing a static FGA model","description":"In this section we will implement the file manager authorization model using Feldera.","source":"@site/docs/use_cases/fine_grained_authorization/static.md","sourceDirName":"use_cases/fine_grained_authorization","slug":"/use_cases/fine_grained_authorization/static","permalink":"/use_cases/fine_grained_authorization/static","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Use Case: Fine-Grained Authorization","permalink":"/use_cases/fine_grained_authorization/intro"},"next":{"title":"Implementing a dynamic FGA model","permalink":"/use_cases/fine_grained_authorization/dynamic"}}');var t=i(74848),a=i(28453);const s={},l="Implementing a static FGA model",o={},d=[{value:"Modeling the object graph",id:"modeling-the-object-graph",level:2},{value:"Implementing rules",id:"implementing-rules",level:2},{value:"Kicking the tires",id:"kicking-the-tires",level:2},{value:"Running at full speed",id:"running-at-full-speed",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"implementing-a-static-fga-model",children:"Implementing a static FGA model"})}),"\n",(0,t.jsx)(n.p,{children:"In this section we will implement the file manager authorization model using Feldera.\nWe model objects, relationships, and rules described above as SQL tables and views. We\nwill see how FGA rules naturally lend themselves to implementation as SQL queries.\nWe will also see how Feldera can evaluate these queries efficiently and\nincrementally at scale."}),"\n",(0,t.jsx)(n.p,{children:"The approach we take here works best when the authorization model is co-designed with\nthe application and doesn't change at runtime: the application can create and destroy\nusers, groups, and files, but not change the access control rules."}),"\n",(0,t.jsxs)(n.p,{children:["The implementation described in this section is available as a ",(0,t.jsx)(n.a,{href:"https://try.feldera.com/create/?name=fine-grained-auth",children:"pre-packaged example\nin the Feldera online sandbox"})," as well\nas in your local Feldera installation."]}),"\n",(0,t.jsx)(n.h2,{id:"modeling-the-object-graph",children:"Modeling the object graph"}),"\n",(0,t.jsx)(n.p,{children:"We start with modeling the three object types\u2014users, groups, and files\u2014as SQL tables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create table users (\n    id bigint not null primary key,\n    name string,\n    is_banned bool\n) with ('materialized' = 'true');\n\ncreate table groups (\n    id bigint not null primary key,\n    name string\n) with ('materialized' = 'true');\n\ncreate table files (\n    id bigint not null primary key,\n    name string,\n    -- Parent folder id; NULL for a root folder.\n    parent_id bigint\n) with ('materialized' = 'true');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note that the ",(0,t.jsx)(n.code,{children:"parent_id"})," field models the ",(0,t.jsx)(n.code,{children:"parent"})," relationship between files."]}),"\n",(0,t.jsxs)(n.p,{children:["Next, we model ",(0,t.jsx)(n.code,{children:"member"}),", ",(0,t.jsx)(n.code,{children:"editor"}),", and ",(0,t.jsx)(n.code,{children:"viewer"})," relationships:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Member relationship models user membership in groups.\ncreate table members (\n    id bigint not null primary key,\n    user_id  bigint not null,\n    group_id bigint not null\n) with ('materialized' = 'true');\n\n-- Editor relationship between a group and a file that gives the group the permission\n-- to read or write the file.\ncreate table group_file_editor (\n    group_id bigint not null,\n    file_id bigint not null\n) with ('materialized' = 'true');\n\n-- Viewer relationship between a group and a file that gives the group the permission to read the file.\ncreate table group_file_viewer (\n    group_id bigint not null,\n    file_id bigint not null\n) with ('materialized' = 'true');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementing-rules",children:"Implementing rules"}),"\n",(0,t.jsxs)(n.p,{children:["So far, we've defined objects and relationships that comprise the object graph of our application.\nWe are now ready to implement derived relationships.  We start with the ",(0,t.jsx)(n.code,{children:"group-can-write"}),"\nrelationship defined by the following two rules."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 1:"})," ",(0,t.jsx)(n.code,{children:"editor(group, file) -> group-can-write(group, file)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 2:"})," ",(0,t.jsx)(n.code,{children:"group-can-write(group, file1) and parent(file1, file2) -> group-can-write(group, file2)"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In Rule 2 ",(0,t.jsx)(n.code,{children:"group-can-write"})," appears on both sides of the implication, indicating that this is a\nrecursive relationship. Rule 1 specifies the base case: a group has write access to all files\nfor which it is an editor. Rule 2 defines the recursive step: write permissions propagate from a\nfile to all its children.  We implement these rules as a recursive SQL view:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"declare recursive view group_can_write (\n    group_id bigint not null,\n    file_id bigint not null\n);\n\ncreate materialized view group_can_write as\n-- Rule 1: editor(group, file) -> group-can-write(group, file).\n(\n  select group_id, file_id from group_file_editor\n)\nunion all\n-- Rule 2: group-can-write(group, file1) and parent(file1, file2) -> group-can-write(group, file2).\n(\n  select\n    group_can_write.group_id,\n    files.id as file_id\n  from\n    group_can_write join files on group_can_write.file_id = files.parent_id\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Rules for the ",(0,t.jsx)(n.code,{children:"group-can-read"})," relationship have a similar structure, with one additional\nrule (Rule 4), which states that the write permission to a file (",(0,t.jsx)(n.code,{children:"group-can-write"}),") implies\nthe read permission ",(0,t.jsx)(n.code,{children:"group-can-read"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 3:"})," ",(0,t.jsx)(n.code,{children:"viewer(group, file) -> group-can-read(group, file)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 4:"})," ",(0,t.jsx)(n.code,{children:"group-can-write(group, file) -> group-can-read(group, file)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 5:"})," ",(0,t.jsx)(n.code,{children:"group-can-read(group, file1) and parent(file1, file2) -> group-can-read(group, file2)"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"declare recursive view group_can_read (\n    group_id bigint not null,\n    file_id bigint not null\n);\n\ncreate materialized view group_can_read as\n-- Rule 3: viewer(group, file) -> group-can-read(group, file).\n(\n  select group_id, file_id from group_file_viewer\n)\nunion all\n-- Rule 4: group-can-write(group, file) -> group-can-read(group, file).\n(\n  select group_id, file_id from group_can_write\n)\nunion all\n-- Rule 5: group-can-read(group, file1) and parent(file1, file2) -> group-can-read(group, file2).\n(\n  select\n    group_can_read.group_id,\n    files.id as file_id\n from\n    group_can_read join files on group_can_read.file_id = files.parent_id\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, we implement ",(0,t.jsx)(n.code,{children:"user-can-write"})," and ",(0,t.jsx)(n.code,{children:"user-can-read"})," relationships:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 6:"})," ",(0,t.jsx)(n.code,{children:"member(user, group) and group-can-write(group, file) and (not user.is_banned) -> user-can-write(user, file)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rule 7:"})," ",(0,t.jsx)(n.code,{children:"member(user, group) and group-can-read(group, file) and (not user.is_banned) -> user-can-read(user, file)"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Rule 6: member(user, group) and group-can-write(group, file) and (not user.is_banned) -> user-can-write(user, file).\ncreate materialized view user_can_write as\nselect distinct\n    members.user_id,\n    group_can_write.file_id\nfrom\n    members\n    join group_can_write on members.group_id = group_can_write.group_id\n    join users on users.id = members.user_id\nwhere not users.is_banned;\n\n-- Rule 7: member(user, group) and group-can-read(group, file) and (not user.is_banned) -> user-can-read(user, file).\ncreate materialized view user_can_read as\nselect distinct\n    members.user_id,\n    group_can_read.file_id\nfrom\n    members\n    join group_can_read on members.group_id = group_can_read.group_id\n    join users on users.id = members.user_id\nwhere not users.is_banned;\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is it! With a few lines of SQL we implemented an incremental recursive FGA engine."}),"\n",(0,t.jsx)(n.h2,{id:"kicking-the-tires",children:"Kicking the tires"}),"\n",(0,t.jsxs)(n.p,{children:["Copy the complete SQL code below to the Feldera Web Console (or click ",(0,t.jsx)(n.code,{children:"Run"})," to open it in the Feldera\nonline sandbox)."]}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:" Expand to see full SQL code "}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"create table users (\n    id bigint not null primary key,\n    name string,\n    is_banned bool\n) with ('materialized' = 'true');\n\ncreate table groups (\n    id bigint not null primary key,\n    name string\n) with ('materialized' = 'true');\n\ncreate table files (\n    id bigint not null primary key,\n    name string,\n    -- Parent folder id when not NULL\n    parent_id bigint\n) with ('materialized' = 'true');\n\n-- Member relationship models user membership in groups.\ncreate table members (\n    id bigint not null primary key,\n    user_id  bigint not null,\n    group_id bigint not null\n) with ('materialized' = 'true');\n\n-- Editor relationship between a group and a file that gives the group the permission\n-- to read or write the file.\ncreate table group_file_editor (\n    group_id bigint not null,\n    file_id bigint not null\n) with ('materialized' = 'true');\n\n-- Viewer relationship between a group and a file that gives the group the permission to read the file.\ncreate table group_file_viewer (\n    group_id bigint not null,\n    file_id bigint not null\n) with ('materialized' = 'true');\n\ndeclare recursive view group_can_write (\n    group_id bigint not null,\n    file_id bigint not null\n);\n\ncreate materialized view group_can_write as\n-- Rule 1: editor(group, file) -> group-can-write(group, file).\n(\n  select group_id, file_id from group_file_editor\n)\nunion all\n-- Rule 2: group-can-write(group, file1) and parent(file1, file2) -> group-can-write(group, file2).\n(\n  select\n    group_can_write.group_id,\n    files.id as file_id\n  from\n    group_can_write join files on group_can_write.file_id = files.parent_id\n);\n\ndeclare recursive view group_can_read (\n    group_id bigint not null,\n    file_id bigint not null\n);\n\ncreate materialized view group_can_read as\n-- Rule 3: viewer(group, file) -> group-can-read(group, file).\n(\n  select group_id, file_id from group_file_viewer\n)\nunion all\n-- Rule 4: group-can-write(group, file) -> group-can-read(group, file).\n(\n  select group_id, file_id from group_can_write\n)\nunion all\n-- Rule 5: group-can-read(group, file1) and parent(file1, file2) -> group-can-read(group, file2).\n(\n  select\n    group_can_read.group_id,\n    files.id as file_id\n from\n    group_can_read join files on group_can_read.file_id = files.parent_id\n);\n\n-- Rule 6: member(user, group) and group-can-write(group, file) and (not user.is_banned) -> user-can-write(user, file).\ncreate materialized view user_can_write as\nselect distinct\n    members.user_id,\n    group_can_write.file_id\nfrom\n    members\n    join group_can_write on members.group_id = group_can_write.group_id\n    join users on users.id = members.user_id\nwhere not users.is_banned;\n\n-- Rule 7: member(user, group) and group-can-read(group, file) and (not user.is_banned) -> user-can-read(user, file).\ncreate materialized view user_can_read as\nselect distinct\n    members.user_id,\n    group_can_read.file_id\nfrom\n    members\n    join group_can_read on members.group_id = group_can_read.group_id\n    join users on users.id = members.user_id\nwhere not users.is_banned;\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:["Start the pipeline and populate the object graph to match the ",(0,t.jsx)(n.a,{href:"intro#object-graph",children:"example"})," by issuing the following\nad hoc queries:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"insert into users values\n    (1, 'emily', false),\n    (2, 'irene', false),\n    (3, 'adam', true);\n\ninsert into groups values\n    (1, 'engineering'),\n    (2, 'it'),\n    (3, 'accounting');\n\ninsert into files values\n    (1, 'designs', NULL),\n    (2, 'financials', NULL),\n    (3, 'f1', 1),\n    (4, 'f2', 1),\n    (5, 'f3', 2);\n\ninsert into members values\n    (1, 1, 1), -- emily is in engineering\n    (2, 2, 2), -- irene is in IT\n    (3, 3, 3); -- adam is in accounting\n\ninsert into group_file_editor values\n    (1, 1),         -- 'engineering' can edit 'designs'\n    (2, 1), (2, 2), -- 'it' can edit 'designs' and 'financials'\n    (3, 2);         -- 'accounting' can edit 'financials'.\n\ninsert into group_file_viewer values\n    (3, 1); -- 'accounting' can view 'designs'.\n"})}),"\n",(0,t.jsx)(n.p,{children:"We can now validate the output of the program, e.g.:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"select\n  users.name as user_name,\n  files.name as file_name\nfrom\n  user_can_read\n  join users on users.id = user_can_read.user_id\n  join files on files.id = user_can_read.file_id;\n"})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"user_name"}),(0,t.jsx)(n.th,{children:"file_name"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"emily"}),(0,t.jsx)(n.td,{children:"designs"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"irene"}),(0,t.jsx)(n.td,{children:"designs"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"irene"}),(0,t.jsx)(n.td,{children:"financials"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"irene"}),(0,t.jsx)(n.td,{children:"f3"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"emily"}),(0,t.jsx)(n.td,{children:"f1"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"irene"}),(0,t.jsx)(n.td,{children:"f1"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"emily"}),(0,t.jsx)(n.td,{children:"f2"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"irene"}),(0,t.jsx)(n.td,{children:"f2"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["As expected, ",(0,t.jsx)(n.code,{children:"emily"}),", being a member of ",(0,t.jsx)(n.code,{children:"engineering"}),", has read access to all files under the ",(0,t.jsx)(n.code,{children:"designs"})," folder,\nwhile ",(0,t.jsx)(n.code,{children:"irene"}),", a member of ",(0,t.jsx)(n.code,{children:"it"}),", can read files under both ",(0,t.jsx)(n.code,{children:"designs"})," and ",(0,t.jsx)(n.code,{children:"financials"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Next we make an incremental change to the object graph, adding ",(0,t.jsx)(n.code,{children:"emily"})," to the ",(0,t.jsx)(n.code,{children:"it"})," group:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"insert into members values (4, 1, 2);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Running the ",(0,t.jsx)(n.code,{children:"select"})," query above will return two ",(0,t.jsx)(n.em,{children:"additional"})," rows:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"user_name"}),(0,t.jsx)(n.th,{children:"file_name"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"emily"}),(0,t.jsx)(n.td,{children:"financials"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"emily"}),(0,t.jsx)(n.td,{children:"f3"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"running-at-full-speed",children:"Running at full speed"}),"\n",(0,t.jsx)(n.p,{children:"The SQL code below demonstrates the same program as before, but now configured\nwith a data generator that builds a random object graph with 1,000 users, 100 groups,\n100 top-level folders, 1,000 sub-folders, and 100,000 files randomly distributed\nacross the sub-folders. The generator runs continuously, dynamically updating the\nrandom set of 100,000 files. Additionally, it continuously modifies user group\nmemberships."}),"\n",(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:" Expand to see full SQL code "}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'create table users (\n    id bigint not null primary key,\n    name string,\n    is_banned bool\n) with (\n  \'materialized\' = \'true\',\n  -- Generate 1000 random users\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 1000,\n            "fields": {\n                "name": { "strategy": "name" }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n\ncreate table groups (\n    id bigint not null primary key,\n    name string\n) with (\n  \'materialized\' = \'true\',\n  -- Generate 100 random groups\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 100,\n            "fields": {\n                "name": { "strategy": "word" }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n\ncreate table files (\n    id bigint not null primary key,\n    name string,\n    -- Parent folder id when not NULL\n    parent_id bigint\n) with (\n  \'materialized\' = \'true\',\n  -- Generate a file hierarchy with 100 top-level folders, 1,000 sub-folders, and 100,000 files\n  -- randomly distributed across sub-folders. The generator will continue running indefinitely\n  -- randomly updating the 100,000 files.\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 100,\n            "fields": {\n                "id": { "range": [0, 100] },\n                "name": { "strategy": "word" },\n                "parent_id": { "null_percentage": 100 }\n            }\n        },\n        {\n            "limit": 1000,\n            "fields": {\n                "id": { "range": [100, 1100] },\n                "name": { "strategy": "word" },\n                "parent_id": { "range": [0,100] }\n            }\n        },\n        {\n            "fields": {\n                "id": { "range": [1100, 101100] },\n                "name": { "strategy": "word" },\n                "parent_id": { "range": [100,1100], "strategy": "uniform" }\n            }\n        }\n        ]\n      }\n    }\n  }]\'\n);\n\n-- Member relationship models user membership in groups.\ncreate table members (\n    id bigint not null primary key,\n    user_id  bigint not null,\n    group_id bigint not null\n) with (\n  \'materialized\' = \'true\',\n  -- Assign each use to 3 randomly selected groups. The generator will continue running indefinitely\n  -- randomly re-assigning users to groups.\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "rate": 1000,\n            "fields": {\n                "id": { "range": [0,3000] },\n                "user_id": {"range": [0, 1000], "strategy": "zipf"},\n                "group_id": {"range": [0, 100], "strategy": "zipf"}\n            }\n        }]\n      }\n    }\n  }]\'\n);\n\n-- Editor relationship between a group and a file that gives the group the permission\n-- to read or write the file.\ncreate table group_file_editor (\n    group_id bigint not null,\n    file_id bigint not null\n) with (\n  \'materialized\' = \'true\',\n  -- Randomly assign one group as an editor to each top-level folder.\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 100,\n            "fields": {\n                "group_id": {"range": [0, 100], "strategy": "uniform"},\n                "file_id": {"range": [0, 100] }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n\n-- Viewer relationship between a group and a file that gives the group the permission to read the file.\ncreate table group_file_viewer (\n    group_id bigint not null,\n    file_id bigint not null\n) with (\n  \'materialized\' = \'true\',\n  -- Give viewer permissions to 10 randomly selected subfolders to each user group.\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 1000,\n            "fields": {\n                "group_id": {"range": [0, 100]},\n                "file_id": {"range": [100, 1100], "strategy": "uniform" }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n\ndeclare recursive view group_can_write (\n    group_id bigint not null,\n    file_id bigint not null\n);\n\ncreate materialized view group_can_write as\n-- Rule 1: editor(group, file) -> group-can-write(group, file).\n(\n  select group_id, file_id from group_file_editor\n)\nunion all\n-- Rule 2: group-can-write(group, file1) and parent(file1, file2) -> group-can-write(group, file2).\n(\n  select\n    group_can_write.group_id,\n    files.id as file_id\n  from\n    group_can_write join files on group_can_write.file_id = files.parent_id\n);\n\ndeclare recursive view group_can_read (\n    group_id bigint not null,\n    file_id bigint not null\n);\n\ncreate materialized view group_can_read as\n-- Rule 3: viewer(group, file) -> group-can-read(group, file).\n(\n  select group_id, file_id from group_file_viewer\n)\nunion all\n-- Rule 4: group-can-write(group, file) -> group-can-read(group, file).\n(\n  select group_id, file_id from group_can_write\n)\nunion all\n-- Rule 5: group-can-read(group, file1) and parent(file1, file2) -> group-can-read(group, file2).\n(\n  select\n    group_can_read.group_id,\n    files.id as file_id\n from\n    group_can_read join files on group_can_read.file_id = files.parent_id\n);\n\n-- Rule 6: member(user, group) and group-can-write(group, file) and (not user.is_banned) -> user-can-write(user, file).\ncreate materialized view user_can_write as\nselect distinct\n    members.user_id,\n    group_can_write.file_id\nfrom\n    members\n    join group_can_write on members.group_id = group_can_write.group_id\n    join users on users.id = members.user_id\nwhere not users.is_banned;\n\n-- Rule 7: member(user, group) and group-can-read(group, file) and (not user.is_banned) -> user-can-read(user, file).\ncreate materialized view user_can_read as\nselect distinct\n    members.user_id,\n    group_can_read.file_id\nfrom\n    members\n    join group_can_read on members.group_id = group_can_read.group_id\n    join users on users.id = members.user_id\nwhere not users.is_banned;\n'})})]}),"\n",(0,t.jsx)(n.p,{children:"Running on a MacBook Pro with M3 Max CPU, this program achieves sustained throughput of 115K updates/s,\nmeaning that it processes 115K object graph changes/s and updates all derived relationships."})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);