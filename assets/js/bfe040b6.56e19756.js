"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[9528],{15110:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/dbsp-workflow-9cc9eb0f105d3bcb0ef6beb2567459af.png"},24266:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"sql/intro","title":"Introduction","description":"Documentation sources","source":"@site/docs/sql/intro.mdx","sourceDirName":"sql","slug":"/sql/intro","permalink":"/sql/intro","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=s(74848),a=s(28453);const r={},o="Introduction",c={},d=[{value:"Documentation sources",id:"documentation-sources",level:2},{value:"Feldera, DBSP and incremental view maintenance",id:"feldera-dbsp-and-incremental-view-maintenance",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Supported SQL Constructs",id:"supported-sql-constructs",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.h2,{id:"documentation-sources",children:"Documentation sources"}),"\n",(0,i.jsxs)(n.p,{children:["Parts of this documentation are adapted from the Postgres Database\ndocumentation, governed by the ",(0,i.jsx)(n.a,{href:"https://postgrespro.com/postgresql_license",children:"Postgres\nlicense"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Parts of this documentation are adapted from the Calcite\ndocumentation, governed by the ",(0,i.jsx)(n.a,{href:"https://github.com/apache/calcite/blob/main/LICENSE",children:"Apache 2.0\nLicense"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"feldera-dbsp-and-incremental-view-maintenance",children:"Feldera, DBSP and incremental view maintenance"}),"\n",(0,i.jsxs)(n.p,{children:["Feldera's implementation is based on a query engine optimized\nfor ",(0,i.jsx)(n.em,{children:"incremental view maintenance"}),". This engine is called Database Stream\nProcessor, DBSP."]}),"\n",(0,i.jsx)(n.p,{children:"Feldera is used in the following way:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["users define a set of database tables in Feldera. These tables\nbecome ",(0,i.jsx)(n.em,{children:"inputs"})," for DBSP."]}),"\n",(0,i.jsxs)(n.li,{children:["users define a set of database views.  The views become ",(0,i.jsx)(n.em,{children:"outputs"})," for DBSP\n(unless they are declared as being ",(0,i.jsx)(n.code,{children:"LOCAL"}),").\nThe views are implemented in standard SQL, and compiled to Rust using the\nSQL to DBSP compiler."]}),"\n",(0,i.jsx)(n.li,{children:"the compiled DBSP program is started"}),"\n",(0,i.jsx)(n.li,{children:"DBSP assumes that the tables are initially empty"}),"\n",(0,i.jsxs)(n.li,{children:["users inform DBSP of any ",(0,i.jsx)(n.em,{children:"changes"})," of the input tables"]}),"\n",(0,i.jsxs)(n.li,{children:["in response DBSP computes the ",(0,i.jsx)(n.em,{children:"changes"})," to the output views caused\nby these changes and emits them as outputs"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A DBSP program behaves as a ",(0,i.jsx)(n.em,{children:"streaming system"}),".  A stream is simply a\nsequence of changes.  Thus DBSP implements ",(0,i.jsx)(n.em,{children:"standing queries"}),": the\nqueries are installed prior to the data arrival, and then are\ncontinuously executed for each input change.  A DBSP standing query\ntransforms a stream of input table changes into a stream of output\nview changes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Compiler workflow",src:s(15110).A+"",width:"853",height:"344"})}),"\n",(0,i.jsx)(n.p,{children:"Notice that an input change can affect multiple tables.  Moreover,\ninput changes can contain both insertions and deletions from the input\ntables.  Similarly, for each input change there is a corresponding\noutput change that affects all output views.  Changes in the output\nviews are specified in terms of insertions and deletions."}),"\n",(0,i.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsx)(n.p,{children:"DBSP is not a database, it is just a query engine.  DBSP is not\ndesigned to replace a standard database, but to work in conjunction\nwith an existing one."}),"\n",(0,i.jsx)(n.p,{children:"Differences between DBSP and a database:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"DBSP queries are standing queries, and are designed to be executed\ncontinuously."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A traditional database offers durable storage of data.  In general,\nDBSP does store the contents of the data, either for the tables or\nthe defined views.  DBSP will only store sufficient data to compute\nthe changes.  DBSP ",(0,i.jsx)(n.em,{children:"can"})," be configured to store the data for tables\nand views."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"DBSP does not currently provide any concurrency control mechanisms,\nor transactions.  DBSP is simply a stream processing engine, where\neach input change produces a corresponding output change."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Other traditional database constructs, such as triggers, or\nmulti-version concurrency control, do not make sense for a system\nlike DBSP."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"supported-sql-constructs",children:"Supported SQL Constructs"}),"\n",(0,i.jsx)(n.p,{children:"Feldera offers a powerful set of features:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"A rich set of data types, including the standard SQL datatypes,\ndates, times, intervals, arrays, maps, user-defined types, variant"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Arbitrary SQL queries, including the standard relational algebra,\n",(0,i.jsx)(n.code,{children:"GROUP BY"}),", aggregations, user-defined functions, joins of several\nflavors, ",(0,i.jsx)(n.code,{children:"UNNEST"}),", and window queries"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Feldera uses a different syntax (and semantics!) than standard SQL\nfor ",(0,i.jsx)(n.a,{href:"/sql/recursion",children:"recursive queries"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Feldera provides some small extensions to SQL which make writing\nprograms for ",(0,i.jsx)(n.a,{href:"/sql/streaming",children:"streaming"})," data more convenient"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"There are many good introductions to SQL on the Internet.  This\ndocument is not intended as a tutorial, but only as a specification of\nthe features of SQL implemented on top of DBSP."}),"\n",(0,i.jsx)(n.p,{children:"SQL as a language has been standardized for a long time.\nUnfortunately, the standard leaves underspecified many important\nbehaviors. Thus each SQL implementation is slightly different."}),"\n",(0,i.jsxs)(n.p,{children:["The SQL to DBSP compiler is implemented on top of the ",(0,i.jsx)(n.a,{href:"https://calcite.apache.org/",children:"Apache\nCalcite"})," infrastructure. While Calcite is\na very flexible and customizable platform, it makes several choices\nregarding the SQL language semantics. Our implementation mostly\nfollows these choices. This document describes specifics of our\nimplementation."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(96540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);