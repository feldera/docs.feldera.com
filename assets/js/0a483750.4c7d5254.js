"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[8607],{13388:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"type":"api","id":"push-data-to-a-sql-table","title":"Push data to a SQL table.","description":"","slug":"/push-data-to-a-sql-table","frontMatter":{},"api":{"tags":["Pipeline interaction"],"description":"The client sends data encoded using the format specified in the `?format=`\\nparameter as a body of the request.  The contents of the data must match\\nthe SQL table schema specified in `table_name`\\n\\nThe pipeline ingests data as it arrives without waiting for the end of\\nthe request.  Successful HTTP response indicates that all data has been\\ningested successfully.\\n\\nOn success, returns a completion token that can be passed to the\\n\'/completion_status\' endpoint to check whether the pipeline has fully\\nprocessed the data.","operationId":"http_input","parameters":[{"name":"pipeline_name","in":"path","description":"Unique pipeline name","required":true,"schema":{"type":"string"}},{"name":"table_name","in":"path","description":"SQL table name. Unquoted SQL names have to be capitalized. Quoted SQL names have to exactly match the case from the SQL program.","required":true,"schema":{"type":"string"}},{"name":"force","in":"query","description":"When `true`, push data to the pipeline even if the pipeline is paused. The default value is `false`","required":true,"schema":{"type":"boolean"}},{"name":"format","in":"query","description":"Input data format, e.g., \'csv\' or \'json\'.","required":true,"schema":{"type":"string"}},{"name":"array","in":"query","description":"Set to `true` if updates in this stream are packaged into JSON arrays (used in conjunction with `format=json`). The default values is `false`.","required":false,"schema":{"type":"boolean","nullable":true}},{"name":"update_format","in":"query","description":"JSON data change event format (used in conjunction with `format=json`).  The default value is \'insert_delete\'.","required":false,"schema":{"nullable":true,"type":"string","description":"Supported JSON data change event formats.\\n\\nEach element in a JSON-formatted input stream specifies\\nan update to one or more records in an input table.  We support\\nseveral different ways to represent such updates.\\n\\n### `InsertDelete`\\n\\nEach element in the input stream consists of an \\"insert\\" or \\"delete\\"\\ncommand and a record to be inserted to or deleted from the input table.\\n\\n```json\\n{\\"insert\\": {\\"column1\\": \\"hello, world!\\", \\"column2\\": 100}}\\n```\\n\\n### `Weighted`\\n\\nEach element in the input stream consists of a record and a weight\\nwhich indicates how many times the row appears.\\n\\n```json\\n{\\"weight\\": 2, \\"data\\": {\\"column1\\": \\"hello, world!\\", \\"column2\\": 100}}\\n```\\n\\nNote that the line above would be equivalent to the following input in the `InsertDelete` format:\\n\\n```json\\n{\\"insert\\": {\\"column1\\": \\"hello, world!\\", \\"column2\\": 100}}\\n{\\"insert\\": {\\"column1\\": \\"hello, world!\\", \\"column2\\": 100}}\\n```\\n\\nSimilarly, negative weights are equivalent to deletions:\\n\\n```json\\n{\\"weight\\": -1, \\"data\\": {\\"column1\\": \\"hello, world!\\", \\"column2\\": 100}}\\n```\\n\\nis equivalent to in the `InsertDelete` format:\\n\\n```json\\n{\\"delete\\": {\\"column1\\": \\"hello, world!\\", \\"column2\\": 100}}\\n```\\n\\n### `Debezium`\\n\\nDebezium CDC format.  Refer to [Debezium input connector documentation](https://docs.feldera.com/connectors/sources/debezium) for details.\\n\\n### `Snowflake`\\n\\nUses flat structure so that fields can get parsed directly into SQL\\ncolumns.  Defines three metadata fields:\\n\\n* `__action` - \\"insert\\" or \\"delete\\"\\n* `__stream_id` - unique 64-bit ID of the output stream (records within\\na stream are totally ordered)\\n* `__seq_number` - monotonically increasing sequence number relative to\\nthe start of the stream.\\n\\n```json\\n{\\"PART\\":1,\\"VENDOR\\":2,\\"EFFECTIVE_SINCE\\":\\"2019-05-21\\",\\"PRICE\\":\\"10000\\",\\"__action\\":\\"insert\\",\\"__stream_id\\":4523666124030717756,\\"__seq_number\\":1}\\n```\\n\\n### `Raw`\\n\\nThis format is suitable for insert-only streams (no deletions).\\nEach element in the input stream contains a record without any\\nadditional envelope that gets inserted in the input table.","enum":["insert_delete","weighted","debezium","snowflake","raw","redis"]}}],"requestBody":{"description":"Input data in the specified format","content":{"text/plain":{"schema":{"type":"string"}}},"required":true},"responses":{"200":{"description":"Data successfully delivered to the pipeline. The body of the response contains a completion token that can be passed to the \'/completion_status\' endpoint to check whether the pipeline has fully processed the data.","content":{"application/json":{"schema":{"type":"object","description":"Response to a completion token creation request.","required":["token"],"properties":{"token":{"type":"string","description":"Completion token.\\n\\nAn opaque string associated with the current position in the input stream\\ngenerated by an input connector.\\nPass this string to the `/completion_status` endpoint to check whether all\\ninputs associated with the token have been fully processed by the pipeline."}}}}}},"400":{"description":"","content":{"application/json":{"schema":{"type":"object","description":"Information returned by REST API endpoints on error.","required":["message","error_code","details"],"properties":{"details":{"type":"object","description":"Detailed error metadata.\\nThe contents of this field is determined by `error_code`."},"error_code":{"type":"string","description":"Error code is a string that specifies this error type.","example":"CodeSpecifyingErrorType"},"message":{"type":"string","description":"Human-readable error message.","example":"Explanation of the error that occurred."}}}}}},"404":{"description":"Pipeline and/or table with that name does not exist","content":{"application/json":{"schema":{"type":"object","description":"Information returned by REST API endpoints on error.","required":["message","error_code","details"],"properties":{"details":{"type":"object","description":"Detailed error metadata.\\nThe contents of this field is determined by `error_code`."},"error_code":{"type":"string","description":"Error code is a string that specifies this error type.","example":"CodeSpecifyingErrorType"},"message":{"type":"string","description":"Human-readable error message.","example":"Explanation of the error that occurred."}}},"examples":{"Pipeline with that name does not exist":{"value":{"message":"Unknown pipeline name \'non-existent-pipeline\'","error_code":"UnknownPipelineName","details":{"pipeline_name":"non-existent-pipeline"}}}}}}},"500":{"description":"","content":{"application/json":{"schema":{"type":"object","description":"Information returned by REST API endpoints on error.","required":["message","error_code","details"],"properties":{"details":{"type":"object","description":"Detailed error metadata.\\nThe contents of this field is determined by `error_code`."},"error_code":{"type":"string","description":"Error code is a string that specifies this error type.","example":"CodeSpecifyingErrorType"},"message":{"type":"string","description":"Human-readable error message.","example":"Explanation of the error that occurred."}}}}}},"503":{"description":"","content":{"application/json":{"schema":{"type":"object","description":"Information returned by REST API endpoints on error.","required":["message","error_code","details"],"properties":{"details":{"type":"object","description":"Detailed error metadata.\\nThe contents of this field is determined by `error_code`."},"error_code":{"type":"string","description":"Error code is a string that specifies this error type.","example":"CodeSpecifyingErrorType"},"message":{"type":"string","description":"Human-readable error message.","example":"Explanation of the error that occurred."}}},"examples":{"Disconnected during response":{"value":{"message":"Error sending HTTP request to pipeline \'my_pipeline\': the pipeline disconnected while it was processing this HTTP request. This could be because the pipeline either (a) encountered a fatal error or panic, (b) was stopped, or (c) experienced network issues -- retrying might help in the last case. Alternatively, check the pipeline logs.\\nFailed request: /pause","error_code":"PipelineInteractionUnreachable","details":{"pipeline_name":"my_pipeline","request":"/pause","error":"the pipeline disconnected while it was processing this HTTP request. This could be because the pipeline either (a) encountered a fatal error or panic, (b) was stopped, or (c) experienced network issues -- retrying might help in the last case. Alternatively, check the pipeline logs."}}},"Pipeline is currently unavailable":{"value":{"message":"Error sending HTTP request to pipeline \'my_pipeline\': deployment status is currently \'unavailable\' -- wait for it to become \'running\' or \'paused\' again\\nFailed request: /pause","error_code":"PipelineInteractionUnreachable","details":{"pipeline_name":"my_pipeline","request":"/pause","error":"deployment status is currently \'unavailable\' -- wait for it to become \'running\' or \'paused\' again"}}},"Pipeline is not deployed":{"value":{"message":"Unable to interact with pipeline \'my_pipeline\' because the deployment status (stopped) indicates it is not (yet) fully provisioned","error_code":"PipelineInteractionNotDeployed","details":{"pipeline_name":"my_pipeline","status":"Stopped","desired_status":"Provisioned"}}},"Response timeout":{"value":{"message":"Error sending HTTP request to pipeline \'my_pipeline\': timeout (10s) was reached: this means the pipeline took too long to respond -- this can simply be because the request was too difficult to process in time, or other reasons (e.g., deadlock): the pipeline logs might contain additional information (original send request error: Timeout while waiting for response)\\nFailed request: /pause","error_code":"PipelineInteractionUnreachable","details":{"pipeline_name":"my_pipeline","request":"/pause","error":"timeout (10s) was reached: this means the pipeline took too long to respond -- this can simply be because the request was too difficult to process in time, or other reasons (e.g., deadlock): the pipeline logs might contain additional information (original send request error: Timeout while waiting for response)"}}}}}}}},"security":[{"JSON web token (JWT) or API key":[]}],"method":"post","path":"/v0/pipelines/{pipeline_name}/ingress/{table_name}","securitySchemes":{"JSON web token (JWT) or API key":{"type":"http","scheme":"bearer","bearerFormat":"JWT","description":"Use a JWT token obtained via an OAuth2/OIDC\\n                               login workflow or an API key obtained via\\n                               the `/v0/api-keys` endpoint."}},"info":{"title":"Feldera API","description":"\\nWith Feldera, users create data pipelines out of SQL programs.\\nA SQL program comprises tables and views, and includes as well the definition of\\ninput and output connectors for each respectively. A connector defines a data\\nsource or data sink to feed input data into tables or receive output data\\ncomputed by the views respectively.\\n\\n## Pipeline\\n\\nThe API is centered around the **pipeline**, which most importantly consists\\nout of the SQL program, but also has accompanying metadata and configuration parameters\\n(e.g., compilation profile, number of workers, etc.).\\n\\n* A pipeline is identified and referred to by its user-provided unique name.\\n* The pipeline program is asynchronously compiled when the pipeline is first created or\\n  when its program is subsequently updated.\\n* Pipeline deployment start is only able to proceed to provisioning once the program is successfully\\n  compiled.\\n* A pipeline cannot be updated while it is deployed.\\n\\n## Concurrency\\n\\nEach pipeline has a version, which is incremented each time its core fields are updated.\\nThe version is monotonically increasing. There is additionally a program version which covers\\nonly the program-related core fields, and is used by the compiler to discern when to recompile.\\n\\n## Client request handling\\n\\n### Request outcome expectations\\n\\nThe outcome of a request is that it either fails (e.g., DNS lookup failed) without any response\\n(no status code nor body), or it succeeds and gets back a response status code and body.\\n\\nIn case of a response, usually it is the Feldera endpoint that generated it:\\n- If it is success (2xx), it will return whichever body belongs to the success response.\\n- Otherwise, if it is an error (4xx, 5xx), it will return a Feldera error response JSON body\\n  which will have an application-level `error_code`.\\n\\nHowever, there are two notable exceptions when the response is not generated by the Feldera\\nendpoint:\\n- If the HTTP server, to which the endpoint belongs, encountered an issue, it might return\\n  4xx (e.g., for an unknown endpoint) or 5xx error codes by itself (e.g., when it is initializing).\\n- If the Feldera API server is behind a (reverse) proxy, the proxy can return error codes by itself,\\n  for example BAD GATEWAY (502) or GATEWAY TIMEOUT (504).\\n\\nAs such, it is not guaranteed that the (4xx, 5xx) will have a Feldera error response JSON body\\nin these latter cases.\\n\\n### Error handling and retrying\\n\\nThe error type returned by the client should distinguish between the error responses generated\\nby Feldera endpoints themselves (which have a Feldera error response body) and those that are\\ngenerated by other sources.\\n\\nIn order for a client operation (e.g., `pipeline.resume()`) to be robust (i.e., not fail due to\\na single HTTP request not succeeding) the client should use a retry mechanism if the operation\\nis idempotent. The retry mechanism must however have a time limit, after which it times out.\\nThis guarantees that the client operation is eventually responsive, which enables the script\\nit is a part of to not hang indefinitely on Feldera operations and instead be able to decide\\nby itself whether and how to proceed. If no response is returned, the mechanism should generally\\nretry. When a response is returned, the decision whether to retry can generally depend on the status\\ncode: especially the status codes 502, 503 and 504 should be considered as transient errors.\\nFiner grained retry decisions should be made by taking into account the application-level\\n`error_code` if the response body was indeed a Feldera error response body.\\n\\n## Feldera client errors (4xx)\\n\\n_Client behavior:_ clients should generally return with an error when they get back a 4xx status\\ncode, as it usually means the request will likely not succeed even if it is sent again. Certain\\nrequests might make use of a timed retry mechanism when the client error is transient without\\nrequiring any user intervention to overcome, for instance a transaction already being in progress\\nleading to a temporary CONFLICT (409) error.\\n\\n- **BAD REQUEST (400)**: invalid user request (general).\\n  - _Example:_ the new pipeline name `example1@~` contains invalid characters.\\n\\n- **UNAUTHORIZED (401)**: the user is not authorized to issue the request.\\n  - _Example:_ an invalid API key is provided.\\n\\n- **NOT FOUND (404)**: a resource required to exist in order to process the request was not found.\\n  - _Example:_ a pipeline named `example` does not exist when trying to update it.\\n\\n- **CONFLICT (409)**: there is a conflict between the request and a relevant resource.\\n  - _Example:_ a pipeline named `example` already exists.\\n  - _Example:_ another transaction is already in process.\\n\\n## Feldera server errors (5xx)\\n\\n- **INTERNAL SERVER ERROR (500)**: the server is unexpectedly unable to process the request\\n  (general).\\n  - _Example:_ unable to reach the database.\\n  - _Client behavior:_ immediately return with an error.\\n\\n- **NOT IMPLEMENTED (501)**: the server does not implement functionality required to process the\\n  request.\\n  - _Example:_ making a request to an enterprise-only endpoint in the OSS edition.\\n  - _Client behavior:_ immediately return with an error.\\n\\n- **SERVICE UNAVAILABLE (503)**: the server is not (yet) able to process the request.\\n  - _Example:_ pausing a pipeline which is still provisioning.\\n  - _Client behavior:_ depending on the type of request, client may use a timed retry mechanism.\\n\\n## Feldera error response body\\n\\nWhen the Feldera API returns an HTTP error status code (4xx, 5xx), the body will contain the\\nfollowing JSON object:\\n\\n```json\\n{\\n  \\"message\\": \\"Human-readable explanation.\\",\\n  \\"error_code\\": \\"CodeSpecifyingError\\",\\n  \\"details\\": {\\n\\n  }\\n}\\n```\\n\\nIt contains the following fields:\\n- **message (string)**: human-readable explanation of the error that occurred and potentially\\n  hinting what can be done about it.\\n- **error_code (string)**: application-level code about the error that occurred, written in CamelCase.\\n  For example: `UnknownPipelineName`, `DuplicateName`, `PauseWhileNotProvisioned`, ... .\\n- **details (object)**: JSON object corresponding to the `error_code` with fields that provide\\n  details relevant to it. For example: if a name is unknown, a field with the unknown name in\\n  question.\\n","contact":{"name":"Feldera Team","email":"dev@feldera.com"},"license":{"name":"MIT OR Apache-2.0"},"version":"0.164.0"},"postman":{"name":"Push data to a SQL table.","description":{"content":"The client sends data encoded using the format specified in the `?format=`\\nparameter as a body of the request.  The contents of the data must match\\nthe SQL table schema specified in `table_name`\\n\\nThe pipeline ingests data as it arrives without waiting for the end of\\nthe request.  Successful HTTP response indicates that all data has been\\ningested successfully.\\n\\nOn success, returns a completion token that can be passed to the\\n\'/completion_status\' endpoint to check whether the pipeline has fully\\nprocessed the data.","type":"text/plain"},"url":{"path":["v0","pipelines",":pipeline_name","ingress",":table_name"],"host":["{{baseUrl}}"],"query":[{"disabled":false,"description":{"content":"(Required) When `true`, push data to the pipeline even if the pipeline is paused. The default value is `false`","type":"text/plain"},"key":"force","value":"<boolean>"},{"disabled":false,"description":{"content":"(Required) Input data format, e.g., \'csv\' or \'json\'.","type":"text/plain"},"key":"format","value":"<string>"},{"disabled":false,"description":{"content":"Set to `true` if updates in this stream are packaged into JSON arrays (used in conjunction with `format=json`). The default values is `false`.","type":"text/plain"},"key":"array","value":"<boolean>"},{"disabled":false,"description":{"content":"JSON data change event format (used in conjunction with `format=json`).  The default value is \'insert_delete\'.","type":"text/plain"},"key":"update_format","value":"<string>"}],"variable":[{"disabled":false,"description":{"content":"(Required) Unique pipeline name","type":"text/plain"},"type":"any","value":"<string>","key":"pipeline_name"},{"disabled":false,"description":{"content":"(Required) SQL table name. Unquoted SQL names have to be capitalized. Quoted SQL names have to exactly match the case from the SQL program.","type":"text/plain"},"type":"any","value":"<string>","key":"table_name"}]},"header":[{"key":"Content-Type","value":"text/plain"},{"key":"Accept","value":"application/json"}],"method":"POST","body":{"mode":"raw","raw":"<string>"},"auth":{"type":"bearer","bearer":[{"type":"any","value":"{{bearerToken}}","key":"token"}]}}},"source":"@site/../openapi.json","sourceDirName":".","permalink":"/api/push-data-to-a-sql-table","previous":{"title":"Retrieve the heap profile of a running or paused pipeline.","permalink":"/api/retrieve-the-heap-profile-of-a-running-or-paused-pipeline"},"next":{"title":"Retrieve logs of a pipeline as a stream.","permalink":"/api/retrieve-logs-of-a-pipeline-as-a-stream"}}');var r=n(74848),s=n(28453);const a={},o="Push data to a SQL table.",l=[{value:"<code>InsertDelete</code>",id:"insertdelete",level:3},{value:"<code>Weighted</code>",id:"weighted",level:3},{value:"<code>Debezium</code>",id:"debezium",level:3},{value:"<code>Snowflake</code>",id:"snowflake",level:3},{value:"<code>Raw</code>",id:"raw",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"push-data-to-a-sql-table",children:"Push data to a SQL table."})}),"\n",(0,r.jsxs)(t.p,{children:["The client sends data encoded using the format specified in the ",(0,r.jsx)(t.code,{children:"?format="}),"\nparameter as a body of the request.  The contents of the data must match\nthe SQL table schema specified in ",(0,r.jsx)(t.code,{children:"table_name"})]}),"\n",(0,r.jsx)(t.p,{children:"The pipeline ingests data as it arrives without waiting for the end of\nthe request.  Successful HTTP response indicates that all data has been\ningested successfully."}),"\n",(0,r.jsx)(t.p,{children:"On success, returns a completion token that can be passed to the\n'/completion_status' endpoint to check whether the pipeline has fully\nprocessed the data."}),"\n",(0,r.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("th",{style:{textAlign:"left"},children:"Path Parameters"})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"pipeline_name"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Unique pipeline name"})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"table_name"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"SQL table name. Unquoted SQL names have to be capitalized. Quoted SQL names have to exactly match the case from the SQL program."})})]})})]})]}),"\n",(0,r.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("th",{style:{textAlign:"left"},children:"Query Parameters"})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"force"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" boolean"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:["When ",(0,r.jsx)(t.code,{children:"true"}),", push data to the pipeline even if the pipeline is paused. The default value is ",(0,r.jsx)(t.code,{children:"false"})]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"format"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Input data format, e.g., 'csv' or 'json'."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"array"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" boolean"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:["Set to ",(0,r.jsx)(t.code,{children:"true"})," if updates in this stream are packaged into JSON arrays (used in conjunction with ",(0,r.jsx)(t.code,{children:"format=json"}),"). The default values is ",(0,r.jsx)(t.code,{children:"false"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"update_format"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Possible values:"})," [",(0,r.jsx)(t.code,{children:"insert_delete"}),", ",(0,r.jsx)(t.code,{children:"weighted"}),", ",(0,r.jsx)(t.code,{children:"debezium"}),", ",(0,r.jsx)(t.code,{children:"snowflake"}),", ",(0,r.jsx)(t.code,{children:"raw"}),", ",(0,r.jsx)(t.code,{children:"redis"}),"]"]})}),(0,r.jsxs)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:[(0,r.jsx)(t.p,{children:"Supported JSON data change event formats."}),(0,r.jsx)(t.p,{children:"Each element in a JSON-formatted input stream specifies\nan update to one or more records in an input table.  We support\nseveral different ways to represent such updates."}),(0,r.jsx)(t.h3,{id:"insertdelete",children:(0,r.jsx)(t.code,{children:"InsertDelete"})}),(0,r.jsx)(t.p,{children:'Each element in the input stream consists of an "insert" or "delete"\ncommand and a record to be inserted to or deleted from the input table.'}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{"insert": {"column1": "hello, world!", "column2": 100}}\n'})}),(0,r.jsx)(t.h3,{id:"weighted",children:(0,r.jsx)(t.code,{children:"Weighted"})}),(0,r.jsx)(t.p,{children:"Each element in the input stream consists of a record and a weight\nwhich indicates how many times the row appears."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{"weight": 2, "data": {"column1": "hello, world!", "column2": 100}}\n'})}),(0,r.jsxs)(t.p,{children:["Note that the line above would be equivalent to the following input in the ",(0,r.jsx)(t.code,{children:"InsertDelete"})," format:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{"insert": {"column1": "hello, world!", "column2": 100}}\n{"insert": {"column1": "hello, world!", "column2": 100}}\n'})}),(0,r.jsx)(t.p,{children:"Similarly, negative weights are equivalent to deletions:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{"weight": -1, "data": {"column1": "hello, world!", "column2": 100}}\n'})}),(0,r.jsxs)(t.p,{children:["is equivalent to in the ",(0,r.jsx)(t.code,{children:"InsertDelete"})," format:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{"delete": {"column1": "hello, world!", "column2": 100}}\n'})}),(0,r.jsx)(t.h3,{id:"debezium",children:(0,r.jsx)(t.code,{children:"Debezium"})}),(0,r.jsxs)(t.p,{children:["Debezium CDC format.  Refer to ",(0,r.jsx)(t.a,{href:"https://docs.feldera.com/connectors/sources/debezium",children:"Debezium input connector documentation"})," for details."]}),(0,r.jsx)(t.h3,{id:"snowflake",children:(0,r.jsx)(t.code,{children:"Snowflake"})}),(0,r.jsx)(t.p,{children:"Uses flat structure so that fields can get parsed directly into SQL\ncolumns.  Defines three metadata fields:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"__action"}),' - "insert" or "delete"']}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"__stream_id"})," - unique 64-bit ID of the output stream (records within\na stream are totally ordered)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"__seq_number"})," - monotonically increasing sequence number relative to\nthe start of the stream."]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{"PART":1,"VENDOR":2,"EFFECTIVE_SINCE":"2019-05-21","PRICE":"10000","__action":"insert","__stream_id":4523666124030717756,"__seq_number":1}\n'})}),(0,r.jsx)(t.h3,{id:"raw",children:(0,r.jsx)(t.code,{children:"Raw"})}),(0,r.jsx)(t.p,{children:"This format is suitable for insert-only streams (no deletions).\nEach element in the input stream contains a record without any\nadditional envelope that gets inserted in the input table."})]}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:["JSON data change event format (used in conjunction with ",(0,r.jsx)(t.code,{children:"format=json"}),").  The default value is 'insert_delete'."]})})]})})]})]}),"\n",(0,r.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Request Body "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{children:(0,r.jsx)(t.p,{children:"Input data in the specified format"})})]})})}),(0,r.jsx)("tbody",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("td",{children:(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"})})})})]}),"\n",(0,r.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("th",{style:{textAlign:"left"},children:"Responses"})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"200"})}),(0,r.jsx)("div",{children:(0,r.jsx)(t.p,{children:"Data successfully delivered to the pipeline. The body of the response contains a completion token that can be passed to the '/completion_status' endpoint to check whether the pipeline has fully processed the data."})})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsx)("tbody",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"token"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsxs)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:[(0,r.jsx)(t.p,{children:"Completion token."}),(0,r.jsxs)(t.p,{children:["An opaque string associated with the current position in the input stream\ngenerated by an input connector.\nPass this string to the ",(0,r.jsx)(t.code,{children:"/completion_status"})," endpoint to check whether all\ninputs associated with the token have been fully processed by the pipeline."]})]})]})})})]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"400"})}),(0,r.jsx)("div",{})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"details"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" object"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:["Detailed error metadata.\nThe contents of this field is determined by ",(0,r.jsx)(t.code,{children:"error_code"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"error_code"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Error code is a string that specifies this error type."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"message"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Human-readable error message."})})]})})]})]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"404"})}),(0,r.jsx)("div",{children:(0,r.jsx)(t.p,{children:"Pipeline and/or table with that name does not exist"})})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"details"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" object"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:["Detailed error metadata.\nThe contents of this field is determined by ",(0,r.jsx)(t.code,{children:"error_code"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"error_code"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Error code is a string that specifies this error type."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"message"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Human-readable error message."})})]})})]})]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"500"})}),(0,r.jsx)("div",{})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"details"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" object"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:["Detailed error metadata.\nThe contents of this field is determined by ",(0,r.jsx)(t.code,{children:"error_code"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"error_code"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Error code is a string that specifies this error type."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"message"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Human-readable error message."})})]})})]})]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"503"})}),(0,r.jsx)("div",{})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"details"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" object"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(t.p,{children:["Detailed error metadata.\nThe contents of this field is determined by ",(0,r.jsx)(t.code,{children:"error_code"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"error_code"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Error code is a string that specifies this error type."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"message"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(t.p,{children:"Human-readable error message."})})]})})]})]})})]})})]})]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);