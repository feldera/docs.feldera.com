"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[3634],{11190:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"type":"info","id":"introduction","title":"Introduction","description":"\\nWith Feldera, users create data pipelines out of SQL programs.\\nA SQL program comprises tables and views, and includes as well the definition of\\ninput and output connectors for each respectively. A connector defines a data\\nsource or data sink to feed input data into tables or receive output data\\ncomputed by the views respectively.\\n\\n## Pipeline\\n\\nThe API is centered around the **pipeline**, which most importantly consists\\nout of the SQL program, but also has accompanying metadata and configuration parameters\\n(e.g., compilation profile, number of workers, etc.).\\n\\n* A pipeline is identified and referred to by its user-provided unique name.\\n* The pipeline program is asynchronously compiled when the pipeline is first created or\\n  when its program is subsequently updated.\\n* Pipeline deployment start is only able to proceed to provisioning once the program is successfully\\n  compiled.\\n* A pipeline cannot be updated while it is deployed.\\n\\n## Concurrency\\n\\nEach pipeline has a version, which is incremented each time its core fields are updated.\\nThe version is monotonically increasing. There is additionally a program version which covers\\nonly the program-related core fields, and is used by the compiler to discern when to recompile.\\n\\n## Client request handling\\n\\n### Request outcome expectations\\n\\nThe outcome of a request is that it either fails (e.g., DNS lookup failed) without any response\\n(no status code nor body), or it succeeds and gets back a response status code and body.\\n\\nIn case of a response, usually it is the Feldera endpoint that generated it:\\n- If it is success (2xx), it will return whichever body belongs to the success response.\\n- Otherwise, if it is an error (4xx, 5xx), it will return a Feldera error response JSON body\\n  which will have an application-level `error_code`.\\n\\nHowever, there are two notable exceptions when the response is not generated by the Feldera\\nendpoint:\\n- If the HTTP server, to which the endpoint belongs, encountered an issue, it might return\\n  4xx (e.g., for an unknown endpoint) or 5xx error codes by itself (e.g., when it is initializing).\\n- If the Feldera API server is behind a (reverse) proxy, the proxy can return error codes by itself,\\n  for example BAD GATEWAY (502) or GATEWAY TIMEOUT (504).\\n\\nAs such, it is not guaranteed that the (4xx, 5xx) will have a Feldera error response JSON body\\nin these latter cases.\\n\\n### Error handling and retrying\\n\\nThe error type returned by the client should distinguish between the error responses generated\\nby Feldera endpoints themselves (which have a Feldera error response body) and those that are\\ngenerated by other sources.\\n\\nIn order for a client operation (e.g., `pipeline.resume()`) to be robust (i.e., not fail due to\\na single HTTP request not succeeding) the client should use a retry mechanism if the operation\\nis idempotent. The retry mechanism must however have a time limit, after which it times out.\\nThis guarantees that the client operation is eventually responsive, which enables the script\\nit is a part of to not hang indefinitely on Feldera operations and instead be able to decide\\nby itself whether and how to proceed. If no response is returned, the mechanism should generally\\nretry. When a response is returned, the decision whether to retry can generally depend on the status\\ncode: especially the status codes 502, 503 and 504 should be considered as transient errors.\\nFiner grained retry decisions should be made by taking into account the application-level\\n`error_code` if the response body was indeed a Feldera error response body.\\n\\n## Feldera client errors (4xx)\\n\\n_Client behavior:_ clients should generally return with an error when they get back a 4xx status\\ncode, as it usually means the request will likely not succeed even if it is sent again. Certain\\nrequests might make use of a timed retry mechanism when the client error is transient without\\nrequiring any user intervention to overcome, for instance a transaction already being in progress\\nleading to a temporary CONFLICT (409) error.\\n\\n- **BAD REQUEST (400)**: invalid user request (general).\\n  - _Example:_ the new pipeline name `example1@~` contains invalid characters.\\n\\n- **UNAUTHORIZED (401)**: the user is not authorized to issue the request.\\n  - _Example:_ an invalid API key is provided.\\n\\n- **NOT FOUND (404)**: a resource required to exist in order to process the request was not found.\\n  - _Example:_ a pipeline named `example` does not exist when trying to update it.\\n\\n- **CONFLICT (409)**: there is a conflict between the request and a relevant resource.\\n  - _Example:_ a pipeline named `example` already exists.\\n  - _Example:_ another transaction is already in process.\\n\\n## Feldera server errors (5xx)\\n\\n- **INTERNAL SERVER ERROR (500)**: the server is unexpectedly unable to process the request\\n  (general).\\n  - _Example:_ unable to reach the database.\\n  - _Client behavior:_ immediately return with an error.\\n\\n- **NOT IMPLEMENTED (501)**: the server does not implement functionality required to process the\\n  request.\\n  - _Example:_ making a request to an enterprise-only endpoint in the OSS edition.\\n  - _Client behavior:_ immediately return with an error.\\n\\n- **SERVICE UNAVAILABLE (503)**: the server is not (yet) able to process the request.\\n  - _Example:_ pausing a pipeline which is still provisioning.\\n  - _Client behavior:_ depending on the type of request, client may use a timed retry mechanism.\\n\\n## Feldera error response body\\n\\nWhen the Feldera API returns an HTTP error status code (4xx, 5xx), the body will contain the\\nfollowing JSON object:\\n\\n```json\\n{\\n  \\"message\\": \\"Human-readable explanation.\\",\\n  \\"error_code\\": \\"CodeSpecifyingError\\",\\n  \\"details\\": {\\n\\n  }\\n}\\n```\\n\\nIt contains the following fields:\\n- **message (string)**: human-readable explanation of the error that occurred and potentially\\n  hinting what can be done about it.\\n- **error_code (string)**: application-level code about the error that occurred, written in CamelCase.\\n  For example: `UnknownPipelineName`, `DuplicateName`, `PauseWhileNotProvisioned`, ... .\\n- **details (object)**: JSON object corresponding to the `error_code` with fields that provide\\n  details relevant to it. For example: if a name is unknown, a field with the unknown name in\\n  question.\\n","slug":"/introduction","frontMatter":{},"info":{"title":"Feldera API","description":"\\nWith Feldera, users create data pipelines out of SQL programs.\\nA SQL program comprises tables and views, and includes as well the definition of\\ninput and output connectors for each respectively. A connector defines a data\\nsource or data sink to feed input data into tables or receive output data\\ncomputed by the views respectively.\\n\\n## Pipeline\\n\\nThe API is centered around the **pipeline**, which most importantly consists\\nout of the SQL program, but also has accompanying metadata and configuration parameters\\n(e.g., compilation profile, number of workers, etc.).\\n\\n* A pipeline is identified and referred to by its user-provided unique name.\\n* The pipeline program is asynchronously compiled when the pipeline is first created or\\n  when its program is subsequently updated.\\n* Pipeline deployment start is only able to proceed to provisioning once the program is successfully\\n  compiled.\\n* A pipeline cannot be updated while it is deployed.\\n\\n## Concurrency\\n\\nEach pipeline has a version, which is incremented each time its core fields are updated.\\nThe version is monotonically increasing. There is additionally a program version which covers\\nonly the program-related core fields, and is used by the compiler to discern when to recompile.\\n\\n## Client request handling\\n\\n### Request outcome expectations\\n\\nThe outcome of a request is that it either fails (e.g., DNS lookup failed) without any response\\n(no status code nor body), or it succeeds and gets back a response status code and body.\\n\\nIn case of a response, usually it is the Feldera endpoint that generated it:\\n- If it is success (2xx), it will return whichever body belongs to the success response.\\n- Otherwise, if it is an error (4xx, 5xx), it will return a Feldera error response JSON body\\n  which will have an application-level `error_code`.\\n\\nHowever, there are two notable exceptions when the response is not generated by the Feldera\\nendpoint:\\n- If the HTTP server, to which the endpoint belongs, encountered an issue, it might return\\n  4xx (e.g., for an unknown endpoint) or 5xx error codes by itself (e.g., when it is initializing).\\n- If the Feldera API server is behind a (reverse) proxy, the proxy can return error codes by itself,\\n  for example BAD GATEWAY (502) or GATEWAY TIMEOUT (504).\\n\\nAs such, it is not guaranteed that the (4xx, 5xx) will have a Feldera error response JSON body\\nin these latter cases.\\n\\n### Error handling and retrying\\n\\nThe error type returned by the client should distinguish between the error responses generated\\nby Feldera endpoints themselves (which have a Feldera error response body) and those that are\\ngenerated by other sources.\\n\\nIn order for a client operation (e.g., `pipeline.resume()`) to be robust (i.e., not fail due to\\na single HTTP request not succeeding) the client should use a retry mechanism if the operation\\nis idempotent. The retry mechanism must however have a time limit, after which it times out.\\nThis guarantees that the client operation is eventually responsive, which enables the script\\nit is a part of to not hang indefinitely on Feldera operations and instead be able to decide\\nby itself whether and how to proceed. If no response is returned, the mechanism should generally\\nretry. When a response is returned, the decision whether to retry can generally depend on the status\\ncode: especially the status codes 502, 503 and 504 should be considered as transient errors.\\nFiner grained retry decisions should be made by taking into account the application-level\\n`error_code` if the response body was indeed a Feldera error response body.\\n\\n## Feldera client errors (4xx)\\n\\n_Client behavior:_ clients should generally return with an error when they get back a 4xx status\\ncode, as it usually means the request will likely not succeed even if it is sent again. Certain\\nrequests might make use of a timed retry mechanism when the client error is transient without\\nrequiring any user intervention to overcome, for instance a transaction already being in progress\\nleading to a temporary CONFLICT (409) error.\\n\\n- **BAD REQUEST (400)**: invalid user request (general).\\n  - _Example:_ the new pipeline name `example1@~` contains invalid characters.\\n\\n- **UNAUTHORIZED (401)**: the user is not authorized to issue the request.\\n  - _Example:_ an invalid API key is provided.\\n\\n- **NOT FOUND (404)**: a resource required to exist in order to process the request was not found.\\n  - _Example:_ a pipeline named `example` does not exist when trying to update it.\\n\\n- **CONFLICT (409)**: there is a conflict between the request and a relevant resource.\\n  - _Example:_ a pipeline named `example` already exists.\\n  - _Example:_ another transaction is already in process.\\n\\n## Feldera server errors (5xx)\\n\\n- **INTERNAL SERVER ERROR (500)**: the server is unexpectedly unable to process the request\\n  (general).\\n  - _Example:_ unable to reach the database.\\n  - _Client behavior:_ immediately return with an error.\\n\\n- **NOT IMPLEMENTED (501)**: the server does not implement functionality required to process the\\n  request.\\n  - _Example:_ making a request to an enterprise-only endpoint in the OSS edition.\\n  - _Client behavior:_ immediately return with an error.\\n\\n- **SERVICE UNAVAILABLE (503)**: the server is not (yet) able to process the request.\\n  - _Example:_ pausing a pipeline which is still provisioning.\\n  - _Client behavior:_ depending on the type of request, client may use a timed retry mechanism.\\n\\n## Feldera error response body\\n\\nWhen the Feldera API returns an HTTP error status code (4xx, 5xx), the body will contain the\\nfollowing JSON object:\\n\\n```json\\n{\\n  \\"message\\": \\"Human-readable explanation.\\",\\n  \\"error_code\\": \\"CodeSpecifyingError\\",\\n  \\"details\\": {\\n\\n  }\\n}\\n```\\n\\nIt contains the following fields:\\n- **message (string)**: human-readable explanation of the error that occurred and potentially\\n  hinting what can be done about it.\\n- **error_code (string)**: application-level code about the error that occurred, written in CamelCase.\\n  For example: `UnknownPipelineName`, `DuplicateName`, `PauseWhileNotProvisioned`, ... .\\n- **details (object)**: JSON object corresponding to the `error_code` with fields that provide\\n  details relevant to it. For example: if a name is unknown, a field with the unknown name in\\n  question.\\n","contact":{"name":"Feldera Team","email":"dev@feldera.com"},"license":{"name":"MIT OR Apache-2.0"},"version":"0.173.0"},"source":"@site/../openapi.json","sourceDirName":".","permalink":"/api/introduction","next":{"title":"Retrieve authentication provider configuration.","permalink":"/api/retrieve-authentication-provider-configuration"}}');var i=r(74848),s=r(28453);const o={},a="Feldera API",l=[{value:"Pipeline",id:"pipeline",level:2},{value:"Concurrency",id:"concurrency",level:2},{value:"Client request handling",id:"client-request-handling",level:2},{value:"Request outcome expectations",id:"request-outcome-expectations",level:3},{value:"Error handling and retrying",id:"error-handling-and-retrying",level:3},{value:"Feldera client errors (4xx)",id:"feldera-client-errors-4xx",level:2},{value:"Feldera server errors (5xx)",id:"feldera-server-errors-5xx",level:2},{value:"Feldera error response body",id:"feldera-error-response-body",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("span",{className:"theme-doc-version-badge badge badge--secondary",children:"Version: 0.173.0"}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"feldera-api",children:"Feldera API"})}),"\n",(0,i.jsx)(n.p,{children:"With Feldera, users create data pipelines out of SQL programs.\nA SQL program comprises tables and views, and includes as well the definition of\ninput and output connectors for each respectively. A connector defines a data\nsource or data sink to feed input data into tables or receive output data\ncomputed by the views respectively."}),"\n",(0,i.jsx)(n.h2,{id:"pipeline",children:"Pipeline"}),"\n",(0,i.jsxs)(n.p,{children:["The API is centered around the ",(0,i.jsx)(n.strong,{children:"pipeline"}),", which most importantly consists\nout of the SQL program, but also has accompanying metadata and configuration parameters\n(e.g., compilation profile, number of workers, etc.)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A pipeline is identified and referred to by its user-provided unique name."}),"\n",(0,i.jsx)(n.li,{children:"The pipeline program is asynchronously compiled when the pipeline is first created or\nwhen its program is subsequently updated."}),"\n",(0,i.jsx)(n.li,{children:"Pipeline deployment start is only able to proceed to provisioning once the program is successfully\ncompiled."}),"\n",(0,i.jsx)(n.li,{children:"A pipeline cannot be updated while it is deployed."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"concurrency",children:"Concurrency"}),"\n",(0,i.jsx)(n.p,{children:"Each pipeline has a version, which is incremented each time its core fields are updated.\nThe version is monotonically increasing. There is additionally a program version which covers\nonly the program-related core fields, and is used by the compiler to discern when to recompile."}),"\n",(0,i.jsx)(n.h2,{id:"client-request-handling",children:"Client request handling"}),"\n",(0,i.jsx)(n.h3,{id:"request-outcome-expectations",children:"Request outcome expectations"}),"\n",(0,i.jsx)(n.p,{children:"The outcome of a request is that it either fails (e.g., DNS lookup failed) without any response\n(no status code nor body), or it succeeds and gets back a response status code and body."}),"\n",(0,i.jsx)(n.p,{children:"In case of a response, usually it is the Feldera endpoint that generated it:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If it is success (2xx), it will return whichever body belongs to the success response."}),"\n",(0,i.jsxs)(n.li,{children:["Otherwise, if it is an error (4xx, 5xx), it will return a Feldera error response JSON body\nwhich will have an application-level ",(0,i.jsx)(n.code,{children:"error_code"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"However, there are two notable exceptions when the response is not generated by the Feldera\nendpoint:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the HTTP server, to which the endpoint belongs, encountered an issue, it might return\n4xx (e.g., for an unknown endpoint) or 5xx error codes by itself (e.g., when it is initializing)."}),"\n",(0,i.jsx)(n.li,{children:"If the Feldera API server is behind a (reverse) proxy, the proxy can return error codes by itself,\nfor example BAD GATEWAY (502) or GATEWAY TIMEOUT (504)."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As such, it is not guaranteed that the (4xx, 5xx) will have a Feldera error response JSON body\nin these latter cases."}),"\n",(0,i.jsx)(n.h3,{id:"error-handling-and-retrying",children:"Error handling and retrying"}),"\n",(0,i.jsx)(n.p,{children:"The error type returned by the client should distinguish between the error responses generated\nby Feldera endpoints themselves (which have a Feldera error response body) and those that are\ngenerated by other sources."}),"\n",(0,i.jsxs)(n.p,{children:["In order for a client operation (e.g., ",(0,i.jsx)(n.code,{children:"pipeline.resume()"}),") to be robust (i.e., not fail due to\na single HTTP request not succeeding) the client should use a retry mechanism if the operation\nis idempotent. The retry mechanism must however have a time limit, after which it times out.\nThis guarantees that the client operation is eventually responsive, which enables the script\nit is a part of to not hang indefinitely on Feldera operations and instead be able to decide\nby itself whether and how to proceed. If no response is returned, the mechanism should generally\nretry. When a response is returned, the decision whether to retry can generally depend on the status\ncode: especially the status codes 502, 503 and 504 should be considered as transient errors.\nFiner grained retry decisions should be made by taking into account the application-level\n",(0,i.jsx)(n.code,{children:"error_code"})," if the response body was indeed a Feldera error response body."]}),"\n",(0,i.jsx)(n.h2,{id:"feldera-client-errors-4xx",children:"Feldera client errors (4xx)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"Client behavior:"})," clients should generally return with an error when they get back a 4xx status\ncode, as it usually means the request will likely not succeed even if it is sent again. Certain\nrequests might make use of a timed retry mechanism when the client error is transient without\nrequiring any user intervention to overcome, for instance a transaction already being in progress\nleading to a temporary CONFLICT (409) error."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"BAD REQUEST (400)"}),": invalid user request (general)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," the new pipeline name ",(0,i.jsx)(n.code,{children:"example1@~"})," contains invalid characters."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"UNAUTHORIZED (401)"}),": the user is not authorized to issue the request."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," an invalid API key is provided."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOT FOUND (404)"}),": a resource required to exist in order to process the request was not found."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," a pipeline named ",(0,i.jsx)(n.code,{children:"example"})," does not exist when trying to update it."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CONFLICT (409)"}),": there is a conflict between the request and a relevant resource."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," a pipeline named ",(0,i.jsx)(n.code,{children:"example"})," already exists."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," another transaction is already in process."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"feldera-server-errors-5xx",children:"Feldera server errors (5xx)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"INTERNAL SERVER ERROR (500)"}),": the server is unexpectedly unable to process the request\n(general)."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," unable to reach the database."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Client behavior:"})," immediately return with an error."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOT IMPLEMENTED (501)"}),": the server does not implement functionality required to process the\nrequest."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," making a request to an enterprise-only endpoint in the OSS edition."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Client behavior:"})," immediately return with an error."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"SERVICE UNAVAILABLE (503)"}),": the server is not (yet) able to process the request."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Example:"})," pausing a pipeline which is still provisioning."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Client behavior:"})," depending on the type of request, client may use a timed retry mechanism."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"feldera-error-response-body",children:"Feldera error response body"}),"\n",(0,i.jsx)(n.p,{children:"When the Feldera API returns an HTTP error status code (4xx, 5xx), the body will contain the\nfollowing JSON object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Human-readable explanation.",\n  "error_code": "CodeSpecifyingError",\n  "details": {\n\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"It contains the following fields:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"message (string)"}),": human-readable explanation of the error that occurred and potentially\nhinting what can be done about it."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"error_code (string)"}),": application-level code about the error that occurred, written in CamelCase.\nFor example: ",(0,i.jsx)(n.code,{children:"UnknownPipelineName"}),", ",(0,i.jsx)(n.code,{children:"DuplicateName"}),", ",(0,i.jsx)(n.code,{children:"PauseWhileNotProvisioned"}),", ... ."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"details (object)"}),": JSON object corresponding to the ",(0,i.jsx)(n.code,{children:"error_code"})," with fields that provide\ndetails relevant to it. For example: if a name is unknown, a field with the unknown name in\nquestion."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);