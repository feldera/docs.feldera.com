"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[614],{6380:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorials/monitoring/index","title":"Monitoring and Profiling","description":"A Feldera instance and its pipelines can be monitored using various tools. This tutorial","source":"@site/docs/tutorials/monitoring/index.md","sourceDirName":"tutorials/monitoring","slug":"/tutorials/monitoring/","permalink":"/tutorials/monitoring/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Using the REST API","permalink":"/tutorials/rest_api/"},"next":{"title":"Feldera Interface","permalink":"/interface/"}}');var t=r(74848),s=r(28453);const a={},o="Monitoring and Profiling",l={},c=[{value:"Metrics with Grafana and Prometheus",id:"metrics-with-grafana-and-prometheus",level:2},{value:"Setup",id:"setup",level:3},{value:"Setup with Docker",id:"setup-with-docker",level:3},{value:"Set up the monitoring Dashboard",id:"set-up-the-monitoring-dashboard",level:3},{value:"Tracing with Jaeger",id:"tracing-with-jaeger",level:2},{value:"Setup",id:"setup-1",level:3},{value:"DBSP Profiles",id:"dbsp-profiles",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"monitoring-and-profiling",children:"Monitoring and Profiling"})}),"\n",(0,t.jsx)(n.p,{children:"A Feldera instance and its pipelines can be monitored using various tools. This tutorial\nwill guide you through setting up monitoring for your Feldera instance."}),"\n",(0,t.jsx)(n.h2,{id:"metrics-with-grafana-and-prometheus",children:"Metrics with Grafana and Prometheus"}),"\n",(0,t.jsx)(n.p,{children:"Metrics are helpful to check the health of your Feldera instance and to identify resource\nbottlenecks. Feldera exposes a metrics endpoint that can be scraped by Prometheus. Grafana\nis then used to visualize these metrics."}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/operations/metrics",children:"Pipeline Metrics"})," for a reference to the Prometheus metrics that\nFeldera exports."]}),"\n",(0,t.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prometheus:"})," You must have ",(0,t.jsx)(n.a,{href:"https://prometheus.io",children:"Prometheus installed"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connect Prometheus to Feldera:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Add the following to your ",(0,t.jsx)(n.code,{children:"prometheus.yml"})," configuration file, usually located\nin ",(0,t.jsx)(n.code,{children:"/etc/prometheus/prometheus.yml"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- job_name: 'feldera'\n  scrape_interval: 1s\n  metrics_path: '/v0/metrics'\n  static_configs:\n    - targets: ['127.0.0.1:8080']\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Replace ",(0,t.jsx)(n.code,{children:"127.0.0.1:8080"})," with the address of your Feldera instance."]}),"\n",(0,t.jsx)(n.li,{children:"Restart Prometheus."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Grafana:"})," You must have ",(0,t.jsx)(n.a,{href:"https://grafana.com",children:"Grafana installed"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add Prometheus To Grafana:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If you are using a local prometheus instance, the URL for the Prometheus data source will\nbe ",(0,t.jsx)(n.a,{href:"http://127.0.0.1:9090",children:"http://127.0.0.1:9090"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Follow the steps in the ",(0,t.jsx)(n.a,{href:"https://prometheus.io/docs/visualization/grafana/#creating-a-prometheus-data-source",children:"Grafana\ndocumentation"}),"\nto add Prometheus as a data source."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"setup-with-docker",children:"Setup with Docker"}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, with docker, you can avoid installing Prometheus and Grafana to your local machine.\nTo run Feldera with both Prometheus and Grafana:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"docker compose -f deploy/docker-compose.yml up grafana --force-recreate\n"})}),"\n",(0,t.jsx)(n.p,{children:"This spins up:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Feldera"}),"\n",(0,t.jsx)(n.li,{children:"Prometheus"}),"\n",(0,t.jsx)(n.li,{children:"Grafana"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you want to run Prometheus without Grafana:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"docker compose -f deploy/docker-compose.yml up prometheus --force-recreate\n"})}),"\n",(0,t.jsx)(n.h3,{id:"set-up-the-monitoring-dashboard",children:"Set up the monitoring Dashboard"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["**Copy the JSON of\nthe ",(0,t.jsx)(n.a,{href:"https://raw.githubusercontent.com/feldera/feldera/main/deploy/grafana_dashboard.json",children:"Feldera template dashboard"}),"\n**"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Import the dashboard into Grafana"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Under Dashboards, click the "New" icon, then click "Import Dashboard".'}),"\n",(0,t.jsx)(n.li,{children:'Paste the JSON copied from the template in the text-box and click "Load".'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A Feldera Instance Monitoring dashboard will be created in Grafana.\nThe dashboard is a template and may need to be adjusted to fit your specific needs.\nLook for the ",(0,t.jsx)(n.code,{children:"feldera_*"})," metrics in Grafana to add more metrics to the dashboard."]}),"\n",(0,t.jsx)(n.h2,{id:"tracing-with-jaeger",children:"Tracing with Jaeger"}),"\n",(0,t.jsx)(n.p,{children:"A Feldera pipeline can be traced using Jaeger. Tracing is useful if you need to analyze\nthroughput or latency bottlenecks of your pipeline, as it instruments every step of the\npipeline execution and provides detailed information about the execution time of each\nstep."}),"\n",(0,t.jsx)(n.h3,{id:"setup-1",children:"Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Jaeger:"})," You must have ",(0,t.jsx)(n.a,{href:"https://www.jaegertracing.io",children:"Jaeger installed"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Start Jaeger using the ",(0,t.jsx)(n.code,{children:"jaeger-all-in-one"})," script:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./jaeger-all-in-one\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tracing a Feldera pipeline"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Enable/disable tracing and specify the Jaeger endpoint in the pipeline ",(0,t.jsx)(n.code,{children:"runtime_config"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -i -X PATCH http://127.0.0.1:8080/v0/pipelines/tracing-pipeline \\\n-H \'Content-Type: application/json\' \\\n-d \'{\n  "runtime_config": {"tracing": true, "tracing_endpoint_jaeger": "host.docker.internal:6831", <other config settings> }\n}\'\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"host.docker.internal:6831"})," if you are running Feldera in docker or\n",(0,t.jsx)(n.code,{children:"127.0.0.1:6831"})," if you run Feldera directly."]}),"\n",(0,t.jsxs)(n.li,{children:["Make sure to specify other settings you changed from non-default values in the ",(0,t.jsx)(n.code,{children:"runtime_config"})," as well.\n",(0,t.jsx)(n.code,{children:"runtime_config"})," can be retrieved with:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -X 'GET' \\\n'http://127.0.0.1:8080/v0/pipelines/tracing-pipeline' \\\n-H 'accept: application/json'\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"dbsp-profiles",children:"DBSP Profiles"}),"\n",(0,t.jsx)(n.p,{children:"A DBSP profile is a graph of the pipeline's circuit where each node represents an\noperator and each edge represents a data flow between operators. The profile includes\ninformation about how much CPU time or memory each operator consumes."}),"\n",(0,t.jsxs)(n.p,{children:["The API endpoint ",(0,t.jsx)(n.code,{children:"/v0/<pipeline_name>/circuit_profile"})," can be used to download the DBSP\nprofile of a running pipeline. It returns a zip file containing multiple profiles (one\nfor each worker) as ",(0,t.jsx)(n.code,{children:".dot"})," files, and a ",(0,t.jsx)(n.code,{children:"Makefile"})," to transform the ",(0,t.jsx)(n.code,{children:".dot"})," files into\n",(0,t.jsx)(n.code,{children:".pdf"})," files."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(96540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);