"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[6028],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},89829:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"connectors/sources/datagen","title":"Datagen input connector","description":"Datagen is a source connector that generates synthetic data for testing,","source":"@site/docs/connectors/sources/datagen.md","sourceDirName":"connectors/sources","slug":"/connectors/sources/datagen","permalink":"/connectors/sources/datagen","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"AWS S3","permalink":"/connectors/sources/s3"},"next":{"title":"File","permalink":"/connectors/sources/file"}}');var r=s(74848),t=s(28453);const l={},a="Datagen input connector",c={},d=[{value:"Datagen input connector configuration",id:"datagen-input-connector-configuration",level:2},{value:"Config Parameters",id:"config-parameters",level:3},{value:"Plan",id:"plan",level:3},{value:"Random Field Settings",id:"random-field-settings",level:3},{value:"Nested Types",id:"nested-types",level:4},{value:"String Generation Strategies",id:"string-generation-strategies",level:4},{value:"Examples",id:"examples",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"datagen-input-connector",children:"Datagen input connector"})}),"\n",(0,r.jsx)(n.p,{children:"Datagen is a source connector that generates synthetic data for testing,\nprototyping and benchmarking purposes."}),"\n",(0,r.jsxs)(n.p,{children:["For a tutorial on how to use the Datagen connector, see the\n",(0,r.jsx)(n.a,{href:"/tutorials/basics/part4",children:"Random Data Generation"})," tutorial."]}),"\n",(0,r.jsxs)(n.p,{children:["The datagen input connector supports ",(0,r.jsx)(n.a,{href:"/pipelines/fault-tolerance",children:"fault\ntolerance"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"datagen-input-connector-configuration",children:"Datagen input connector configuration"}),"\n",(0,r.jsx)(n.h3,{id:"config-parameters",children:"Config Parameters"}),"\n",(0,r.jsx)(n.p,{children:"All parameters are optional:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"workers"})," - How many workers tasks should be spawned to generate the data. This can be used to\nincrease the data generation rate. Default is 1. Note that the ",(0,r.jsx)(n.code,{children:"rate"})," parameter is global and\nworkers will share the rate limit."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"seed"})," - Optional seed for the random number generator. When this option is set, the data\ngeneration process will be deterministic and produce the same output for the same seed.\nHowever, note that with ",(0,r.jsx)(n.code,{children:"workers > 1"})," it does not guarantee that the data be inserted\nin the pipeline in the same order every time.\nBy default, a random seed is used."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"plan"})," - A list of plans to generate rows. See the ",(0,r.jsx)(n.a,{href:"#plan",children:"Plan"})," section for details.\nBy default, a single plan is used that generates rows with incrementing values for\nevery type."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"plan",children:"Plan"}),"\n",(0,r.jsx)(n.p,{children:"A plan is a list of objects that describe how to generate rows. Each object can have the following, optional\nfields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"limit"}),": How many rows to generate. If not specified, the plan will run indefinitely."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"rate"}),": How many rows to generate per second. If not specified, the plan will run as fast as possible. See also\nthe ",(0,r.jsx)(n.code,{children:"workers"})," parameter."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"fields"}),": A map of field names to ",(0,r.jsx)(n.a,{href:"#random-field-settings",children:"field generation options"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"worker_chunk_size"}),': When multiple workers are used, each worker will complete a consecutive "chunk" of records\nbefore getting a new chunk (by synchronizing with other workers). This parameter specifies the size of the chunk.\nIf not specified, the field will be set to ',(0,r.jsx)(n.code,{children:"min(rate, 10_000)"}),". This works well in most situations.\nHowever, if you're running tests with lateness and many workers you can e.g., reduce the chunk size\nto make sure a smaller range of records is being ingested/generated in parallel."]}),"\n",(0,r.jsxs)(n.p,{children:["This also controls the sizes of input batches.  If, for example, ",(0,r.jsx)(n.code,{children:"rate"})," and ",(0,r.jsx)(n.code,{children:"worker_chunk_size"})," are both 1000,\nwith a single worker, the generator will output 1000 records once a second.  But if we reduce ",(0,r.jsx)(n.code,{children:"worker_chunk_size"}),"\nto 100 without changing ",(0,r.jsx)(n.code,{children:"rate"}),", the generator will instead output 100 records 10 times per second."]}),"\n",(0,r.jsxs)(n.p,{children:["Example: Assume datagen generates a total of 125 records with 4 workers and a chunk size of 25. In this case,\nworker A will generate records ",(0,r.jsx)(n.code,{children:"0..25"}),", worker B will generate records ",(0,r.jsx)(n.code,{children:"25..50"}),", etc. A, B, C, and D will\ngenerate the first 100 records in parallel. The first worker to finish its chunk will pick up the last chunk\nof records (",(0,r.jsx)(n.code,{children:"100..125"}),") and generate the records for it."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"random-field-settings",children:"Random Field Settings"}),"\n",(0,r.jsx)(n.p,{children:"Each field can set a strategy that defines how a value is picked:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"strategy"})," - The strategy to use for generating values. The following strategies are available:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"increment"})," - (default) Generate an incrementing sequence of values for the given type where each value is\ngreater than the previous one (wrapping around once reaching the limit of numeric types or the limits specified\nby ",(0,r.jsx)(n.code,{children:"range"}),"). The step size is determined by the type but can be adjusted with the ",(0,r.jsx)(n.code,{children:"scale"})," parameter:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For integer and string types, the increment is 1."}),"\n",(0,r.jsx)(n.li,{children:"For floating point types, the increment is 1.0."}),"\n",(0,r.jsx)(n.li,{children:"For time and timestamp types, the increment is 1 millisecond."}),"\n",(0,r.jsx)(n.li,{children:"For date types, the increment is 1 day."}),"\n",(0,r.jsx)(n.li,{children:"When generating an array/binary/varbinary type, the increment will\nstart from zero with a step size of 1."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"uniform"})," - Generate random values from a uniform distribution."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"zipf"})," - Generate random values from a Zipf distribution. The exponent of the distribution can be set with the\n",(0,r.jsx)(n.code,{children:"e"})," parameter."]}),"\n",(0,r.jsxs)(n.li,{children:["For string types, the ",(0,r.jsx)(n.a,{href:"#string-generation-strategies",children:"String Generation"})," section lists more strategies\non how to generate more specific strings."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A field can have an optional ",(0,r.jsx)(n.code,{children:"range"})," parameter that defines the range of values a strategy will pick from.\nThe range is inclusive and contains all values with ",(0,r.jsx)(n.code,{children:"start <= x < end"}),". It will return an error if ",(0,r.jsx)(n.code,{children:"start >= end"}),".\nThe application of range depends on the type:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For integer/floating point types specifies min/max values.\nIf not set, the generator will produce values for the entire range of the type for number types."}),"\n",(0,r.jsxs)(n.li,{children:["For string types specifies min/max length, values are required to be ",(0,r.jsx)(n.code,{children:">=0"}),".\nIf not set, a range of ",(0,r.jsx)(n.code,{children:"[0, 25)"})," is used by default."]}),"\n",(0,r.jsxs)(n.li,{children:["For timestamp types specifies the min/max as two strings in the RFC 3339 format\n(e.g., ",(0,r.jsx)(n.code,{children:'["2021-01-01T00:00:00Z", "2022-01-02T00:00:00Z"]'}),").\nAlternatively, the range values can be specified as a number of non-leap\nmilliseconds since January 1, 1970 0:00:00.000 UTC (aka \u201cUNIX timestamp\u201d).\nIf not set, a range of ",(0,r.jsx)(n.code,{children:'["1970-01-01T00:00:00Z", "2100-01-01T00:00:00Z")'})," or ",(0,r.jsx)(n.code,{children:"[0, 4102444800000)"}),"\nis used by default."]}),"\n",(0,r.jsxs)(n.li,{children:["For time types specifies the min/max as two strings in the ",(0,r.jsx)(n.code,{children:"HH:MM:SS"})," format.\nAlternatively, the range values can be specified in milliseconds as two positive integers.\nIf not set, the range is 24h."]}),"\n",(0,r.jsxs)(n.li,{children:['For date types, the min/max range is specified as two strings in the "YYYY-MM-DD" format.\nAlternatively, two integers that represent number of days since January 1, 1970 can be used.\nIf not set, a range of ',(0,r.jsx)(n.code,{children:'["1970-01-01", "2100-01-01")'})," or ",(0,r.jsx)(n.code,{children:"[0, 54787)"})," is used by default."]}),"\n",(0,r.jsxs)(n.li,{children:["For array, binary or varbinary types specifies the min/max number of elements it should contain.\nIf not set, a range of ",(0,r.jsx)(n.code,{children:"[0, 5)"})," is used by default. Range values are required to be >=0."]}),"\n",(0,r.jsxs)(n.li,{children:["For map types specifies the min/max number of key-value pairs it should contain.\nIf not set, a range of ",(0,r.jsx)(n.code,{children:"[0, 5)"})," is used by default."]}),"\n",(0,r.jsxs)(n.li,{children:["For struct/boolean/null types ",(0,r.jsx)(n.code,{children:"range"})," is ignored."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"values"})," parameter can be used to specify a list of values to pick from. If set, the ",(0,r.jsx)(n.code,{children:"range"})," parameter is ignored.\nThe values given in the list must be of the same type as the field."]}),"\n",(0,r.jsxs)(n.p,{children:["A field can have an optional ",(0,r.jsx)(n.code,{children:"scale"})," parameter that is applied as a multiplier to the value generated\nby the strategy. The default scale is ",(0,r.jsx)(n.code,{children:"1"}),". The ",(0,r.jsx)(n.code,{children:"scale"})," factor is only applicable in combination with either the\n",(0,r.jsx)(n.code,{children:"increment"})," or ",(0,r.jsx)(n.code,{children:"uniform"})," strategy. The following rules apply:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For integer/floating point types, the value is multiplied by the scale factor."}),"\n",(0,r.jsx)(n.li,{children:"For timestamp types, the generated value (milliseconds) is multiplied by the scale factor."}),"\n",(0,r.jsx)(n.li,{children:"For time types, the generated value (milliseconds) is multiplied by the scale factor."}),"\n",(0,r.jsx)(n.li,{children:"For date types, the generated value (days) is multiplied by the scale factor."}),"\n",(0,r.jsxs)(n.li,{children:["For string/binary types, the scale factor is ignored except with the ",(0,r.jsx)(n.code,{children:"increment"})," strategy where\nit applies the scale to the number that is formatted as a string."]}),"\n",(0,r.jsx)(n.li,{children:"For array/map/struct/binary/varbinary/boolean/null types, the scale factor is ignored."}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"values"})," is specified, the scale factor is ignored."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"null_percentage"})," adds a chance for generating ",(0,r.jsx)(n.code,{children:"null"})," values for this field. If not specified, the field will\nnever be ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"nested-types",children:"Nested Types"}),"\n",(0,r.jsxs)(n.p,{children:["If the type of the field is of type ",(0,r.jsx)(n.code,{children:"array"}),", ",(0,r.jsx)(n.code,{children:"binary"})," or ",(0,r.jsx)(n.code,{children:"varbinary"})," the ",(0,r.jsx)(n.code,{children:"value"})," parameter defines the field\nsettings for the elements of the array."]}),"\n",(0,r.jsxs)(n.p,{children:["If the type of the field is map, the ",(0,r.jsx)(n.code,{children:"key"}),"/",(0,r.jsx)(n.code,{children:"value"})," define the field settings for the two types of the map."]}),"\n",(0,r.jsxs)(n.p,{children:["If the type of the field is struct, the ",(0,r.jsx)(n.code,{children:"fields"})," list defines the field settings for each member of the struct."]}),"\n",(0,r.jsx)(n.h4,{id:"string-generation-strategies",children:"String Generation Strategies"}),"\n",(0,r.jsx)(n.p,{children:"In case the field type is a string, various strategies can be used to generate different kinds of strings."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Lorem: ",(0,r.jsx)(n.code,{children:"word"}),", ",(0,r.jsx)(n.code,{children:"words"}),", ",(0,r.jsx)(n.code,{children:"sentence"}),", ",(0,r.jsx)(n.code,{children:"sentences"}),", ",(0,r.jsx)(n.code,{children:"paragraph"}),", ",(0,r.jsx)(n.code,{children:"paragraphs"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Name: ",(0,r.jsx)(n.code,{children:"first_name"}),", ",(0,r.jsx)(n.code,{children:"last_name"}),", ",(0,r.jsx)(n.code,{children:"title"}),", ",(0,r.jsx)(n.code,{children:"suffix"}),", ",(0,r.jsx)(n.code,{children:"name"}),", ",(0,r.jsx)(n.code,{children:"name_with_title"}),", ",(0,r.jsx)(n.code,{children:"phone_number"}),", ",(0,r.jsx)(n.code,{children:"cell_number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Internet: ",(0,r.jsx)(n.code,{children:"domain_suffix"}),", ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"username"}),", ",(0,r.jsx)(n.code,{children:"password"}),", ",(0,r.jsx)(n.code,{children:"ipv4"}),", ",(0,r.jsx)(n.code,{children:"ipv6"}),", ",(0,r.jsx)(n.code,{children:"ip"}),", ",(0,r.jsx)(n.code,{children:"mac_address"}),", ",(0,r.jsx)(n.code,{children:"user_agent"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Company: ",(0,r.jsx)(n.code,{children:"company_suffix"}),", ",(0,r.jsx)(n.code,{children:"company_name"}),", ",(0,r.jsx)(n.code,{children:"buzzword"}),", ",(0,r.jsx)(n.code,{children:"buzzword_middle"}),", ",(0,r.jsx)(n.code,{children:"buzzword_tail"}),", ",(0,r.jsx)(n.code,{children:"catch_phrase"}),", ",(0,r.jsx)(n.code,{children:"bs_verb"}),", ",(0,r.jsx)(n.code,{children:"bs_adj"}),", ",(0,r.jsx)(n.code,{children:"bs_noun"}),", ",(0,r.jsx)(n.code,{children:"bs"}),", ",(0,r.jsx)(n.code,{children:"profession"}),", ",(0,r.jsx)(n.code,{children:"industry"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Currency: ",(0,r.jsx)(n.code,{children:"currency_code"}),", ",(0,r.jsx)(n.code,{children:"currency_name"}),", ",(0,r.jsx)(n.code,{children:"currency_symbol"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Finance: ",(0,r.jsx)(n.code,{children:"credit_card_number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Address: ",(0,r.jsx)(n.code,{children:"city_prefix"}),", ",(0,r.jsx)(n.code,{children:"city_suffix"}),", ",(0,r.jsx)(n.code,{children:"city_name"}),", ",(0,r.jsx)(n.code,{children:"country_name"}),", ",(0,r.jsx)(n.code,{children:"country_code"}),", ",(0,r.jsx)(n.code,{children:"street_suffix"}),", ",(0,r.jsx)(n.code,{children:"street_name"}),", ",(0,r.jsx)(n.code,{children:"time_zone"}),", ",(0,r.jsx)(n.code,{children:"state_name"}),", ",(0,r.jsx)(n.code,{children:"state_abbr"}),", ",(0,r.jsx)(n.code,{children:"secondary_address_type"}),", ",(0,r.jsx)(n.code,{children:"secondary_address"}),", ",(0,r.jsx)(n.code,{children:"zip_code"}),", ",(0,r.jsx)(n.code,{children:"post_code"}),", ",(0,r.jsx)(n.code,{children:"building_number"}),", ",(0,r.jsx)(n.code,{children:"latitude"}),", ",(0,r.jsx)(n.code,{children:"longitude"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Barcode: ",(0,r.jsx)(n.code,{children:"isbn10"}),", ",(0,r.jsx)(n.code,{children:"isbn13"}),", ",(0,r.jsx)(n.code,{children:"isbn"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Files: ",(0,r.jsx)(n.code,{children:"file_path"}),", ",(0,r.jsx)(n.code,{children:"file_name"}),", ",(0,r.jsx)(n.code,{children:"file_extension"}),", ",(0,r.jsx)(n.code,{children:"dir_path"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For some of these parameters (",(0,r.jsx)(n.code,{children:"words"}),", ",(0,r.jsx)(n.code,{children:"sentences"}),", ",(0,r.jsx)(n.code,{children:"paragraphs"}),") the length of the resulting string is controlled with\nthe ",(0,r.jsx)(n.code,{children:"range"})," parameter."]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A table with no configuration generates incrementing values for all types:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE Stocks (\n    symbol VARCHAR NOT NULL,\n    price_time BIGINT NOT NULL,  -- UNIX timestamp\n    price DECIMAL(38, 2) NOT NULL\n) with (\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {}\n    }\n  }]\'\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Will generate the following data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+--------+------------+------------------+\n| symbol | price_time | price            |\n+--------+------------+------------------+\n| 0   | 0             | 0                |\n| 1   | 1             | 1                |\n| 2   | 2             | 2                |\n| 3   | 3             | 3                |\n| 4   | 4             | 4                |\n<skipped>\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A table with a single plan that generates 5 rows with a rate of 1 row per second:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE Stocks (\n    symbol VARCHAR NOT NULL,\n    price_time BIGINT NOT NULL,  -- UNIX timestamp\n    price DECIMAL(38, 2) NOT NULL\n) with (\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 5,\n            "rate": 1,\n            "fields": {\n                "symbol": { "values": ["AAPL", "GOOGL", "SPY", "NVDA"] },\n                "price": { "strategy": "uniform", "range": [100, 10000] }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Will generate the following data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+--------+------------+------------------+\n| symbol | price_time | price            |\n+--------+------------+------------------+\n| AAPL   | 0          | 7872.823776513556|\n| GOOGL  | 1          | 4942.908519064813|\n| SPY    | 2          | 6120.359304755155|\n| NVDA   | 3          | 2985.127163635988|\n| AAPL   | 4          | 6762.121127526935|\n+--------+------------+------------------+\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A table with a ",(0,r.jsx)(n.code,{children:"VARBINARY"})," type, datagen is configured so the array will contain a growing number of elements\nfrom 0 and 4, each element will be a random byte in range ",(0,r.jsx)(n.code,{children:"128..256"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE binary_tbl (\n    bin VARBINARY NOT NULL\n) with (\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 5,\n            "fields": {\n                "bin": { "range": [0, 5], "value": { "strategy": "uniform", "range": [128, 256] } }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Will generate the following data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+----------------------+\n| bin                  |\n+----------------------+\n| []                   |\n| [128]                |\n| [203, 175]           |\n| [174, 228, 209]      |\n| [219, 208, 161, 147] |\n| []                   |\n+----------------------+\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A table with date, timestamp and time types and specified ",(0,r.jsx)(n.code,{children:"range"})," for each field (the values wrap around\nafter second row):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE times (\n    dt DATE NOT NULL,\n    ts TIMESTAMP NOT NULL,\n    t TIME NOT NULL\n) with (\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 3,\n            "rate": 1,\n            "fields": {\n                "ts": { "range": ["2024-08-28T00:00:00Z", "2024-08-28T00:00:02Z"], "scale": 1000 },\n                "dt": { "range": ["2024-08-28", "2024-08-30"] },\n                "t": { "range": ["00:00:05", "00:00:07"], "scale": 1000 }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Will generate the following data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------------+---------------------+----------+\n| dt         | ts                  | t        |\n+------------+---------------------+----------+\n| 2024-08-28 | 2024-08-28 00:00:00 | 00:00:05 |\n| 2024-08-29 | 2024-08-28 00:00:01 | 00:00:06 |\n| 2024-08-28 | 2024-08-28 00:00:00 | 00:00:05 |\n+------------+---------------------+----------+\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A table with values provided inline in columnar format:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE example1 (\n    col1 INT NOT NULL,\n    col2 VARCHAR NOT NULL\n) WITH (\n  \'connectors\' = \'[{\n    "transport": {\n      "name": "datagen",\n      "config": {\n        "plan": [{\n            "limit": 4,\n            "fields": {\n                "col1": { "values": [1, 2, 3, 4] },\n                "col2": { "values": ["a", "b", "c", "d"] }\n            }\n        }]\n      }\n    }\n  }]\'\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Will generate the following data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"+------+------+\n| col1 | col2 |\n+------+------+\n| 1    | a    |\n| 2    | b    |\n| 3    | c    |\n| 4    | d    |\n+------+------+\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);