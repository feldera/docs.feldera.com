"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[2502],{28453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>l});var i=n(96540);const t={},r=i.createContext(t);function d(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:s},e.children)}},34918:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/resources_status-8d19f002f6be429c5555862dcea4a009.png"},56296:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"pipelines/lifecycle","title":"Pipeline lifecycle","description":"The status of a pipeline, returned by the status endpoint","source":"@site/docs/pipelines/lifecycle.md","sourceDirName":"pipelines","slug":"/pipelines/lifecycle","permalink":"/pipelines/lifecycle","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Raw Format","permalink":"/formats/raw"},"next":{"title":"Settings","permalink":"/pipelines/configuration"}}');var t=n(74848),r=n(28453);const d={},l="Pipeline lifecycle",o={},c=[{value:"Resources status",id:"resources-status",level:2},{value:"Resources status API",id:"resources-status-api",level:3},{value:"Resources status table",id:"resources-status-table",level:3},{value:"Resources status diagram",id:"resources-status-diagram",level:3},{value:"Storage status",id:"storage-status",level:2},{value:"Storage status API",id:"storage-status-api",level:3},{value:"Storage status table",id:"storage-status-table",level:3},{value:"Storage status diagram",id:"storage-status-diagram",level:3},{value:"Runtime status",id:"runtime-status",level:2},{value:"Runtime status API",id:"runtime-status-api",level:3},{value:"Runtime status table",id:"runtime-status-table",level:3},{value:"Runtime status diagram",id:"runtime-status-diagram",level:3},{value:"Program status (compilation status)",id:"program-status-compilation-status",level:2},{value:"Program status API",id:"program-status-api",level:3},{value:"Program status table",id:"program-status-table",level:3},{value:"Program status diagram",id:"program-status-diagram",level:3},{value:"Combined status",id:"combined-status",level:2},{value:"Combined status API",id:"combined-status-api",level:3},{value:"Combined status table",id:"combined-status-table",level:3},{value:"Combined status diagram",id:"combined-status-diagram",level:3}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"pipeline-lifecycle",children:"Pipeline lifecycle"})}),"\n",(0,t.jsxs)(s.p,{children:["The status of a pipeline, returned by the ",(0,t.jsx)(s.a,{href:"https://docs.feldera.com/api/retrieve-a-pipeline",children:"status endpoint"}),"\nconsists of four related yet separate statuses:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Resources status:"})," whether compute and storage resources are provisioned to run the pipeline."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Storage status:"})," whether storage resources are in use or are (being) cleared."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Runtime status:"})," status reported by the pipeline process itself regarding its current activity."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Program status:"})," whether the SQL (with UDF) is being or has been compiled to an executable."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["For convenience, there is additionally a ",(0,t.jsx)(s.strong,{children:"combined status"})," that combines the resources status\nwith the runtime status as they are complementary."]}),"\n",(0,t.jsx)(s.h2,{id:"resources-status",children:"Resources status"}),"\n",(0,t.jsxs)(s.p,{children:["There are two categories of resources: ",(0,t.jsx)(s.strong,{children:"storage"})," and ",(0,t.jsx)(s.strong,{children:"compute"})," resources.\nThe backing that provides these resources depends on the Feldera edition:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"OSS edition:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Storage resources: a local directory"}),"\n",(0,t.jsx)(s.li,{children:"Compute resources: a local process"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Enterprise edition:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Storage resources: Kubernetes PersistentVolumeClaim (PVC)"}),"\n",(0,t.jsx)(s.li,{children:"Compute resources: Kubernetes StatefulSet, Service and ConfigMap"}),"\n",(0,t.jsx)(s.li,{children:"The StatefulSet pod keeps the pipeline process continuously alive."}),"\n",(0,t.jsx)(s.li,{children:"Provisioning means the creation of the Kubernetes objects and passing the first health check,\nconversely deprovisioning means the deletion of the Kubernetes objects."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"resources-status-api",children:"Resources status API"}),"\n",(0,t.jsx)(s.p,{children:"The resources status reflects whether storage is (being) provisioned and whether compute is (being)\nprovisioned or deprovisioned."}),"\n",(0,t.jsxs)(s.p,{children:["You control this through the ",(0,t.jsx)(s.code,{children:"/start"})," and ",(0,t.jsx)(s.code,{children:"/stop"})," endpoints:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"/start"})," sets the desired status to ",(0,t.jsx)(s.code,{children:"Provisioned"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"/stop"})," sets the desired status to ",(0,t.jsx)(s.code,{children:"Stopped"})]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["These calls return right away, but the actual provisioning or deprovisioning happens asynchronously\nand may take time. Storage can only be deprovisioned when the resources status is ",(0,t.jsx)(s.code,{children:"Stopped"}),", and its\nstate is tracked by the storage status."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Relevant API fields:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"deployment_id"})," (set becoming ",(0,t.jsx)(s.code,{children:"Provisioning"}),", unset becoming ",(0,t.jsx)(s.code,{children:"Stopping"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"deployment_config"})," (set becoming ",(0,t.jsx)(s.code,{children:"Provisioning"}),", unset becoming ",(0,t.jsx)(s.code,{children:"Stopping"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"deployment_error"})," (set becoming ",(0,t.jsx)(s.code,{children:"Stopping"})," (if error), unset becoming ",(0,t.jsx)(s.code,{children:"Provisioning"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"deployment_initial"})," (set when desired status becomes ",(0,t.jsx)(s.code,{children:"Provisioned"}),", unset becoming ",(0,t.jsx)(s.code,{children:"Stopping"}),"\nor desired status becomes ",(0,t.jsx)(s.code,{children:"Stopped"})," while status is still ",(0,t.jsx)(s.code,{children:"Stopped"}),")"]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_resources_status"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_resources_status_since"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_resources_desired_status"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_resources_desired_status_since"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"resources-status-table",children:"Resources status table"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Resources status"}),(0,t.jsx)(s.th,{children:"Compute resources"}),(0,t.jsx)(s.th,{children:"Storage resources"}),(0,t.jsx)(s.th,{children:"Storage status"}),(0,t.jsx)(s.th,{children:"Program status"}),(0,t.jsx)(s.th,{children:"Runtime status"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.strong,{children:"Stopped"}),"*"]}),(0,t.jsx)(s.td,{children:"Deprovisioned."}),(0,t.jsx)(s.td,{children:"Any"}),(0,t.jsx)(s.td,{children:"Any"}),(0,t.jsx)(s.td,{children:"Any"}),(0,t.jsx)(s.td,{children:"-"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Provisioning"})}),(0,t.jsx)(s.td,{children:"Being provisioned."}),(0,t.jsx)(s.td,{children:"Already provisioned or being provisioned."}),(0,t.jsx)(s.td,{children:"InUse"}),(0,t.jsx)(s.td,{children:"Success"}),(0,t.jsx)(s.td,{children:"-"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.strong,{children:"Provisioned"}),"*"]}),(0,t.jsx)(s.td,{children:"Provisioned."}),(0,t.jsx)(s.td,{children:"Provisioned."}),(0,t.jsx)(s.td,{children:"InUse"}),(0,t.jsx)(s.td,{children:"Success"}),(0,t.jsx)(s.td,{children:"Any"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Stopping"})}),(0,t.jsx)(s.td,{children:"Being deprovisioned."}),(0,t.jsx)(s.td,{children:"Provisioned."}),(0,t.jsx)(s.td,{children:"InUse"}),(0,t.jsx)(s.td,{children:"Success"}),(0,t.jsx)(s.td,{children:"-"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"(*) Also a possible desired status"}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{}),(0,t.jsx)(s.td,{})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"resources-status-diagram",children:"Resources status diagram"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Resources status diagram",src:n(34918).A+"",width:"532",height:"362"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Resource status diagram notes:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Compilation requirement:"})," A pipeline must be compiled (program status ",(0,t.jsx)(s.code,{children:"Success"}),") before it can move\nfrom ",(0,t.jsx)(s.code,{children:"Stopped"})," \u2192 ",(0,t.jsx)(s.code,{children:"Provisioning"}),". If ",(0,t.jsx)(s.code,{children:"/start"}),' is called before compilation ("early start"), it waits until\ncompilation succeeds (then goes to ',(0,t.jsx)(s.code,{children:"Provisioning"}),") or fails (then goes to ",(0,t.jsx)(s.code,{children:"Stopping"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Provisioning timeout:"})," ",(0,t.jsx)(s.strong,{children:"Provisioning"})," has a max time limit (e.g., waiting for Kubernetes objects to\nbecome healthy). If it times out, the pipeline automatically stops.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.em,{children:"Example:"})," Pods in a StatefulSet take too long to schedule."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.em,{children:"Example:"})," PersistentVolumeClaim (PVC) allocation took too long."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Resources error:"})," A fatal, unrecoverable issue with compute or storage. Temporary unavailability\n(like pod rescheduling) doesn\u2019t count.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.em,{children:"Example:"})," StorageClass can\u2019t allocate a PVC due to lack of space."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.em,{children:"Example:"})," StatefulSet deleted."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.em,{children:"Example:"})," Process terminated (OSS)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Runtime error:"})," The pipeline itself fails irrecoverably.","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.em,{children:"Example:"})," Pipeline circuit panicked"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsxs)(s.strong,{children:[(0,t.jsx)(s.strong,{children:"Stopping"})," due to error:"]})," If provisioning timeout, resources error or runtime error occurs, it will\ntransition to ",(0,t.jsx)(s.strong,{children:"Stopping"})," with the corresponding error set."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Initial runtime desired status for /start:"})," Use ",(0,t.jsx)(s.code,{children:"/start?initial=standby|paused|running"})," (default: ",(0,t.jsx)(s.code,{children:"running"}),")\nto control the initial state. Once set to ",(0,t.jsx)(s.code,{children:"Paused"})," or ",(0,t.jsx)(s.code,{children:"Running"})," (also at runtime), you can\u2019t return to ",(0,t.jsx)(s.code,{children:"Standby"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Graceful stop:"})," Use ",(0,t.jsx)(s.code,{children:"/stop?force=false"})," (default) to request the pipeline to stop cleanly: shut down the circuit\nand checkpoint before compute is deprovisioned. Only applies when resources are ",(0,t.jsx)(s.code,{children:"Provisioned"}),"; the ",(0,t.jsx)(s.code,{children:"force"})," parameter\nis ignored otherwise."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"storage-status",children:"Storage status"}),"\n",(0,t.jsxs)(s.p,{children:["Storage is created when the pipeline enters ",(0,t.jsx)(s.code,{children:"Provisioning"}),", but is not removed during ",(0,t.jsx)(s.code,{children:"Stopping"}),".\nThis lets you stop and restart a pipeline while keeping existing storage.\nWhen the pipeline is ",(0,t.jsx)(s.code,{children:"Stopped"}),", you can explicitly choose to deprovision (\u201cclear\u201d) the storage.\nWhat \u201cclearing\u201d does depends on the edition."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"OSS edition:"})," removing the local directory."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Enterprise edition:"})," deleting the Kubernetes PersistentVolumeClaim."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"storage-status-api",children:"Storage status API"}),"\n",(0,t.jsxs)(s.p,{children:["The storage status shows whether storage is provisioned, being cleared, or already cleared.\nDeprovisioning is triggered with the ",(0,t.jsx)(s.code,{children:"/clear"})," endpoint, but only when resources are ",(0,t.jsx)(s.code,{children:"Stopped"}),".\nWhile clearing, the pipeline cannot be started."]}),"\n",(0,t.jsxs)(s.p,{children:['There is no "desired" storage status. Calling ',(0,t.jsx)(s.code,{children:"/clear"})," sets the status to ",(0,t.jsx)(s.code,{children:"Clearing"})," and\nreturns immediately. The actual cleanup runs asynchronously, and once finished the status\nbecomes ",(0,t.jsx)(s.code,{children:"Cleared"}),"."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Relevant API fields:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"storage_status"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"storage-status-table",children:"Storage status table"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Storage status"}),(0,t.jsx)(s.th,{children:"Storage resources"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Cleared"})}),(0,t.jsx)(s.td,{children:"Deprovisioned"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Clearing"})}),(0,t.jsx)(s.td,{children:"Being deprovisioned."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"InUse"})}),(0,t.jsx)(s.td,{children:"Likely provisioned. It is possible it is not provisioned if the pipeline is stopped at the early beginning of Provisioning."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"storage-status-diagram",children:"Storage status diagram"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Storage status diagram",src:n(71994).A+"",width:"342",height:"262"})}),"\n",(0,t.jsx)(s.h2,{id:"runtime-status",children:"Runtime status"}),"\n",(0,t.jsxs)(s.p,{children:["The runtime status only exists when resources are ",(0,t.jsx)(s.code,{children:"Provisioned"}),", since it reflects the state of the running pipeline\nprocess. Unlike other statuses, it isn\u2019t controlled by the runner but reported by the pipeline process itself."]}),"\n",(0,t.jsx)(s.h3,{id:"runtime-status-api",children:"Runtime status API"}),"\n",(0,t.jsx)(s.p,{children:"The runner polls the pipeline to track both runtime status and desired status."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["At startup, ",(0,t.jsx)(s.code,{children:"/start?initial=standby|running|paused"})," sets the initial desired status."]}),"\n",(0,t.jsxs)(s.li,{children:["During runtime, you can change it with ",(0,t.jsx)(s.code,{children:"/activate"}),", ",(0,t.jsx)(s.code,{children:"/resume"}),", ",(0,t.jsx)(s.code,{children:"/pause"}),", or ",(0,t.jsx)(s.code,{children:"/stop?force=false"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["These endpoints only work when resources are ",(0,t.jsx)(s.code,{children:"Provisioned"})," and the runtime status is not ",(0,t.jsx)(s.code,{children:"Unavailable"}),".\nThe one exception to this is ",(0,t.jsx)(s.code,{children:"/stop?force=false"}),", which will result in a forceful stop if resources is not\n",(0,t.jsx)(s.code,{children:"Provisioned"}),"."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Relevant API fields:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_runtime_status"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_runtime_status_since"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_runtime_desired_status"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_runtime_desired_status_since"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"runtime-status-table",children:"Runtime status table"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Runtime status"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Unavailable"})}),(0,t.jsx)(s.td,{children:"Unable to determine the current runtime status. This status is never returned by the pipeline endpoint itself, but only determined by the runner. This can occur notably in two scenarios: (1) the runner is unable to (in time) receive a response for its sent request to the pipeline status endpoint, or (2) it received back a 503 Service Unavailable."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.strong,{children:"Standby"}),"*"]}),(0,t.jsx)(s.td,{children:"The pipeline constantly pulling the latest checkpoint to S3 but not processing any inputs."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.strong,{children:"AwaitingApproval"}),"*"]}),(0,t.jsxs)(s.td,{children:["The pipeline has been modified and is currently awaiting the user's approval to proceed with bootstrapping modified views. See ",(0,t.jsx)(s.a,{href:"/pipelines/modifying",children:"Modifying a Pipeline"})," for details."]})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["| ",(0,t.jsx)(s.strong,{children:"Initializing"}),"  | The input and output connectors are establishing connections to their data sources and sinks respectively.                                                                                                                                                                                                                                                   |\n| ",(0,t.jsx)(s.strong,{children:"Bootstrapping"})," | The pipeline was modified since the last time it was started, and is currently computing modified views. See ",(0,t.jsx)(s.a,{href:"/pipelines/modifying",children:"Modifying a Pipeline"})," for details.                                                                                                                                                                                                                                          |\n| ",(0,t.jsx)(s.strong,{children:"Replaying"}),"     | Input records that were stored in the journal but were not yet processed, are being processed first.                                                                                                                                                                                                                                                         |\n| ",(0,t.jsx)(s.strong,{children:"Paused"}),"*       | The input connectors are paused.                                                                                                                                                                                                                                                                                                                             |\n| ",(0,t.jsx)(s.strong,{children:"Running"}),"*      | The input connectors are running.                                                                                                                                                                                                                                                                                                                            |\n| ",(0,t.jsx)(s.strong,{children:"Suspended"}),"*    | The circuit is terminated and a final checkpoint has been made. This status is normally not observed as the resources (desired) status will become Stopped once it is detected.                                                                                                                                                                              |\n(*) Also a possible desired status"]}),"\n",(0,t.jsx)(s.h3,{id:"runtime-status-diagram",children:"Runtime status diagram"}),"\n",(0,t.jsx)(s.p,{children:"There are several transition restrictions:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Standby only once:"})," A pipeline can only have (desired) status ",(0,t.jsx)(s.code,{children:"Standby"})," once (or unless the storage is cleared).\nOnce the pipeline has been set to become ",(0,t.jsx)(s.code,{children:"Paused"})," or ",(0,t.jsx)(s.code,{children:"Running"}),", it is not allowed to again set desired status to\n",(0,t.jsx)(s.code,{children:"Standby"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Suspended can only be cleared by stop-and-start:"})," Once a pipeline has been suspended, it can only again become\n",(0,t.jsx)(s.code,{children:"Paused"})," or ",(0,t.jsx)(s.code,{children:"Running"})," again by stopping (which will happen automatically) and starting the pipeline."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"The diagram will be added in the future."}),"\n",(0,t.jsx)(s.h2,{id:"program-status-compilation-status",children:"Program status (compilation status)"}),"\n",(0,t.jsxs)(s.p,{children:["The program status only varies during the pipeline ",(0,t.jsx)(s.code,{children:"Stopped"})," resources status, as the pipeline\ncan only be edited in that status, and it must have successfully compiled before being started."]}),"\n",(0,t.jsx)(s.h3,{id:"program-status-api",children:"Program status API"}),"\n",(0,t.jsx)(s.p,{children:"Whenever the fields relevant to the pipeline program are edited, the program will be automatically\nrecompiled."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Relevant API fields:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"program_status"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"program_status_since"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"program_code"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"program_config"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"udf_rust"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"udf_toml"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"program_info"})," (set when becoming ",(0,t.jsx)(s.code,{children:"SqlCompiled"}),", unset when becoming ",(0,t.jsx)(s.code,{children:"Pending"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"program_error"})," (set when becoming ",(0,t.jsx)(s.code,{children:"SystemError"}),", ",(0,t.jsx)(s.code,{children:"SqlError"})," or ",(0,t.jsx)(s.code,{children:"RustError"}),",\nunset when becoming ",(0,t.jsx)(s.code,{children:"Pending"}),")"]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"program_version"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"program-status-table",children:"Program status table"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Program status"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Pending"})}),(0,t.jsx)(s.td,{children:"Pipeline program is not compiled, and is awaiting being picked up for SQL compilation."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"CompilingSql"})}),(0,t.jsx)(s.td,{children:"A compiler is compiling the pipeline program SQL."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"SqlCompiled"})}),(0,t.jsx)(s.td,{children:"The SQL has been compiled to Rust code. The pipeline program is awaiting being picked up for Rust compilation."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"CompilingRust"})}),(0,t.jsx)(s.td,{children:"A compiler is compiling the pipeline program Rust code (both generated and from UDFs)."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Success"})}),(0,t.jsx)(s.td,{children:"The pipeline program is successfully compiled and can be run."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"SystemError"})}),(0,t.jsx)(s.td,{children:"A system error (e.g., out of disk space) occurred, causing either SQL or Rust compilation to fail."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"SqlError"})}),(0,t.jsx)(s.td,{children:"An error in the SQL caused its compilation to fail."})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"RustError"})}),(0,t.jsx)(s.td,{children:"An error in the generated or UDF Rust code caused its compilation to fail."})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"program-status-diagram",children:"Program status diagram"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"Program status diagram",src:n(82255).A+"",width:"472",height:"502"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Program status diagram notes:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Resets:"})," If the SQL or Rust compiler goes down during compilation, upon restart it\nwill reset the compilation status before picking up a new job."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Rust caching:"})," Rust compilation makes use of multiple crates to enable faster compilation\nthrough parallelism and caching of already prior compiled crates."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"combined-status",children:"Combined status"}),"\n",(0,t.jsxs)(s.p,{children:["Because runtime status is not only set if the resources status is ",(0,t.jsx)(s.code,{children:"Provisioned"}),", the API for\nconvenience has a combination status which combines resources status and runtime status"]}),"\n",(0,t.jsx)(s.h3,{id:"combined-status-api",children:"Combined status API"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Relevant API fields:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_status"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_status_since"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_desired_status"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"deployment_desired_status_since"})}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"combined-status-table",children:"Combined status table"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["The combined statuses are all resources statuses except ",(0,t.jsx)(s.code,{children:"Provisioned"})," joint with the runtime statuses."]}),"\n",(0,t.jsxs)(s.li,{children:["The combined desired status are all resources desired status except ",(0,t.jsx)(s.code,{children:"Provisioned"})," joint with the runtime\ndesired statuses."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"combined-status-diagram",children:"Combined status diagram"}),"\n",(0,t.jsxs)(s.p,{children:["The diagram is the resources status diagram with the box for ",(0,t.jsx)(s.code,{children:"Provisioned"})," replaced with the diagram of\nruntime status."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},71994:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/storage_status-4e708c125bdb61c6f440755a9bfb69c3.png"},82255:(e,s,n)=>{n.d(s,{A:()=>i});const i=n.p+"assets/images/program_status-b9ccd695f1d4eea77399bf873dd204b9.png"}}]);