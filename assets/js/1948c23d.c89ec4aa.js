"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[8475],{2948:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"type":"api","id":"retrieve-the-metrics-of-all-running-pipelines-belonging-to-this-tenant","title":"Retrieve the metrics of all running pipelines belonging to this tenant.","description":"","slug":"/retrieve-the-metrics-of-all-running-pipelines-belonging-to-this-tenant","frontMatter":{},"api":{"tags":["Metrics"],"description":"The metrics are collected by making individual HTTP requests to `/metrics`\\nendpoint of each pipeline, of which only successful responses are included\\nin the returned list.","operationId":"get_metrics","responses":{"200":{"description":"Metrics of all running pipelines belonging to this tenant in Prometheus format","content":{"text/plain":{"schema":{"type":"string","format":"binary"}}}}},"security":[{"JSON web token (JWT) or API key":[]}],"method":"get","path":"/v0/metrics","parameters":[],"securitySchemes":{"JSON web token (JWT) or API key":{"type":"http","scheme":"bearer","bearerFormat":"JWT","description":"Use a JWT token obtained via an OAuth2/OIDC\\n                               login workflow or an API key obtained via\\n                               the `/v0/api-keys` endpoint."}},"info":{"title":"Feldera API","description":"\\nWith Feldera, users create data pipelines out of SQL programs.\\nA SQL program comprises tables and views, and includes as well the definition of\\ninput and output connectors for each respectively. A connector defines a data\\nsource or data sink to feed input data into tables or receive output data\\ncomputed by the views respectively.\\n\\n## Pipeline\\n\\nThe API is centered around the **pipeline**, which most importantly consists\\nout of the SQL program, but also has accompanying metadata and configuration parameters\\n(e.g., compilation profile, number of workers, etc.).\\n\\n* A pipeline is identified and referred to by its user-provided unique name.\\n* The pipeline program is asynchronously compiled when the pipeline is first created or\\n  when its program is subsequently updated.\\n* Pipeline deployment is only possible once the program is successfully compiled.\\n* A pipeline cannot be updated while it is deployed.\\n\\n## Concurrency\\n\\nEach pipeline has a version, which is incremented each time its core fields are updated.\\nThe version is monotonically increasing. There is additionally a program version which covers\\nonly the program-related core fields, and is used by the compiler to discern when to recompile.","contact":{"name":"Feldera Team","email":"dev@feldera.com"},"license":{"name":"MIT OR Apache-2.0"},"version":"0.105.0"},"postman":{"name":"Retrieve the metrics of all running pipelines belonging to this tenant.","description":{"content":"The metrics are collected by making individual HTTP requests to `/metrics`\\nendpoint of each pipeline, of which only successful responses are included\\nin the returned list.","type":"text/plain"},"url":{"path":["v0","metrics"],"host":["{{baseUrl}}"],"query":[],"variable":[]},"header":[{"key":"Accept","value":"text/plain"}],"method":"GET","auth":{"type":"bearer","bearer":[{"type":"any","value":"{{bearerToken}}","key":"token"}]}}},"source":"@site/../openapi.json","sourceDirName":".","permalink":"/api/retrieve-the-metrics-of-all-running-pipelines-belonging-to-this-tenant","previous":{"title":"Retrieve the list of demos.","permalink":"/api/retrieve-the-list-of-demos"},"next":{"title":"Retrieve the list of pipelines.","permalink":"/api/retrieve-the-list-of-pipelines"}}');var r=t(74848),s=t(28453);const o={},a="Retrieve the metrics of all running pipelines belonging to this tenant.",l=[];function c(e){const n={code:"code",h1:"h1",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"retrieve-the-metrics-of-all-running-pipelines-belonging-to-this-tenant",children:"Retrieve the metrics of all running pipelines belonging to this tenant."})}),"\n",(0,r.jsxs)(n.p,{children:["The metrics are collected by making individual HTTP requests to ",(0,r.jsx)(n.code,{children:"/metrics"}),"\nendpoint of each pipeline, of which only successful responses are included\nin the returned list."]}),"\n",(0,r.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("th",{style:{textAlign:"left"},children:"Responses"})})}),(0,r.jsx)("tbody",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"200"})}),(0,r.jsx)("div",{children:(0,r.jsx)(n.p,{children:"Metrics of all running pipelines belonging to this tenant in Prometheus format"})})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsx)("tbody",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("td",{children:(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"})})})})]})})]})})})]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);