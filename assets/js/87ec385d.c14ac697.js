"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[2962],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(96540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},40661:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"connectors/completion-tokens","title":"Synchronous Processing with Completion Tokens","description":"Completion tokens enable synchronous processing on top of Feldera\u2019s asynchronous pipelines, allowing","source":"@site/docs/connectors/completion-tokens.md","sourceDirName":"connectors","slug":"/connectors/completion-tokens","permalink":"/connectors/completion-tokens","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Input connector orchestration","permalink":"/connectors/orchestration"},"next":{"title":"Secret references","permalink":"/connectors/secret-references"}}');var s=t(74848),i=t(28453);const r={},c="Synchronous Processing with Completion Tokens",l={},a=[{value:"Background",id:"background",level:2},{value:"Completion tokens",id:"completion-tokens",level:2},{value:"Hot to generate a completion token",id:"hot-to-generate-a-completion-token",level:2},{value:"Checking completion status",id:"checking-completion-status",level:2},{value:"Example",id:"example",level:2},{value:"Step 1. Push data via HTTP",id:"step-1-push-data-via-http",level:3},{value:"Step 2. Generate a token for the URL input connector",id:"step-2-generate-a-token-for-the-url-input-connector",level:3},{value:"Step 3. Check the status of both tokens",id:"step-3-check-the-status-of-both-tokens",level:3}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"synchronous-processing-with-completion-tokens",children:"Synchronous Processing with Completion Tokens"})}),"\n",(0,s.jsx)(n.p,{children:"Completion tokens enable synchronous processing on top of Feldera\u2019s asynchronous pipelines, allowing\nusers to precisely track when a specific set of inputs has been fully processed by the pipeline."}),"\n",(0,s.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,s.jsxs)(n.p,{children:["Feldera pipelines process data ",(0,s.jsx)(n.strong,{children:"asynchronously"}),". While the incremental SQL engine is evaluating\nearlier inputs, input connectors continue ingesting data into internal buffers, and output connectors\nwrite prior results to external sinks."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Architecture of a Feldera Pipeline",src:t(54692).A+"",width:"2028",height:"514"})}),"\n",(0,s.jsxs)(n.p,{children:["However, the SQL engine itself is ",(0,s.jsx)(n.strong,{children:"synchronous"})," and ",(0,s.jsx)(n.strong,{children:"strongly consistent"}),". It processes inputs in\ndiscrete transactions\u2014each transaction: ingests a set of records from input connectors, processes them\nto completion and outputs ",(0,s.jsx)(n.strong,{children:"all"})," resulting changes to the output views before moving on to the next\ntransaction."]}),"\n",(0,s.jsx)(n.p,{children:"This enables Feldera to determine precisely when a specific set of inputs has been fully processed,\nfrom ingest all the way to writing results to data sinks. Completion tokens expose this capability via\na simple API."}),"\n",(0,s.jsx)(n.h2,{id:"completion-tokens",children:"Completion tokens"}),"\n",(0,s.jsx)(n.p,{children:"A completion token is an opaque handle representing a specific point in the input stream from one connector.\nThe client can use the completion token to check whether all inputs ingested before the token was issued have\nbeen fully processed, and the resulting outputs have been written to all data sinks attached to the pipeline."}),"\n",(0,s.jsx)(n.p,{children:"Completion tokens can be used to implement synchronous processing as follows:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Submit data to the pipeline."}),"\n",(0,s.jsx)(n.li,{children:"Generate a completion token."}),"\n",(0,s.jsx)(n.li,{children:"Wait for processing to complete by checking the token's status."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Completion tokens have several important properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A completion token is tied to a specific input connector and only tracks inputs\nreceived from this connector."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The pipeline can continue process new inputs, including from the same input connector, while the client\nis waiting on a completion token."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The client can generate any number of completion tokens for the same or different connectors to\ntrack the status of multiple inputs at the same time."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This enables efficient, overlapping execution: clients can push additional inputs while\nwaiting for earlier inputs to be processed."}),"\n",(0,s.jsx)(n.h2,{id:"hot-to-generate-a-completion-token",children:"Hot to generate a completion token"}),"\n",(0,s.jsx)(n.p,{children:"There are two ways to generate a completion token, depending on the type of the input connector:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/connectors/sources/http",children:"HTTP input connector"})," returns a token\nin response to every ",(0,s.jsx)(n.a,{href:"https://docs.feldera.com/api/push-data-to-a-sql-table",children:(0,s.jsx)(n.code,{children:"/ingress"})})," request.\nThis token tracks completion for the data ingested as part of this request."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For all other input connectors, use the\n",(0,s.jsx)(n.a,{href:"https://docs.feldera.com/api/generate-a-completion-token-for-an-input-connector",children:(0,s.jsx)(n.code,{children:"/completion_token"})}),"\nendpoint to generate a token. This token tracks all inputs ingested by the connector\nbefore the endpoint was invoked."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"checking-completion-status",children:"Checking completion status"}),"\n",(0,s.jsxs)(n.p,{children:["To check the processing status of a token, call the\n",(0,s.jsx)(n.a,{href:"https://docs.feldera.com/api/check-the-status-of-a-completion-token-returned-by-the-ingress-or-completion-token-endpoint",children:(0,s.jsx)(n.code,{children:"/completion_status"})}),"\nendpoint with the token.  The endpoint returns\n",(0,s.jsx)(n.code,{children:'"complete"'})," if the data associated with the token has been fully processed and all outputs derived from\nit have been written to all connected data sinks.  It returns ",(0,s.jsx)(n.code,{children:'"inprogress"'})," otherwise."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["We will use the Supply Chain pipeline from the ",(0,s.jsx)(n.a,{href:"/tutorials/basics/",children:"Feldera Basics Tutorial"}),' as an example.\nSelect Feldera Basics tutorial in the "Use cases and tutorials" section of the WebConsole in your\nlocal Feldera deployment or in the ',(0,s.jsx)(n.a,{href:"https://try.feldera.com/",children:"Feldera online sandbox"})," to create the\npipeline. We will use the following table from the tutorial in this example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE price (\n    part BIGINT NOT NULL,\n    vendor BIGINT NOT NULL,\n    price DECIMAL\n) WITH (\'connectors\' = \'[{\n    "name": "tutorial-price-s3",\n    "transport": {\n        "name": "url_input",\n        "config": {\n            "path": "https://feldera-basics-tutorial.s3.amazonaws.com/price.json"\n        }\n    },\n    "format": {\n        "name": "json"\n    }\n}]\');\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-1-push-data-via-http",children:"Step 1. Push data via HTTP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'curl -s -X \'POST\' http://127.0.0.1:8080/v0/pipelines/supply-chain/ingress/PRICE?format=json -d \'\n{"insert": {"part": 1, "vendor": 2, "price": 10000}}\n{"insert": {"part": 2, "vendor": 1, "price": 15000}}\n{"insert": {"part": 3, "vendor": 3, "price": 9000}}\'| jq\n'})}),"\n",(0,s.jsx)(n.p,{children:"Sample response (completion token):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "token": "eyJ1IjoiMDE5NmIxMjAtNjIwMy03YjkwLWI2YmQtMTY4OTBkZjE1ZTI4IiwiZSI6MywiYyI6M30="\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-generate-a-token-for-the-url-input-connector",children:"Step 2. Generate a token for the URL input connector"}),"\n",(0,s.jsx)(n.p,{children:"Let us generate another completion token for the URL input connector attached to the table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl -s -X 'GET' http://127.0.0.1:8080/v0/pipelines/supply-chain/tables/PRICE/connectors/tutorial-price-s3/completion_token | jq\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note that this endpoint requires the user to explicitly assign a name to the connector (",(0,s.jsx)(n.code,{children:'"name": "tutorial-price-s3"'}),")\nin the SQL table declaration."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This returns another completion token:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "token": "eyJ1IjoiMDE5NmIxMjAtNjIwMy03YjkwLWI2YmQtMTY4OTBkZjE1ZTI4IiwiZSI6MSwiYyI6M30="\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-check-the-status-of-both-tokens",children:"Step 3. Check the status of both tokens"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl -s -X 'GET' http://127.0.0.1:8080/v0/pipelines/supply-chain/completion_status?token=eyJ1IjoiMDE5NmIxMjAtNjIwMy03YjkwLWI2YmQtMTY4OTBkZjE1ZTI4IiwiZSI6MywiYyI6M30= | jq\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "complete"\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"curl -s -X 'GET' http://127.0.0.1:8080/v0/pipelines/supply-chain/completion_status?token=eyJ1IjoiMDE5NmIxMjAtNjIwMy03YjkwLWI2YmQtMTY4OTBkZjE1ZTI4IiwiZSI6MSwiYyI6M30= | jq\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "status": "complete"\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},54692:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/pipeline_architecture-6c211495a6dd45115b6d5fdf7ed79679.png"}}]);