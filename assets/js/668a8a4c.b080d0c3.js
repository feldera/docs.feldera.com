"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[9152],{10785:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"sql/uuid","title":"UUID Operations","description":"The UUID type represents 128-bit unique identifiers.","source":"@site/docs/sql/uuid.md","sourceDirName":"sql","slug":"/sql/uuid","permalink":"/sql/uuid","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Table Functions","permalink":"/sql/table"},"next":{"title":"Materialized Tables and Views","permalink":"/sql/materialized"}}');var r=n(74848),t=n(28453);const l={},c="UUID Operations",a={},d=[{value:"UUID literals",id:"uuid-literals",level:2},{value:"UUID value operations",id:"uuid-value-operations",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"uuid-operations",children:"UUID Operations"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"UUID"})," type represents 128-bit unique identifiers."]}),"\n",(0,r.jsx)(s.h2,{id:"uuid-literals",children:"UUID literals"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UUID"})," literals are specified with ",(0,r.jsx)(s.code,{children:"UUID 'string-literal'"}),", where the\nstring literal must have an appropriate shape for a UUID, composed of\nhex digits grouped in 8-4-4-4-12.  An example is: ",(0,r.jsx)(s.code,{children:"UUID '123e4567-e89b-12d3-a456-426655440000'"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"uuid-value-operations",children:"UUID value operations"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UUID"})," values can be cast to strings (",(0,r.jsx)(s.code,{children:"VARCHAR"})," or ",(0,r.jsx)(s.code,{children:"CHAR"}),"), producing\na string with a representation similar to the one of UUID literals\ndescribed above."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"CHAR"})," or ",(0,r.jsx)(s.code,{children:"VARCHAR"})," values can be cast to ",(0,r.jsx)(s.code,{children:"UUID"})," values.  The cast\nwill succeed if the string is a legal UUID literal; otherwise a runtime\nerror will occur."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UUID"})," values can be cast to ",(0,r.jsx)(s.code,{children:"BINARY"})," or ",(0,r.jsx)(s.code,{children:"VARBINARY"})," values, and will\nproduce a 16 byte result."]}),"\n",(0,r.jsxs)(s.p,{children:["Conversely, ",(0,r.jsx)(s.code,{children:"BINARY"})," and ",(0,r.jsx)(s.code,{children:"VARBINARY"})," values that have exactly 16 bytes\ncan be cast to ",(0,r.jsx)(s.code,{children:"UUID"})," values."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"UUID"})," values can be cast to ",(0,r.jsx)(s.code,{children:"VARIANT"}),"; ",(0,r.jsx)(s.code,{children:"VARIANT"})," values can be cast\nto ",(0,r.jsx)(s.code,{children:"UUID"}),"."]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>c});var i=n(96540);const r={},t=i.createContext(r);function l(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);