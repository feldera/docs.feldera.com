"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[4318],{7506:(e,s,d)=>{d.r(s),d.d(s,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"sql/float","title":"Floating Point Operations","description":"We support standard IEEE 754 floating point types.","source":"@site/docs/sql/float.md","sourceDirName":"sql","slug":"/sql/float","permalink":"/sql/float","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Decimal Operations","permalink":"/sql/decimal"},"next":{"title":"Index of Functions and SQL Constructs Supported in Feldera SQL","permalink":"/sql/function-index"}}');var r=d(74848),i=d(28453);const l={},t="Floating Point Operations",c={},o=[{value:"Predefined functions on Floating-point Values",id:"predefined-functions-on-floating-point-values",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"floating-point-operations",children:"Floating Point Operations"})}),"\n",(0,r.jsx)(s.p,{children:"We support standard IEEE 754 floating point types."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"double"})," is a 64-bit standard FP value.  Accepted synonyms are\n",(0,r.jsx)(s.code,{children:"float8"})," and ",(0,r.jsx)(s.code,{children:"float64"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"float"})," is a 32-bit standard FP value.  Accepted synonyms are\n",(0,r.jsx)(s.code,{children:"float4"}),", and ",(0,r.jsx)(s.code,{children:"float32"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["Floating point values include special values, such as ",(0,r.jsx)(s.code,{children:"NaN"})," (not a\nnumber), ",(0,r.jsx)(s.code,{children:"-Infinity"}),", and ",(0,r.jsx)(s.code,{children:"-Infinity"}),".  An alternative spelling for\n",(0,r.jsx)(s.code,{children:"-Infinity"})," is ",(0,r.jsx)(s.code,{children:"-inf"}),", and an alternative spelling for ",(0,r.jsx)(s.code,{children:"Infinity"})," is\n",(0,r.jsx)(s.code,{children:"inf"}),", and an alternative spelling for 'NaN' is 'nan'.  When written\nas SQL literals, these values have to be surrounded by simple quotes:\n",(0,r.jsx)(s.code,{children:"'inf'"}),".  Please note that these strings are case-sensitive and spaces\nare ignored."]}),"\n",(0,r.jsxs)(s.p,{children:["Infinity plus any finite value equals Infinity, as does Infinity plus\nInfinity.  Infinity minus ",(0,r.jsx)(s.code,{children:"Infinity"})," yields ",(0,r.jsx)(s.code,{children:"NaN"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"NaN"})," (not a number) value is used to represent undefined results.\nAn operation with a ",(0,r.jsx)(s.code,{children:"NaN"})," input yields ",(0,r.jsx)(s.code,{children:"NaN"}),".  The only exception\nis when the operation's output does not depend on the ",(0,r.jsx)(s.code,{children:"NaN"})," value:\nan example is ",(0,r.jsx)(s.code,{children:"NaN"})," raised to the zero power yields one."]}),"\n",(0,r.jsxs)(s.p,{children:["In sorting order ",(0,r.jsx)(s.code,{children:"NaN"})," is considered greater than all other values."]}),"\n",(0,r.jsxs)(s.p,{children:["The legal operations are ",(0,r.jsx)(s.code,{children:"+"})," (plus, unary and binary), ",(0,r.jsx)(s.code,{children:"-"})," (minus,\nunary and binary), ",(0,r.jsx)(s.code,{children:"*"})," (multiplication), ",(0,r.jsx)(s.code,{children:"/"})," (division), ",(0,r.jsx)(s.code,{children:"%"}),"\n(modulus)."]}),"\n",(0,r.jsxs)(s.p,{children:["Modulus happens as follows:\nFor: ",(0,r.jsx)(s.code,{children:"mod = x % y"})]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["if ",(0,r.jsx)(s.code,{children:"x >= 0"})," and ",(0,r.jsx)(s.code,{children:"y > 0"})," then: ",(0,r.jsx)(s.code,{children:"x - (floor(x / y) * y)"})]}),"\n",(0,r.jsxs)(s.li,{children:["if ",(0,r.jsx)(s.code,{children:"x >= 0"})," and ",(0,r.jsx)(s.code,{children:"y < 0"})," then: ",(0,r.jsx)(s.code,{children:"x % abs(y)"})]}),"\n",(0,r.jsxs)(s.li,{children:["if ",(0,r.jsx)(s.code,{children:"x < 0"})," and ",(0,r.jsx)(s.code,{children:"y > 0"})," then: ",(0,r.jsx)(s.code,{children:"- abs(x) % y"})]}),"\n",(0,r.jsxs)(s.li,{children:["if ",(0,r.jsx)(s.code,{children:"x < 0"})," and ",(0,r.jsx)(s.code,{children:"y > 0"})," then: ",(0,r.jsx)(s.code,{children:"- abs(x) % abs(y)"})]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Division by zero returns Infinity, (or ",(0,r.jsx)(s.code,{children:"NaN"})," in case of ",(0,r.jsx)(s.code,{children:"0e0 / 0e0"}),").\nModulus by zero return ",(0,r.jsx)(s.code,{children:"NaN"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["Casting a string to a floating-point value will produce the value\n",(0,r.jsx)(s.code,{children:"0"})," when parsing fails."]}),"\n",(0,r.jsxs)(s.p,{children:["Casting a value that is out of the supported range to a floating\npoint type will produce a value that is ",(0,r.jsx)(s.code,{children:"inf"})," or ",(0,r.jsx)(s.code,{children:"-inf"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["Casting a floating-point value to string, ",(0,r.jsx)(s.code,{children:"float"})," is rounded off\nto 6 decimal places and ",(0,r.jsx)(s.code,{children:"double"})," is rounded off to 15 decimal places."]}),"\n",(0,r.jsxs)(s.p,{children:["Please note that numeric values with a decimal point have the\n",(0,r.jsx)(s.code,{children:"decimal"})," type by default.  To write a floating-point literal you have\nto include the ",(0,r.jsx)(s.code,{children:"e"})," for exponent using the following grammar:"]}),"\n",(0,r.jsxs)(s.p,{children:["digits",(0,r.jsx)(s.code,{children:"."}),"digits[",(0,r.jsx)(s.code,{children:"e"}),"[",(0,r.jsx)(s.code,{children:"+-"}),"]digits]"]}),"\n",(0,r.jsxs)(s.p,{children:["[digits]",(0,r.jsx)(s.code,{children:"."}),"digits[",(0,r.jsx)(s.code,{children:"e"}),"[",(0,r.jsx)(s.code,{children:"+-"}),"]digits]"]}),"\n",(0,r.jsx)(s.p,{children:"Alternatively, you can use an explicit cast:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-SQL",children:"REAL '1.23'  -- string style\n1.23::REAL   -- PostgreSQL style\n"})}),"\n",(0,r.jsx)(s.h2,{id:"predefined-functions-on-floating-point-values",children:"Predefined functions on Floating-point Values"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Function"}),(0,r.jsx)("td",{children:"Types"}),(0,r.jsx)("td",{children:"Description"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"abs"}),(0,r.jsx)("code",{children:"ABS(value)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsx)("td",{children:"absolute value"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"acos"}),(0,r.jsx)("code",{children:"ACOS(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The arccosine of the value, returned as radians. The returned value is in the range ",(0,r.jsx)("code",{children:"[0, pi]"})," or ",(0,r.jsx)("code",{children:"NaN"})," if the value is outside the range of ",(0,r.jsx)("code",{children:"[-1, 1]"}),". ",(0,r.jsx)("code",{children:"acos"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"acosh"}),(0,r.jsx)("code",{children:"ACOSH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic arccosine of the value, returned as radians. ",(0,r.jsx)("code",{children:"acosh"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"asin"}),(0,r.jsx)("code",{children:"ASIN(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The arcsine of the value, returned as radians. The returned value is in the range ",(0,r.jsx)("code",{children:"[-pi/2, pi/2]"})," or ",(0,r.jsx)("code",{children:"NaN"})," if the value is outside the range of ",(0,r.jsx)("code",{children:"[-1, 1]"}),". ",(0,r.jsx)("code",{children:"asin"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"asinh"}),(0,r.jsx)("code",{children:"ASINH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic arcsine of the value, returned as radians. ",(0,r.jsx)("code",{children:"asinh"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"atan"}),(0,r.jsx)("code",{children:"ATAN(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The arctangent of the value, returned as radians. The returned value is in the range ",(0,r.jsx)("code",{children:"[-pi/2, pi/2]"}),".",(0,r.jsx)("code",{children:"atan"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"atan2"}),(0,r.jsx)("code",{children:"ATAN2(y, x)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The arctangent of ",(0,r.jsx)("code",{children:"y/x"}),", returned as radians. ",(0,r.jsx)("code",{children:"atan2"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"atanh"}),(0,r.jsx)("code",{children:"ATANH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic arctangent of the value, returned as radians. ",(0,r.jsx)("code",{children:"atanh"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"cbrt"}),(0,r.jsx)("code",{children:"CBRT(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["Calculates the cube root of the given value. ",(0,r.jsx)("code",{children:"cbrt"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"ceil"}),(0,r.jsx)("code",{children:"CEIL(value)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsx)("td",{children:"Ceiling function: nearest integer value greater than or equal to argument (result is a floating point value)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"cos"}),(0,r.jsx)("code",{children:"COS(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The cosine of value as radians. ",(0,r.jsx)("code",{children:"cos"})," only supports argument of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"cosh"}),(0,r.jsx)("code",{children:"COSH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic cosine of the value as radians. ",(0,r.jsx)("code",{children:"cosh"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"csc"}),(0,r.jsx)("code",{children:"CSC(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The cosecant of the value as radians. ",(0,r.jsx)("code",{children:"csc"})," only supports arguments of type double, so all other types are cast to double. Returns a double. For undefined values of ",(0,r.jsx)("code",{children:"csc"})," (like ",(0,r.jsx)("code",{children:"csc(pi)"}),") a fixed arbitrary value may be returned."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"csch"}),(0,r.jsx)("code",{children:"CSCH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic cosecant of the value as radians. ",(0,r.jsx)("code",{children:"csch"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"cot"}),(0,r.jsx)("code",{children:"COT(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The cotangent of the value as radians. ",(0,r.jsx)("code",{children:"cot"})," only supports arguments of type double, so all other types are cast to double. Returns a double. For undefined values of ",(0,r.jsx)("code",{children:"cot"})," (like ",(0,r.jsx)("code",{children:"cot(pi)"}),") a fixed arbitrary value may be returned."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"coth"}),(0,r.jsx)("code",{children:"COTH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic cotangent of the value as radians. ",(0,r.jsx)("code",{children:"coth"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"degrees"}),(0,r.jsx)("code",{children:"DEGREES(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["Converts the given value in radians to degrees. ",(0,r.jsx)("code",{children:"degrees"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"exp"}),(0,r.jsx)("code",{children:"EXP(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsx)("td",{children:"Returns e raised to the power of value (exponential)."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"floor"}),(0,r.jsx)("code",{children:"FLOOR(value)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsx)("td",{children:"Floor function: nearest integer value less than or equal to argument (result is a floating point value)"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"is_inf"}),(0,r.jsx)("code",{children:"IS_INF(value)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsx)("td",{children:"Returns true if the value is infinite."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"is_nan"}),(0,r.jsx)("code",{children:"IS_NAN(value)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsx)("td",{children:"Returns true if the value is NaN. Note that two NaN values may not be equal."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"ln"}),(0,r.jsx)("code",{children:"LN(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The natural logarithm of value. Returns ",(0,r.jsx)(s.code,{children:"-inf"})," for 0. Produces a runtime error for negative numbers."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"log"}),(0,r.jsx)("code",{children:"LOG(value, [, base])"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The logarithm of value to base, or base e if it is not present.  Produces a runtime error for negative values for either value or base. Returns ",(0,r.jsx)(s.code,{children:"-inf"})," for base 0."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"log10"}),(0,r.jsx)("code",{children:"LOG10(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The logarithm base 10 of value. Returns ",(0,r.jsx)(s.code,{children:"-inf"})," for 0. Produces a runtime error for negative numbers."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"pi"}),(0,r.jsx)("code",{children:"PI"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["Returns the approximate value of ",(0,r.jsx)("code",{children:"PI"})," as double. Note that ",(0,r.jsx)("code",{children:"()"})," is not allowed. Example: ",(0,r.jsx)("code",{children:"SELECT PI;"})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"power"}),(0,r.jsx)("code",{children:"POWER(BASE, EXPONENT)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The power function, raising ",(0,r.jsx)("code",{children:"BASE"})," to the power ",(0,r.jsx)("code",{children:"EXPONENT"})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"radians"}),(0,r.jsx)("code",{children:"RADIANS(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["Converts the given value in degrees to radians. ",(0,r.jsx)("code",{children:"radians"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"round"}),(0,r.jsx)("code",{children:"ROUND(value)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsx)("td",{children:'Rounds to the nearest integer and returns it. Rounding follows "Bankers Rounding" (rounds 0.5 to the nearest even number) strategy.'})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"round2"}),(0,r.jsx)("code",{children:"ROUND(value, digits)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsxs)("td",{children:["where ",(0,r.jsx)("code",{children:"digits"})," is an integer value. Round the value to the specified number of ",(0,r.jsx)("em",{children:"decimal"})," digits after the decimal point."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"sec"}),(0,r.jsx)("code",{children:"SEC(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The secant of the value as radians. ",(0,r.jsx)("code",{children:"sec"})," only supports arguments of type double, so all other types are cast to double. Returns a double. For undefined values of ",(0,r.jsx)("code",{children:"sec"})," (like ",(0,r.jsx)("code",{children:"sec(pi / 2)"}),") a fixed arbitrary value may be returned."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"sech"}),(0,r.jsx)("code",{children:"SECH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic secant of the value as radians. ",(0,r.jsx)("code",{children:"sech"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"sin"}),(0,r.jsx)("code",{children:"SIN(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The sine of value as radians. ",(0,r.jsx)("code",{children:"sin"})," only supports argument of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"sinh"}),(0,r.jsx)("code",{children:"SINH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic sine of the value as radians. ",(0,r.jsx)("code",{children:"sinh"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"sqrt"}),(0,r.jsx)("code",{children:"SQRT(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsx)("td",{children:"Square root of value. Produces NaN for a negative value."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"tan"}),(0,r.jsx)("code",{children:"TAN(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The tangent of the value as radians. ",(0,r.jsx)("code",{children:"tan"})," only supports arguments of type double, so all other types are cast to double. Returns a double. For undefined values of ",(0,r.jsx)("code",{children:"tan"})," (like ",(0,r.jsx)("code",{children:"tan(pi / 2)"}),") a fixed arbitrary value may be returned."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"tanh"}),(0,r.jsx)("code",{children:"TANH(value)"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("code",{children:"DOUBLE"})}),(0,r.jsxs)("td",{children:["The hyperbolic tangent of the value as radians. ",(0,r.jsx)("code",{children:"tanh"})," only supports arguments of type double, so all other types are cast to double. Returns a double."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"trunc"}),(0,r.jsx)("code",{children:"TRUNC(value, digits)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsxs)("td",{children:["Same as ",(0,r.jsx)("code",{children:"TRUNCATE"}),"."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"truncate"}),(0,r.jsx)("code",{children:"TRUNCATE(value)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsx)("td",{children:"Returns the integer portion of the number. This is true truncation, no rounding is performed."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("a",{id:"truncate2"}),(0,r.jsx)("code",{children:"TRUNCATE(value, digits)"})]}),(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"REAL"}),", ",(0,r.jsx)("code",{children:"DOUBLE"})]}),(0,r.jsxs)("td",{children:["where ",(0,r.jsx)("code",{children:"digits"})," is an integer value. Truncates the value to the specified number of ",(0,r.jsx)("em",{children:"decimal"})," digits after the decimal point."]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,s,d)=>{d.d(s,{R:()=>l,x:()=>t});var n=d(96540);const r={},i=n.createContext(r);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);