"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[6480],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},61218:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/feldera-type-definitions-020622687ccc4548589d7f1a2b235b59.png"},78578:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"use_cases/otel/representing_otel_data","title":"Representing OTel Data","description":"Custom Type Definitions to Model OTel data in Feldera","source":"@site/docs/use_cases/otel/representing_otel_data.md","sourceDirName":"use_cases/otel","slug":"/use_cases/otel/representing_otel_data","permalink":"/use_cases/otel/representing_otel_data","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Use Case: OpenTelemetry","permalink":"/use_cases/otel/intro"},"next":{"title":"Sending OTel data to Feldera","permalink":"/use_cases/otel/preprocessing"}}');var r=t(74848),o=t(28453);const a={},i="Representing OTel Data",c={},l=[];function p(e){const n={a:"a",code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"representing-otel-data",children:"Representing OTel Data"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Custom Type Definitions to Model OTel data in Feldera",src:t(61218).A+"",width:"510",height:"686"})}),"\n",(0,r.jsxs)(n.p,{children:["OpenTelemetry data is typically structured as nested JSON, which we can model as user-defined SQL types (see: ",(0,r.jsx)(n.a,{href:"https://docs.feldera.com/sql/types#user-defined-types",children:"User Defined Types Docs"}),") in Feldera\nbased on the ",(0,r.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-proto/tree/main/opentelemetry/proto",children:"OTel Protobuf definitions"}),".\nWhile it is possible to represent the entire OTel JSON data as a ",(0,r.jsx)(n.code,{children:"VARIANT"})," type (",(0,r.jsx)(n.a,{href:"https://docs.feldera.com/sql/json#the-variant-type",children:"VARIANT docs"}),"),\nuser-defined types are more efficient and ergonomic in cases when the JSON schema is known in advance.\nCustom types also have a smaller memory footprint and offer better type checking."]}),"\n",(0,r.jsx)(n.p,{children:"Feldera SQL allows us to define these custom types as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TYPE KeyValue AS (\n    key VARCHAR,\n    value VARIANT\n);\n\nCREATE TYPE Event AS (\n    timeUnixNano CHAR(20),\n    name VARCHAR,\n    attributes KeyValue ARRAY\n);\n\nCREATE TYPE Span AS (\n    traceId VARCHAR,\n    spanId VARCHAR,\n    traceState VARCHAR,\n    parentSpanId VARCHAR,\n    flags BIGINT,\n    name VARCHAR,\n    kind INT,\n    startTimeUnixNano CHAR(20),\n    endTimeUnixNano CHAR(20),\n    attributes KeyValue ARRAY,\n    events Event ARRAY\n);\n\nCREATE TYPE Metric AS (\n    name VARCHAR,\n    description VARCHAR,\n    unit VARCHAR,\n    sum VARIANT,\n    gauge VARIANT,\n    summary VARIANT,\n    histogram VARIANT,\n    exponentialHistogram VARIANT,\n    metadata KeyValue ARRAY\n);\n\nCREATE TYPE LogRecords AS (\n    attributes KeyValue ARRAY,\n    timeUnixNano CHAR(20),\n    observedTimeUnixNano CHAR(20),\n    severityNumber INT,\n    severityText VARCHAR,\n    flags INT4,\n    traceId VARCHAR,\n    spanId VARCHAR,\n    eventName VARCHAR,\n    body VARIANT\n);\n\nCREATE TYPE Scope AS (\n    name VARCHAR,\n    version VARCHAR,\n    attributes KeyValue ARRAY\n);\n\nCREATE TYPE ScopeSpans AS (\n    scope Scope,\n    spans Span ARRAY\n);\n\nCREATE TYPE ScopeLogs AS (\n    scope Scope,\n    logRecords LogRecords ARRAY\n);\n\nCREATE TYPE ScopeMetrics AS (\n    scope Scope,\n    metrics Metric ARRAY\n);\n\nCREATE TYPE Resource AS (\n    attributes KeyValue ARRAY\n);\n\nCREATE TYPE ResourceMetrics AS (\n    resource Resource,\n    scopeMetrics ScopeMetrics ARRAY\n);\n\nCREATE TYPE ResourceSpans AS (\n    resource Resource,\n    scopeSpans ScopeSpans ARRAY\n);\n\nCREATE TYPE ResourceLogs AS (\n    resource Resource,\n    scopeLogs ScopeLogs ARRAY\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following graph illustrates the type hierarchy of the custom types defined above:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"OTel Type Hierarchy",src:t(99226).A+"",width:"3840",height:"1823"})}),"\n",(0,r.jsx)(n.p,{children:"Now that we have the type definitions to represent the OTel data, we create tables."}),"\n",(0,r.jsx)(n.p,{children:"Tables in Feldera model input data streams."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- concat with the type declarations above\n\n-- Input table that ingests resource spans from the collector.\nCREATE TABLE otel_traces (\n    resourceSpans ResourceSpans ARRAY\n) WITH ('append_only' = 'true');\n\n-- Input table that ingests resource logs from the collector.\nCREATE TABLE otel_logs (\n    resourceLogs ResourceLogs ARRAY\n) WITH ('append_only' = 'true');\n\n-- Input table that ingests resource metrics from the collector.\nCREATE TABLE otel_metrics (\n    resourceMetrics ResourceMetrics ARRAY\n) WITH ('append_only' = 'true');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Feldera operates on changes, so any input may be an insertion or deletion.\nSetting ",(0,r.jsx)(n.code,{children:"'append_only' = 'true'"}),", allows Feldera to potentially optimize the programs better\nand ensures only insertions are supported for this table."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},99226:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/otel-type-hierarchy-e6533589b1c7ff16669e968f8e1fbda6.png"}}]);