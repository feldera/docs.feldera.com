"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[2883],{11144:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/spreadsheet-architecture-parts-59cc4b6f1153fd4b409cb80b9a25a43a.svg"},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(96540);const r={},l=t.createContext(r);function i(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(l.Provider,{value:n},e.children)}},31827:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"use_cases/real_time_apps/part3","title":"A browser based UI","description":"This article is the third part of our series on building a billion cell spreadsheet in three parts:","source":"@site/docs/use_cases/real_time_apps/part3.md","sourceDirName":"use_cases/real_time_apps","slug":"/use_cases/real_time_apps/part3","permalink":"/use_cases/real_time_apps/part3","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Exposing Feldera Pipelines to many clients","permalink":"/use_cases/real_time_apps/part2"},"next":{"title":"Time Series Analysis with Feldera","permalink":"/tutorials/time-series"}}');var r=s(74848),l=s(28453);const i={},a="A browser based UI",c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Loading cell content",id:"loading-cell-content",level:2},{value:"Rendering the cells of the spreadsheet",id:"rendering-the-cells-of-the-spreadsheet",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"a-browser-based-ui",children:"A browser based UI"})}),"\n",(0,r.jsx)(n.p,{children:"This article is the third part of our series on building a billion cell spreadsheet in three parts:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Part 1:"})," ",(0,r.jsx)(n.a,{href:"/use_cases/real_time_apps/part1",children:"Implement core spreadsheet logic using Feldera SQL"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Part 2:"})," ",(0,r.jsx)(n.a,{href:"/use_cases/real_time_apps/part2",children:"Expose pipeline data to clients via a server"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Part 3 (this article):"})," Add a browser-based UI."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"spreadsheet-architecture-parts",src:s(11144).A+"",width:"665",height:"370"})}),"\n",(0,r.jsxs)(n.p,{children:["Try the ",(0,r.jsx)(n.a,{href:"https://xls.feldera.io",children:"live demo"})," and see the ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet",children:"GitHub repo"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["We built a minimal UI for our spreadsheet using ",(0,r.jsx)(n.a,{href:"https://www.egui.rs",children:"egui"}),", a Rust-based UI framework that compiles to WebAssembly and runs in the browser."]}),"\n",(0,r.jsxs)(n.p,{children:["Given our spreadsheet can span a billion cells, we don\u2019t want to load everything into memory at once. Instead, we need lazy data fetching as users scroll. The ",(0,r.jsx)(n.code,{children:"egui_extras"})," ",(0,r.jsx)(n.a,{href:"https://docs.rs/egui_extras/latest/egui_extras/struct.Table.html",children:"Table component"})," only renders visible rows, which helps us seamlessly load data on demand."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["The code for this article is in the ",(0,r.jsx)(n.code,{children:"client"})," folder of our ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet",children:"GitHub repository"}),". Clone the repo and follow the README instructions to run and deploy the demo."]})}),"\n",(0,r.jsxs)(n.p,{children:["The entire UI is managed by a single ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet/blob/5abfb3aedc1ffa38b23341df2ed951726aef86f0/client/src/app.rs#L106",children:"update"})," function. During runtime, egui calls this update function many times per second to determine what needs rendering."]}),"\n",(0,r.jsxs)(n.p,{children:["In this article, we\u2019ll focus on how we retrieve and cache spreadsheet cells (i.e., the client-side handling of the ",(0,r.jsx)(n.code,{children:"GET /api/spreadsheet"})," endpoint discussed in part 2)."]}),"\n",(0,r.jsx)(n.h2,{id:"loading-cell-content",children:"Loading cell content"}),"\n",(0,r.jsxs)(n.p,{children:["We connect to the /api/spreadsheet endpoint ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet/blob/5abfb3aedc1ffa38b23341df2ed951726aef86f0/client/src/app.rs#L78",children:"as soon as the UI loads"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let (ws_sender, ws_receiver) = {\n    let egui_ctx = cc.egui_ctx.clone();\n    let wakeup = move || egui_ctx.request_repaint();\n    let url = format!("{}/api/spreadsheet", server);\n    ewebsock::connect_with_wakeup(&url, Default::default(), wakeup).unwrap()\n};\nlet loader = Arc::new(Loader::new(ws_sender));\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We also configure the ewebsock library to call our wakeup closure whenever a new message arrives, triggering a re-render by invoking the ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet/blob/5abfb3aedc1ffa38b23341df2ed951726aef86f0/client/src/app.rs#L106",children:"update function"}),". Because of that, we can handle newly received or updated cells right at the start of ",(0,r.jsx)(n.code,{children:"update"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'while let Some(event) = self.ws_receiver.try_recv() {\n    match event {\n        WsEvent::Message(WsMessage::Text(update)) => {\n            let parsed = serde_json::from_str::<Cell>(&update);\n            match parsed {\n                Ok(cell) => {\n                    self.cell_cache.set(cell.id, cell.into());\n                }\n                Err(e) => {\n                    trace!("error parsing cell update: {:?} {:?}", update, e);\n                }\n            }\n        }\n        WsEvent::Opened => {\n            self.loader.is_open.store(true, Ordering::Relaxed);\n            self.loader.fetch(0..2600);\n        }\n        WsEvent::Closed => {\n            self.loader.is_open.store(false, Ordering::Relaxed);\n        }\n        _ => {\n            error!("unexpected event: {:?}", event);\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["On receiving a message from ",(0,r.jsx)(n.code,{children:"/api/spreadsheet"}),", the code parses it as a ",(0,r.jsx)(n.code,{children:"Cell"})," and stores it in the ",(0,r.jsx)(n.code,{children:"cell_cache"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When the connection first opens (",(0,r.jsx)(n.code,{children:"WsEvent::Opened"}),"), we request the first 2600 cells by sending ",(0,r.jsx)(n.code,{children:"{ from: 0, to: 2600 }"})," over the WebSocket."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Looking at the ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet/blob/5abfb3aedc1ffa38b23341df2ed951726aef86f0/client/src/cell_cache.rs#L218",children:"implementation of cell_cache"}),", you\u2019ll see it uses an ",(0,r.jsx)(n.code,{children:"LruCache"})," to store cell data (evicting the oldest entries when capacity is reached). Here\u2019s the implementation of ",(0,r.jsx)(n.code,{children:"CellCache::set"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub fn set(&mut self, id: u64, c: CellContent) {\n    let mut cells = self.cells.lock();\n    cells.push(id, Rc::new(c));\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rendering-the-cells-of-the-spreadsheet",children:"Rendering the cells of the spreadsheet"}),"\n",(0,r.jsxs)(n.p,{children:["We use the ",(0,r.jsx)(n.code,{children:"TableBuilder"})," from egui to create and render our spreadsheet table and handle mouse and keyboard events through closures provided to the API. The key ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet/blob/5abfb3aedc1ffa38b23341df2ed951726aef86f0/client/src/app.rs#L358",children:"lines for retrieving and rendering cell contents"})," from the CellCache are found here:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let cell = self.cell_cache.get(id);\n// ...\nlet cell_response = cell.ui(ui);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["where ",(0,r.jsx)(n.code,{children:"Cell::ui"})," works as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub fn ui(&self, ui: &mut Ui) -> Response {\n    if self.is_editing() {\n        let mut content = self.write_buffer.write();\n        ui.add(TextEdit::singleline(&mut *content))\n    } else {\n        let content = self.content.read().to_string();\n        ui.add(Label::new(&content).sense(Sense::click()))\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the cell is being edited, it shows a text box containing the ",(0,r.jsx)(n.code,{children:"write_buffer"}),", initialized from ",(0,r.jsx)(n.code,{children:"raw_value"})," in Feldera\u2019s ",(0,r.jsx)(n.code,{children:"spreadsheet_view"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, it displays the ",(0,r.jsx)(n.code,{children:"computed_value"}),"."]}),"\n",(0,r.jsx)(n.li,{}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Earlier we saw that we fetch only the first 2600 cells when the connection opens. To load additional cells as the user scrolls, we use lazy loading in ",(0,r.jsx)(n.code,{children:"CellCache::get"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub fn get(&mut self, id: u64) -> Rc<CellContent> {\n    let mut cells = self.cells.lock();\n\n    if let Some(c) = cells.get(&id) {\n        c.clone()\n    } else {\n        let c = Rc::new(CellContent::empty(id));\n        cells.push(id, c.clone());\n\n        if let Some(current_range) = &self.current_range {\n            if current_range.contains(&id) {\n                // Already fetching this range...\n                return c;\n            }\n        }\n\n        let start = id.saturating_sub(self.prefetch_before_after_id);\n        let end = id.saturating_add(self.prefetch_before_after_id);\n        let current_range = start..end;\n        self.current_range = Some(current_range.clone());\n        let fetcher = self.fetcher.clone();\n\n        let debouncer_clone = self.debouncer.clone();\n        debouncer_clone\n            .borrow_mut()\n            .debounce(Duration::from_millis(100), move || {\n                let mut max_retry = 10;\n                while !fetcher.fetch(current_range.clone()) && max_retry > 0 {\n                    max_retry -= 1;\n                }\n            });\n\n        c\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This function returns cached ",(0,r.jsx)(n.code,{children:"CellContent"})," if available."]}),"\n",(0,r.jsxs)(n.li,{children:["If the cell is missing in the cache, it returns an empty cell and triggers a ",(0,r.jsx)(n.code,{children:"{ from: start, to: end }"})," WebSocket request for the missing range."]}),"\n",(0,r.jsx)(n.li,{children:"A small timeout debounces these requests, preventing excessive calls if a user scrolls quickly."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["In this article, we showed how to build a minimal UI for our real-time spreadsheet using egui and WebAssembly, focusing on on-demand data fetching and caching. With these techniques in place, we can efficiently handle billions of cells without overwhelming the client\u2019s memory or bandwidth. Check out our ",(0,r.jsx)(n.a,{href:"https://github.com/feldera/techdemo-spreadsheet",children:"GitHub repository"})," for the full code and feel free to ",(0,r.jsx)(n.a,{href:"https://xls.feldera.io",children:"try the live demo"})," to see everything in action."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);