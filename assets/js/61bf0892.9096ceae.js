"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[4449],{18912:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tutorials/rest_api/index","title":"Using the REST API","description":"Feldera features a comprehensive REST API for managing","source":"@site/docs/tutorials/rest_api/index.md","sourceDirName":"tutorials/rest_api","slug":"/tutorials/rest_api/","permalink":"/tutorials/rest_api/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Grafana Integration","permalink":"/use_cases/otel/grafana"},"next":{"title":"Monitoring and Profiling","permalink":"/tutorials/monitoring/"}}');var t=i(74848),s=i(28453);const l={},a="Using the REST API",o={},c=[{value:"Setup",id:"setup",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Step 1: SQL pipeline",id:"step-1-sql-pipeline",level:3},{value:"Step 2: Starting pipeline",id:"step-2-starting-pipeline",level:3},{value:"Step 3: Pipeline progress",id:"step-3-pipeline-progress",level:3},{value:"Step 4: Read data directly from a view",id:"step-4-read-data-directly-from-a-view",level:3},{value:"Step 5: Feed data directly into a table",id:"step-5-feed-data-directly-into-a-table",level:3},{value:"Step 6: Cleanup",id:"step-6-cleanup",level:3},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"using-the-rest-api",children:"Using the REST API"})}),"\n",(0,t.jsxs)(n.p,{children:["Feldera features a comprehensive REST API for managing\n",(0,t.jsx)(n.a,{href:"/api/introduction#pipeline",children:"pipelines"}),".\nIn fact, Feldera's Web Console interacts with the backend service exclusively\nvia this public API."]}),"\n",(0,t.jsxs)(n.p,{children:["In this tutorial we will focus on invoking the\nAPI endpoints directly via ",(0,t.jsx)(n.code,{children:"curl"}),". Once you become familiar with the API,\nthese calls can be automated in your favorite scripting or programming\nlanguage (e.g., in Python using the ",(0,t.jsx)(n.code,{children:"requests"})," module)."]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"curl:"})," You must have ",(0,t.jsx)(n.strong,{children:"curl"})," installed."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Throughout this tutorial we will use several curl options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-i"})," shows the response headers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-X <METHOD>"})," specifies the request method (e.g., GET, PUT, POST, PATCH, DELETE, ...)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-N"})," disables output buffering"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-H <HEADER>"})," specifies a request header"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-s"})," enables silent mode"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"jq:"})," We'll use this for some JSON manipulation from your terminal."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Feldera instance:"}),"  If you haven't done so already, you can start Feldera locally using\n",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:(0,t.jsx)(n.strong,{children:"docker"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -L https://raw.githubusercontent.com/feldera/feldera/main/deploy/docker-compose.yml | \\\ndocker compose -f - up\n"})}),"\n",(0,t.jsx)(n.p,{children:"(leave it running in a separate terminal while going through this tutorial)"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["For the remainder of this tutorial, we will use ",(0,t.jsx)(n.a,{href:"http://127.0.0.1:8080",children:"http://127.0.0.1:8080"})," as\nthis is the default local hostname",":port"," for the docker Feldera instance.\nYou will need to change it to match the Feldera instance you are using."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"(Optional) API key:"})," If you're using Feldera via our public sandbox or enterprise offering,\nyour instance will requires authentication. If so, login to your Feldera instance and\nand generate an API key in the Web Console via the ",(0,t.jsx)(n.em,{children:"User Profile"})," icon on the top right of the UI.\nYou can add it to a ",(0,t.jsx)(n.code,{children:"curl"})," call by replacing ",(0,t.jsx)(n.code,{children:"<API-KEY>"}),"\nwith the generated string starting with ",(0,t.jsx)(n.code,{children:"apikey:..."}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl -s -H "Authorization: Bearer <API-KEY>" -X GET http://127.0.0.1:8080/v0/pipelines | jq\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["For the remainder of this tutorial, you will need to add\n",(0,t.jsx)(n.code,{children:'-H "Authorization: Bearer <API-KEY>"'})," to each of the calls."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Check whether your setup works:"})," You can verify your setup by running:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -s -X GET http://127.0.0.1:8080/v0/programs | jq\n"})}),"\n",(0,t.jsx)(n.p,{children:"... this will output a JSON array of program objects, which when there are\nnone (yet!) is empty:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[]\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Congratulations, you've already interacted with the REST API!"})}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,t.jsxs)(n.p,{children:["In this tutorial, we are going to approach a use case of supply chain management,\nwhich we also looked at in the\n",(0,t.jsx)(n.a,{href:"/tutorials/basics/",children:"UI-based tutorial"}),".\nThe use case focuses on identifying the vendors with the lowest prices for parts.\nWe will create a pipeline which ingests data from several HTTP sources\nand performs several interesting queries on them."]}),"\n",(0,t.jsx)(n.p,{children:"We'll be going through the following steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create and compile a pipeline with data connectors"}),"\n",(0,t.jsx)(n.li,{children:"Start the pipeline"}),"\n",(0,t.jsx)(n.li,{children:"Check pipeline progress"}),"\n",(0,t.jsx)(n.li,{children:"Read data directly from a view"}),"\n",(0,t.jsx)(n.li,{children:"Feed data directly into a table"}),"\n",(0,t.jsx)(n.li,{children:"Cleanup"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["... all using just ",(0,t.jsx)(n.code,{children:"curl"}),"!"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: at any point in the tutorial, don't forget you can check out the\nWeb Console by visiting ",(0,t.jsx)(n.a,{href:"http://127.0.0.1:8080",children:"http://127.0.0.1:8080"})," in your browser!"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-1-sql-pipeline",children:"Step 1: SQL pipeline"}),"\n",(0,t.jsxs)(n.p,{children:["The SQL pipeline defines tables using ",(0,t.jsx)(n.code,{children:"CREATE TABLE"})," statements\nand views using ",(0,t.jsx)(n.code,{children:"CREATE VIEW"})," statements. We will create three tables,\nnamely ",(0,t.jsx)(n.code,{children:"vendor"}),", ",(0,t.jsx)(n.code,{children:"part"}),", and ",(0,t.jsx)(n.code,{children:"price"}),". We will connect each table to different data sources using\nour URL connector. For views, we'll create ",(0,t.jsx)(n.code,{children:"low_price"})," which lists\nthe lowest available price for each part across all vendors, and ",(0,t.jsx)(n.code,{children:"preferred_vendor"})," which\nsupplements the lowest price by adding vendor information."]}),"\n",(0,t.jsxs)(n.p,{children:["Create a file called ",(0,t.jsx)(n.strong,{children:"program.sql"})," with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'CREATE TABLE vendor (\n    id BIGINT NOT NULL PRIMARY KEY,\n    name VARCHAR,\n    address VARCHAR\n)  WITH (\'connectors\' = \'[{\n    "transport": {\n        "name": "url_input", "config": {"path": "https://feldera-basics-tutorial.s3.amazonaws.com/vendor.json"}\n    },\n    "format": { "name": "json" }\n}]\');\n\nCREATE TABLE part (\n    id bigint NOT NULL PRIMARY KEY,\n    name VARCHAR\n) WITH (\'connectors\' = \'[{\n    "transport": {\n        "name": "url_input", "config": {"path": "https://feldera-basics-tutorial.s3.amazonaws.com/part.json"  }\n    },\n    "format": { "name": "json" }\n}]\');\n\n\nCREATE TABLE price (\n    part BIGINT NOT NULL,\n    vendor BIGINT NOT NULL,\n    price DECIMAL\n)\nWITH (\'connectors\' = \'[{\n    "transport": {\n        "name": "url_input", "config": {"path": "https://feldera-basics-tutorial.s3.amazonaws.com/price.json"  }\n    },\n    "format": { "name": "json" }\n}]\');\n\nCREATE VIEW low_price\n    (part, price)\n    AS\n    SELECT\n        price.part AS part,\n        MIN(price.price) AS price\n    FROM price\n    GROUP BY price.part;\n\nCREATE MATERIALIZED VIEW preferred_vendor\n    (part_id, part_name, vendor_id, vendor_name, price)\n    AS\n    SELECT\n        part.id AS part_id,\n        part.name AS part_name,\n        vendor.id AS vendor_id,\n        vendor.name AS vendor_name,\n        price.price AS price\n    FROM\n        price, part, vendor, low_price\n    WHERE\n        price.price = low_price.price AND\n        price.part = low_price.part AND\n        part.id = price.part AND\n        vendor.id = price.vendor;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Next, let's create a pipeline out of the above program. We'll use ",(0,t.jsx)(n.code,{children:"jq"})," to create a JSON object that\nspecifies the pipeline's name, description, the different configuration paramters, and fill in the\ncontents of ",(0,t.jsx)(n.code,{children:"program.sql"})," into the ",(0,t.jsx)(n.code,{children:"program_code"})," field."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl -i -X PUT http://127.0.0.1:8080/v0/pipelines/supply-chain \\\n-H \'Content-Type: application/json\' \\\n-d "$(jq -Rsn \\\n  --rawfile code program.sql \\\n  \'{\n    name: "supply-chain",\n    description: "Supply Chain Tutorial",\n    runtime_config: {\n      workers: 4\n    },\n    program_config: {},\n    program_code: $code\n  }\')"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["As response, we should get back ",(0,t.jsx)(n.code,{children:"HTTP/1.1 201 Created"})," along with the identifier of\nthe program and its version (1). When an SQL program is created or when its code is\nupdated, its version is incremented and compilation is automatically triggered."]}),"\n",(0,t.jsx)(n.p,{children:"Now let's check the program's compilation status a few times:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -s http://127.0.0.1:8080/v0/pipelines/supply-chain | jq '.program_status'\n"})}),"\n",(0,t.jsx)(n.p,{children:'...which will show "CompilingRust" at first, but in about 30 seconds or so say "Success".'}),"\n",(0,t.jsx)(n.p,{children:"The pipeline is now ready to be started."}),"\n",(0,t.jsx)(n.h3,{id:"step-2-starting-pipeline",children:"Step 2: Starting pipeline"}),"\n",(0,t.jsx)(n.p,{children:"We start the pipeline using:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -i -X POST http://127.0.0.1:8080/v0/pipelines/supply-chain/start\n"})}),"\n",(0,t.jsxs)(n.p,{children:["... which will return ",(0,t.jsx)(n.code,{children:"HTTP/1.1 202 Accepted"})," when successful."]}),"\n",(0,t.jsx)(n.p,{children:"Check that it has successfully started using:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -s GET http://127.0.0.1:8080/v0/pipelines/supply-chain | jq '.deployment_status'\n"})}),"\n",(0,t.jsx)(n.p,{children:"... which will say 'Running` when the pipeline has started:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: Connectors are only initialized when a pipeline starts to use them.\nA pipeline will not start if a connector is unable to connect to its\ndata source or sink (e.g., if a URL is misspelled)."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"To restart a pipeline (e.g., to have updates to its program or schema\ntake effect):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Shut it down:\ncurl -i -X POST http://127.0.0.1:8080/v0/pipelines/supply-chain/shutdown\n# ... wait for the current_status to become Shutdown by checking:\ncurl -X GET http://127.0.0.1:8080/v0/pipelines/supply-chain\n# ... and then start:\ncurl -i -X POST http://127.0.0.1:8080/v0/pipelines/supply-chain/start\n"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-3-pipeline-progress",children:"Step 3: Pipeline progress"}),"\n",(0,t.jsx)(n.p,{children:"A running pipeline provides several useful stats:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -sX GET http://127.0.0.1:8080/v0/pipelines/supply-chain/stats | jq\n"})}),"\n",(0,t.jsxs)(n.p,{children:["... such as the number of input and processed records.\nThe ",(0,t.jsx)(n.code,{children:"total_processed_records"})," should be ",(0,t.jsx)(n.code,{children:"9"})," (3 rows each for part, vendor, and price).\nAn example output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  ...\n  "global_metrics": {\n    ...\n    "total_input_records": 9,\n    "total_processed_records": 9,\n    ...\n  },\n  ...\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-4-read-data-directly-from-a-view",children:"Step 4: Read data directly from a view"}),"\n",(0,t.jsx)(n.p,{children:"Both input and output connectors are optional, in the sense that input and\noutput of data can directly be performed using HTTP requests as well."}),"\n",(0,t.jsxs)(n.p,{children:["We can retrieve a snapshot of the ",(0,t.jsx)(n.code,{children:"preferred\\_vendor"})," view using ",(0,t.jsx)(n.code,{children:"curl"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -X POST 'http://127.0.0.1:8080/v0/pipelines/supply-chain/egress/PREFERRED_VENDOR?format=json&mode=snapshot&query=quantiles' | jq\n"})}),"\n",(0,t.jsx)(n.p,{children:"... which for each of the parts will show the preferred vendor:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'{\n  "sequence_number": 0,\n  "json_data": [\n    {\n      "insert": {\n        "PART_ID": 1,\n        "PART_NAME": "Flux Capacitor",\n        "VENDOR_ID": 2,\n        "VENDOR_NAME": "HyperDrive Innovations",\n        "PRICE": "10000"\n      }\n    },\n    {\n      "insert": {\n        "PART_ID": 2,\n        "PART_NAME": "Warp Core",\n        "VENDOR_ID": 1,\n        "VENDOR_NAME": "Gravitech Dynamics",\n        "PRICE": "15000"\n      }\n    },\n    {\n      "insert": {\n        "PART_ID": 3,\n        "PART_NAME": "Kyber Crystal",\n        "VENDOR_ID": 3,\n        "VENDOR_NAME": "DarkMatter Devices",\n        "PRICE": "9000"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This includes Gravitech Dynamics (vendor id: 1) for the Warp Core (part id: 2)\nat a price point of 15000."}),"\n",(0,t.jsx)(n.p,{children:"It is also possible to actively monitor a view for changes rather than\nretrieving a snapshot:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -s -N -X POST 'http://127.0.0.1:8080/v0/pipelines/supply-chain/egress/PREFERRED_VENDOR?format=json&mode=watch' | jq\n"})}),"\n",(0,t.jsx)(n.p,{children:"Keep this open in a separate terminal for the next step.\nEven if there is no changes it will regularly send an empty message."}),"\n",(0,t.jsx)(n.h3,{id:"step-5-feed-data-directly-into-a-table",children:"Step 5: Feed data directly into a table"}),"\n",(0,t.jsx)(n.p,{children:"It is possible to INSERT, UPSERT or even DELETE a single row within a table. In this case,\nwe have HyperDrive Innovations supply the Warp Core at a lower price of 12000:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'curl -X \'POST\' http://127.0.0.1:8080/v0/pipelines/supply-chain/ingress/PRICE?format=json \\\n-d \'{"insert": {"part": 2, "vendor": 2, "price": 12000}}\'\n'})}),"\n",(0,t.jsx)(n.p,{children:"In the other terminal, we can see the preferred vendor view output change,\nwith a row deletion (with the previous cheapest vendor) and insertion\n(with the new cheapest vendor):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'...\n{\n  "sequence_number": 2,\n  "json_data": [\n    {\n      "insert": {\n        "PART_ID": 2,\n        "PART_NAME": "Warp Core",\n        "VENDOR_ID": 2,\n        "VENDOR_NAME": "HyperDrive Innovations",\n        "PRICE": "12000"\n      }\n    },\n    {\n      "delete": {\n        "PART_ID": 2,\n        "PART_NAME": "Warp Core",\n        "VENDOR_ID": 1,\n        "VENDOR_NAME": "Gravitech Dynamics",\n        "PRICE": "15000"\n      }\n    }\n  ]\n}\n...\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-6-cleanup",children:"Step 6: Cleanup"}),"\n",(0,t.jsx)(n.p,{children:"After you are done with the tutorial, we can clean up. First, shut\ndown the pipeline (which will automatically terminate monitoring the\nview if it is still running):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -i -X POST http://127.0.0.1:8080/v0/pipelines/supply-chain/shutdown\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check that it has been shut down using:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -s http://127.0.0.1:8080/v0/pipelines/supply-chain | jq '.deployment_status'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["... and you  should see ",(0,t.jsx)(n.code,{children:"deployment_status"})," set to ",(0,t.jsx)(n.code,{children:"Shutdown"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Next, let's DELETE the pipeline:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"curl -i -X DELETE http://127.0.0.1:8080/v0/pipelines/supply-chain\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also delete the ",(0,t.jsx)(n.code,{children:"program.sql"})," file we used to create the program."]}),"\n",(0,t.jsx)(n.p,{children:"If you are using the docker test setup, you can stop the Feldera docker instance\nusing Ctrl-C."}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,t.jsx)(n.p,{children:"Interested in building applications using the API? Consider reading our API and SQL reference."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/",children:"Browse the API documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/sql/intro/",children:"Read the SQL reference"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(96540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);