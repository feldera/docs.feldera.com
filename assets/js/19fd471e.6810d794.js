"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[9482],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},91596:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"type":"api","id":"start-resume-or-pause-the-input-connector","title":"Start (resume) or pause the input connector.","description":"","slug":"/start-resume-or-pause-the-input-connector","frontMatter":{},"api":{"tags":["Pipeline interaction"],"description":"The following values of the `action` argument are accepted: `start` and `pause`.\\n\\nInput connectors can be in either the `Running` or `Paused` state. By default,\\nconnectors are initialized in the `Running` state when a pipeline is deployed.\\nIn this state, the connector actively fetches data from its configured data\\nsource and forwards it to the pipeline. If needed, a connector can be created\\nin the `Paused` state by setting its\\n[`paused`](https://docs.feldera.com/connectors/#generic-attributes) property\\nto `true`. When paused, the connector remains idle until reactivated using the\\n`start` command. Conversely, a connector in the `Running` state can be paused\\nat any time by issuing the `pause` command.\\n\\nThe current connector state can be retrieved via the\\n`GET /v0/pipelines/{pipeline_name}/stats` endpoint.\\n\\nNote that only if both the pipeline *and* the connector state is `Running`,\\nis the input connector active.\\n```text\\nPipeline state    Connector state    Connector is active?\\n--------------    ---------------    --------------------\\nPaused            Paused             No\\nPaused            Running            No\\nRunning           Paused             No\\nRunning           Running            Yes\\n```","operationId":"post_pipeline_input_connector_action","parameters":[{"name":"pipeline_name","in":"path","description":"Unique pipeline name","required":true,"schema":{"type":"string"}},{"name":"table_name","in":"path","description":"Unique table name","required":true,"schema":{"type":"string"}},{"name":"connector_name","in":"path","description":"Unique input connector name","required":true,"schema":{"type":"string"}},{"name":"action","in":"path","description":"Input connector action (one of: start, pause)","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Action has been processed"},"404":{"description":"Pipeline, table and/or input connector with that name does not exist","content":{"application/json":{"schema":{"type":"object","description":"Information returned by REST API endpoints on error.","required":["message","error_code","details"],"properties":{"details":{"type":"object","description":"Detailed error metadata.\\nThe contents of this field is determined by `error_code`."},"error_code":{"type":"string","description":"Error code is a string that specifies this error type.","example":"CodeSpecifyingErrorType"},"message":{"type":"string","description":"Human-readable error message.","example":"Explanation of the error that occurred."}}},"examples":{"Pipeline with that name does not exist":{"value":{"message":"Unknown pipeline name \'non-existent-pipeline\'","error_code":"UnknownPipelineName","details":{"pipeline_name":"non-existent-pipeline"}}}}}}},"500":{"description":"","content":{"application/json":{"schema":{"type":"object","description":"Information returned by REST API endpoints on error.","required":["message","error_code","details"],"properties":{"details":{"type":"object","description":"Detailed error metadata.\\nThe contents of this field is determined by `error_code`."},"error_code":{"type":"string","description":"Error code is a string that specifies this error type.","example":"CodeSpecifyingErrorType"},"message":{"type":"string","description":"Human-readable error message.","example":"Explanation of the error that occurred."}}}}}},"503":{"description":"","content":{"application/json":{"schema":{"type":"object","description":"Information returned by REST API endpoints on error.","required":["message","error_code","details"],"properties":{"details":{"type":"object","description":"Detailed error metadata.\\nThe contents of this field is determined by `error_code`."},"error_code":{"type":"string","description":"Error code is a string that specifies this error type.","example":"CodeSpecifyingErrorType"},"message":{"type":"string","description":"Human-readable error message.","example":"Explanation of the error that occurred."}}},"examples":{"Disconnected during response":{"value":{"message":"Unable to reach pipeline to interact due to: the pipeline disconnected while it was processing this HTTP request. This could be because the pipeline either (a) encountered a fatal error or panic, (b) was stopped, or (c) experienced network issues -- retrying might help in the last case. Alternatively, check the pipeline logs.","error_code":"PipelineInteractionUnreachable","details":{"error":"the pipeline disconnected while it was processing this HTTP request. This could be because the pipeline either (a) encountered a fatal error or panic, (b) was stopped, or (c) experienced network issues -- retrying might help in the last case. Alternatively, check the pipeline logs."}}},"Pipeline is currently unavailable":{"value":{"message":"Unable to reach pipeline to interact due to: deployment status is currently \'unavailable\' -- wait for it to become \'running\' or \'paused\' again","error_code":"PipelineInteractionUnreachable","details":{"error":"deployment status is currently \'unavailable\' -- wait for it to become \'running\' or \'paused\' again"}}},"Pipeline is not deployed":{"value":{"message":"Unable to interact with pipeline because the deployment status (\'stopped\') is not one of the deployed statuses (\'running\', \'paused\' or \'unavailable\') -- to resolve this: wait for the pipeline to become running or paused","error_code":"PipelineInteractionNotDeployed","details":{"status":"Stopped","desired_status":"Running"}}},"Response timeout":{"value":{"message":"Unable to reach pipeline to interact due to: timeout (10s) was reached: this means the pipeline took too long to respond -- this can simply be because the request was too difficult to process in time, or other reasons (e.g., deadlock): the pipeline logs might contain additional information (original send request error: Timeout while waiting for response)","error_code":"PipelineInteractionUnreachable","details":{"error":"timeout (10s) was reached: this means the pipeline took too long to respond -- this can simply be because the request was too difficult to process in time, or other reasons (e.g., deadlock): the pipeline logs might contain additional information (original send request error: Timeout while waiting for response)"}}}}}}}},"security":[{"JSON web token (JWT) or API key":[]}],"method":"post","path":"/v0/pipelines/{pipeline_name}/tables/{table_name}/connectors/{connector_name}/{action}","securitySchemes":{"JSON web token (JWT) or API key":{"type":"http","scheme":"bearer","bearerFormat":"JWT","description":"Use a JWT token obtained via an OAuth2/OIDC\\n                               login workflow or an API key obtained via\\n                               the `/v0/api-keys` endpoint."}},"info":{"title":"Feldera API","description":"\\nWith Feldera, users create data pipelines out of SQL programs.\\nA SQL program comprises tables and views, and includes as well the definition of\\ninput and output connectors for each respectively. A connector defines a data\\nsource or data sink to feed input data into tables or receive output data\\ncomputed by the views respectively.\\n\\n## Pipeline\\n\\nThe API is centered around the **pipeline**, which most importantly consists\\nout of the SQL program, but also has accompanying metadata and configuration parameters\\n(e.g., compilation profile, number of workers, etc.).\\n\\n* A pipeline is identified and referred to by its user-provided unique name.\\n* The pipeline program is asynchronously compiled when the pipeline is first created or\\n  when its program is subsequently updated.\\n* Pipeline deployment is only possible once the program is successfully compiled.\\n* A pipeline cannot be updated while it is deployed.\\n\\n## Concurrency\\n\\nEach pipeline has a version, which is incremented each time its core fields are updated.\\nThe version is monotonically increasing. There is additionally a program version which covers\\nonly the program-related core fields, and is used by the compiler to discern when to recompile.","contact":{"name":"Feldera Team","email":"dev@feldera.com"},"license":{"name":"MIT OR Apache-2.0"},"version":"0.111.0"},"postman":{"name":"Start (resume) or pause the input connector.","description":{"content":"The following values of the `action` argument are accepted: `start` and `pause`.\\n\\nInput connectors can be in either the `Running` or `Paused` state. By default,\\nconnectors are initialized in the `Running` state when a pipeline is deployed.\\nIn this state, the connector actively fetches data from its configured data\\nsource and forwards it to the pipeline. If needed, a connector can be created\\nin the `Paused` state by setting its\\n[`paused`](https://docs.feldera.com/connectors/#generic-attributes) property\\nto `true`. When paused, the connector remains idle until reactivated using the\\n`start` command. Conversely, a connector in the `Running` state can be paused\\nat any time by issuing the `pause` command.\\n\\nThe current connector state can be retrieved via the\\n`GET /v0/pipelines/{pipeline_name}/stats` endpoint.\\n\\nNote that only if both the pipeline *and* the connector state is `Running`,\\nis the input connector active.\\n```text\\nPipeline state    Connector state    Connector is active?\\n--------------    ---------------    --------------------\\nPaused            Paused             No\\nPaused            Running            No\\nRunning           Paused             No\\nRunning           Running            Yes\\n```","type":"text/plain"},"url":{"path":["v0","pipelines",":pipeline_name","tables",":table_name","connectors",":connector_name",":action"],"host":["{{baseUrl}}"],"query":[],"variable":[{"disabled":false,"description":{"content":"(Required) Unique pipeline name","type":"text/plain"},"type":"any","value":"<string>","key":"pipeline_name"},{"disabled":false,"description":{"content":"(Required) Unique table name","type":"text/plain"},"type":"any","value":"<string>","key":"table_name"},{"disabled":false,"description":{"content":"(Required) Unique input connector name","type":"text/plain"},"type":"any","value":"<string>","key":"connector_name"},{"disabled":false,"description":{"content":"(Required) Input connector action (one of: start, pause)","type":"text/plain"},"type":"any","value":"<string>","key":"action"}]},"header":[{"key":"Accept","value":"application/json"}],"method":"POST","auth":{"type":"bearer","bearer":[{"type":"any","value":"{{bearerToken}}","key":"token"}]}}},"source":"@site/../openapi.json","sourceDirName":".","permalink":"/api/start-resume-or-pause-the-input-connector","previous":{"title":"Retrieve the status of an input connector.","permalink":"/api/retrieve-the-status-of-an-input-connector"},"next":{"title":"Retrieve the status of an output connector.","permalink":"/api/retrieve-the-status-of-an-output-connector"}}');var r=t(74848),s=t(28453);const a={},o="Start (resume) or pause the input connector.",c=[];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"start-resume-or-pause-the-input-connector",children:"Start (resume) or pause the input connector."})}),"\n",(0,r.jsxs)(n.p,{children:["The following values of the ",(0,r.jsx)(n.code,{children:"action"})," argument are accepted: ",(0,r.jsx)(n.code,{children:"start"})," and ",(0,r.jsx)(n.code,{children:"pause"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Input connectors can be in either the ",(0,r.jsx)(n.code,{children:"Running"})," or ",(0,r.jsx)(n.code,{children:"Paused"})," state. By default,\nconnectors are initialized in the ",(0,r.jsx)(n.code,{children:"Running"})," state when a pipeline is deployed.\nIn this state, the connector actively fetches data from its configured data\nsource and forwards it to the pipeline. If needed, a connector can be created\nin the ",(0,r.jsx)(n.code,{children:"Paused"})," state by setting its\n",(0,r.jsx)(n.a,{href:"https://docs.feldera.com/connectors/#generic-attributes",children:(0,r.jsx)(n.code,{children:"paused"})})," property\nto ",(0,r.jsx)(n.code,{children:"true"}),". When paused, the connector remains idle until reactivated using the\n",(0,r.jsx)(n.code,{children:"start"})," command. Conversely, a connector in the ",(0,r.jsx)(n.code,{children:"Running"})," state can be paused\nat any time by issuing the ",(0,r.jsx)(n.code,{children:"pause"})," command."]}),"\n",(0,r.jsxs)(n.p,{children:["The current connector state can be retrieved via the\n",(0,r.jsx)(n.code,{children:"GET /v0/pipelines/{pipeline_name}/stats"})," endpoint."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that only if both the pipeline ",(0,r.jsx)(n.em,{children:"and"})," the connector state is ",(0,r.jsx)(n.code,{children:"Running"}),",\nis the input connector active."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Pipeline state    Connector state    Connector is active?\n--------------    ---------------    --------------------\nPaused            Paused             No\nPaused            Running            No\nRunning           Paused             No\nRunning           Running            Yes\n"})}),"\n",(0,r.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("th",{style:{textAlign:"left"},children:"Path Parameters"})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"pipeline_name"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Unique pipeline name"})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"table_name"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Unique table name"})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"connector_name"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Unique input connector name"})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"action"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"},children:" REQUIRED"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Input connector action (one of: start, pause)"})})]})})]})]}),"\n",(0,r.jsxs)("table",{style:{display:"table",width:"100%"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsx)("th",{style:{textAlign:"left"},children:"Responses"})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"200"})}),(0,r.jsx)("div",{children:(0,r.jsx)(n.p,{children:"Action has been processed"})})]}),(0,r.jsx)("div",{})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"404"})}),(0,r.jsx)("div",{children:(0,r.jsx)(n.p,{children:"Pipeline, table and/or input connector with that name does not exist"})})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"details"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" object"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(n.p,{children:["Detailed error metadata.\nThe contents of this field is determined by ",(0,r.jsx)(n.code,{children:"error_code"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"error_code"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Error code is a string that specifies this error type."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"message"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Human-readable error message."})})]})})]})]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"500"})}),(0,r.jsx)("div",{})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"details"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" object"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(n.p,{children:["Detailed error metadata.\nThe contents of this field is determined by ",(0,r.jsx)(n.code,{children:"error_code"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"error_code"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Error code is a string that specifies this error type."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"message"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Human-readable error message."})})]})})]})]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsxs)("div",{style:{display:"flex"},children:[(0,r.jsx)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)("code",{children:"503"})}),(0,r.jsx)("div",{})]}),(0,r.jsx)("div",{children:(0,r.jsxs)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"},children:[(0,r.jsx)("thead",{children:(0,r.jsx)("tr",{children:(0,r.jsxs)("th",{style:{textAlign:"left"},children:[(0,r.jsx)("span",{children:"Schema "}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" \u2014 "}),(0,r.jsx)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"},children:" OPTIONAL"}),(0,r.jsx)("div",{})]})})}),(0,r.jsxs)("tbody",{children:[(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"details"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" object"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsxs)(n.p,{children:["Detailed error metadata.\nThe contents of this field is determined by ",(0,r.jsx)(n.code,{children:"error_code"}),"."]})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"error_code"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Error code is a string that specifies this error type."})})]})}),(0,r.jsx)("tr",{children:(0,r.jsxs)("td",{children:[(0,r.jsx)("code",{children:"message"}),(0,r.jsx)("span",{style:{opacity:"0.6"},children:" string"}),(0,r.jsx)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"},children:(0,r.jsx)(n.p,{children:"Human-readable error message."})})]})})]})]})})]})})]})]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);