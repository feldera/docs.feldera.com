"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[1231],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(96540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}},93119:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"connectors/sources/http","title":"HTTP input connector","description":"Feldera supports directly pushing data to a SQL table over HTTP.","source":"@site/docs/connectors/sources/http.md","sourceDirName":"connectors/sources","slug":"/connectors/sources/http","permalink":"/connectors/sources/http","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Input connectors","permalink":"/connectors/sources/"},"next":{"title":"HTTP GET (URL)","permalink":"/connectors/sources/http-get"}}');var t=r(74848),a=r(28453);const s={},o="HTTP input connector",l={},c=[{value:"Example usage",id:"example-usage",level:2},{value:"curl",id:"curl",level:3},{value:"One row",id:"one-row",level:4},{value:"One row while providing authorization header",id:"one-row-while-providing-authorization-header",level:4},{value:"Multiple rows as newline-delimited JSON (NDJSON)",id:"multiple-rows-as-newline-delimited-json-ndjson",level:4},{value:"Multiple rows as a JSON array (note: URL parameter <code>array=true</code>)",id:"multiple-rows-as-a-json-array-note-url-parameter-arraytrue",level:4},{value:"Delete a row",id:"delete-a-row",level:4},{value:"Python (direct API calls)",id:"python-direct-api-calls",level:3},{value:"Insert 1000 rows in batches of 50",id:"insert-1000-rows-in-batches-of-50",level:4},{value:"Python (using Python API)",id:"python-using-python-api",level:3},{value:"Insert 1000 rows in batches of 50",id:"insert-1000-rows-in-batches-of-50-1",level:4},{value:"Additional resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"http-input-connector",children:"HTTP input connector"})}),"\n",(0,t.jsx)(n.p,{children:"Feldera supports directly pushing data to a SQL table over HTTP."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Unlike other input connectors that must be created by the user as part of the SQL table\ndeclaration, the HTTP input connector is created automatically for each table in the pipeline."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Usage is through a special\nendpoint: ",(0,t.jsxs)(n.a,{href:"/api/push-data-to-a-sql-table",children:["/v0/pipelines/",":pipeline_name","/ingress/",":table_name","?format=..."]})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Specify data input format using URL query parameters\n(e.g., ",(0,t.jsx)(n.code,{children:"format=..."}),", and more depending on format)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The HTTP input connector supports ",(0,t.jsx)(n.a,{href:"/pipelines/fault-tolerance",children:"fault\ntolerance"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"example-usage",children:"Example usage"}),"\n",(0,t.jsxs)(n.p,{children:["We will insert rows into table ",(0,t.jsx)(n.code,{children:"product"})," for pipeline ",(0,t.jsx)(n.code,{children:"supply-chain-pipeline"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"curl",children:"curl"}),"\n",(0,t.jsx)(n.h4,{id:"one-row",children:"One row"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -i -X \'POST\' \\\n  http://127.0.0.1:8080/v0/pipelines/supply-chain-pipeline/ingress/product?format=json \\\n  -d \'{"insert": {"pid": 0, "name": "hammer", "price": 5.0}}\'\n'})}),"\n",(0,t.jsx)(n.h4,{id:"one-row-while-providing-authorization-header",children:"One row while providing authorization header"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -i -H "Authorization: Bearer <API-KEY>" -X \'POST\' \\\n  http://127.0.0.1:8080/v0/pipelines/supply-chain-pipeline/ingress/product?format=json \\\n  -d \'{"insert": {"pid": 0, "name": "hammer", "price": 5.0}}\'\n'})}),"\n",(0,t.jsx)(n.h4,{id:"multiple-rows-as-newline-delimited-json-ndjson",children:"Multiple rows as newline-delimited JSON (NDJSON)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -i -X \'POST\' \\\n  http://127.0.0.1:8080/v0/pipelines/supply-chain-pipeline/ingress/product?format=json \\\n  -d \'{"insert": {"pid": 0, "name": "hammer", "price": 5}}\n{"insert": {"pid": 1, "name": "nail", "price": 0.02}}\'\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"multiple-rows-as-a-json-array-note-url-parameter-arraytrue",children:["Multiple rows as a JSON array (note: URL parameter ",(0,t.jsx)(n.code,{children:"array=true"}),")"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl -i -X \'POST\' \\\n  http://127.0.0.1:8080/v0/pipelines/supply-chain-pipeline/ingress/product?format=json\\&array=true \\\n  -d \'[{"insert": {"pid": 0, "name": "hammer", "price": 5}}, {"insert": {"pid": 1, "name": "nail", "price": 0.02}}]\'\n'})}),"\n",(0,t.jsx)(n.h4,{id:"delete-a-row",children:"Delete a row"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -i -X 'POST' \\\n  http://127.0.0.1:8080/v0/pipelines/supply-chain-pipeline/ingress/product?format=json \\\n  -d '{\"delete\": {\"pid\": 1}}'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"python-direct-api-calls",children:"Python (direct API calls)"}),"\n",(0,t.jsx)(n.h4,{id:"insert-1000-rows-in-batches-of-50",children:"Insert 1000 rows in batches of 50"}),"\n",(0,t.jsx)(n.p,{children:'Insert 1000 products named "hammer" with unique product identifiers\nand a random price between 1 and 100. Batching can improve throughput.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import random\nimport requests\n\napi_url = "http://127.0.0.1:8080"\nheaders = {"authorization": f"Bearer <API-KEY>"}\n\nbatch = []\nfor product_id in range(0, 1000):\n    batch.append({"insert": {\n        "pid": product_id, "name": "hammer", "price": random.uniform(1.0, 100.0)\n    }})\n    if len(batch) >= 50 or product_id == 999:\n        requests.post(\n            f"{api_url}/v0/pipelines/supply-chain-pipeline/ingress/product?format=json&array=true",\n            json=batch, headers=headers\n        ).raise_for_status()\n        batch.clear()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"python-using-python-api",children:"Python (using Python API)"}),"\n",(0,t.jsx)(n.h4,{id:"insert-1000-rows-in-batches-of-50-1",children:"Insert 1000 rows in batches of 50"}),"\n",(0,t.jsx)(n.p,{children:'Insert 1000 products named "hammer" with unique product identifiers\nand a random price between 1 and 100. Batching can improve throughput.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import random\nimport requests\nfrom feldera import FelderaClient\n\napi_key = "<API-KEY>"\nCLIENT = FelderaClient("http://127.0.0.1:8080", api_key)\n\nbatch = []\nfor product_id in range(0, 1000):\n    batch.append({"insert": {\n        "pid": product_id, "name": "hammer", "price": random.uniform(1.0, 100.0)\n    }})\n    if len(batch) >= 50 or product_id == 999:\n        CLIENT.push_to_pipeline(\n            pipeline_name="supply-chain-pipeline",\n            table_name="product",\n            format="json",\n            array=true,\n            data=batch)\n        batch.clear()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"additional-resources",children:"Additional resources"}),"\n",(0,t.jsx)(n.p,{children:"For more information, see:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/tutorials/basics/part2",children:"Tutorial section"})," on HTTP-based input and output."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/api/push-data-to-a-sql-table",children:"REST API documentation"})," for the ",(0,t.jsx)(n.code,{children:"/ingress"})," endpoint."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Data formats such as ",(0,t.jsx)(n.a,{href:"/formats/json",children:"JSON"})," and\n",(0,t.jsx)(n.a,{href:"/formats/csv",children:"CSV"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"pathname:///python/",children:"Python API documentation"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);