"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[5944],{8487:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"formats/json","title":"JSON Format","description":"Feldera can ingest and output data in the JSON format","source":"@site/docs/formats/json.md","sourceDirName":"formats","slug":"/formats/json","permalink":"/formats/json","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Formats: Specify the shape of the data","permalink":"/formats/"},"next":{"title":"Avro Format","permalink":"/formats/avro"}}');var i=s(74848),d=s(28453);const t={},a="JSON Format",c={},o=[{value:"Encoding individual rows",id:"encoding-individual-rows",level:2},{value:"Types",id:"types",level:2},{value:"<code>BOOLEAN</code>",id:"boolean",level:3},{value:"Integers (<code>TINYINT</code>, <code>SMALLINT</code>, <code>INTEGER</code>, <code>BIGINT</code>)",id:"integers-tinyint-smallint-integer-bigint",level:3},{value:"Decimals (<code>DECIMAL</code> / <code>NUMERIC</code>)",id:"decimals-decimal--numeric",level:3},{value:"Floating point numbers (<code>FLOAT</code>, <code>DOUBLE</code>)",id:"floating-point-numbers-float-double",level:3},{value:"Strings (<code>CHAR</code>, <code>VARCHAR</code>, <code>STRING</code>, <code>TEXT</code>)",id:"strings-char-varchar-string-text",level:3},{value:"<code>TIME</code>",id:"time",level:3},{value:"<code>DATE</code>",id:"date",level:3},{value:"<code>TIMESTAMP</code>",id:"timestamp",level:3},{value:"<code>ARRAY</code>",id:"array",level:3},{value:"Encoding data change events",id:"encoding-data-change-events",level:2},{value:"The insert/delete format",id:"the-insertdelete-format",level:3},{value:"The raw format",id:"the-raw-format",level:3},{value:"Encoding multiple changes",id:"encoding-multiple-changes",level:2},{value:"Configuring JSON event streams",id:"configuring-json-event-streams",level:2},{value:"Configure connectors",id:"configure-connectors",level:3},{value:"Streaming JSON over HTTP",id:"streaming-json-over-http",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"json-format",children:"JSON Format"})}),"\n",(0,i.jsx)(n.p,{children:"Feldera can ingest and output data in the JSON format"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["via ",(0,i.jsx)(n.a,{href:"/api/push-data-to-a-sql-table",children:(0,i.jsx)(n.code,{children:"/ingress"})})," and\n",(0,i.jsx)(n.a,{href:"/api/subscribe-to-a-stream-of-updates-from-a-sql-view-or-table",children:(0,i.jsx)(n.code,{children:"/egress"})}),"\nREST endpoints, or"]}),"\n",(0,i.jsx)(n.li,{children:"as a payload received from or sent to a connector"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here we document the JSON format supported by Feldera.  The specification\nconsists of four parts:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#encoding-individual-rows",children:"Encoding invividual table rows"}),". Describes\nJSON encoding of an individual row in a SQL table or view, e.g.:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"part": 1, "vendor": 2, "price": 10000}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#encoding-data-change-events",children:"Encoding data change events"}),".\nA data change event represents an insertion, deletion, or modification\nof a single row, e.g.:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"insert": {"part": 1, "vendor": 2, "price": 30000}}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#encoding-multiple-changes",children:"Encoding multiple changes"}),". Describes JSON\nencoding of a stream of data change events, e.g.:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"delete": {"part": 1, "vendor": 2, "price": 10000}}\n{"insert": {"part": 1, "vendor": 2, "price": 30000}}\n{"insert": {"part": 2, "vendor": 3, "price": 34000}}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#configuring-json-event-streams",children:"Configuring JSON event streams"}),".\nDescribes how the user can specify the JSON format for a stream of events\nwhen sending and receiving data via connectors or over HTTP."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"encoding-individual-rows",children:"Encoding individual rows"}),"\n",(0,i.jsxs)(n.p,{children:["A row in a SQL table or view is encoded as a JSON object whose keys match\nthe names of the columns in the table.  Keys can occur in an arbitrary order.\nColumn names are case-insensitive, except for columns whose names are declared\nin double quotes (e.g., ",(0,i.jsx)(n.code,{children:'create table foo("col")'}),").  ",(0,i.jsx)(n.code,{children:"NULL"}),"s are encoded\nas JSON ",(0,i.jsx)(n.code,{children:"null"})," values or by simply omitting the columns whose value is ",(0,i.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For example, given the following table declaration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"create table json_test (\n    b BOOLEAN,\n    i INTEGER,\n    d DOUBLE,\n    v VARCHAR(32),\n    cc CHAR(16),\n    t TIME,\n    ts TIMESTAMP,\n    dt DATE,\n    ar BIGINT ARRAY\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:"the JSON encoding of a row would look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "B":true,\n    "I":-1625240816,\n    "D":0.7879946935782574,\n    "V":"quod",\n    "CC":"voluptatem",\n    "T":"05:05:24",\n    "TS":"2023-11-21 23:19:09",\n    "DT":"2495-03-07",\n    "AR":[1,2,3,4,5]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Example"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BOOLEAN"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"true"}),", ",(0,i.jsx)(n.code,{children:"false"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TINYINT,SMALLINT, INTEGER, BIGINT"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"1"}),", ",(0,i.jsx)(n.code,{children:"-9"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"FLOAT, DOUBLE, DECIMAL"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"-1.40"}),", ",(0,i.jsx)(n.code,{children:'"-1.40"'}),", ",(0,i.jsx)(n.code,{children:"12.53"}),", ",(0,i.jsx)(n.code,{children:'"12.53"'}),", ",(0,i.jsx)(n.code,{children:"1e20"}),", ",(0,i.jsx)(n.code,{children:'"1e20"'})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"VARCHAR, CHAR, STRING"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"abc"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TIME"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"12:12:33"}),", ",(0,i.jsx)(n.code,{children:"23:59:29.483"}),", ",(0,i.jsx)(n.code,{children:"23:59:09.483221092"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TIMESTAMP"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-02-25 12:12:33"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DATE"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"2024-02-25"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"BIGINT ARRAY"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[1, 2]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"VARCHAR ARRAY ARRAY"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[[ 'abc', '123'], ['c', 'sql']]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"VARIANT"}),(0,i.jsxs)(n.td,{children:["any JSON value (see ",(0,i.jsxs)(n.a,{href:"/sql/json/#processing-json-data-using-variant",children:[(0,i.jsx)(n.code,{children:"VARIANT"})," documentation"]}),")"]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"boolean",children:(0,i.jsx)(n.code,{children:"BOOLEAN"})}),"\n",(0,i.jsxs)(n.p,{children:["The accepted values are ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"integers-tinyint-smallint-integer-bigint",children:["Integers (",(0,i.jsx)(n.code,{children:"TINYINT"}),", ",(0,i.jsx)(n.code,{children:"SMALLINT"}),", ",(0,i.jsx)(n.code,{children:"INTEGER"}),", ",(0,i.jsx)(n.code,{children:"BIGINT"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Must be a valid integer and fit the range of the type (see ",(0,i.jsx)(n.a,{href:"/sql/types",children:"SQL\nTypes"}),"), otherwise an error is returned on ingress."]}),"\n",(0,i.jsxs)(n.h3,{id:"decimals-decimal--numeric",children:["Decimals (",(0,i.jsx)(n.code,{children:"DECIMAL"})," / ",(0,i.jsx)(n.code,{children:"NUMERIC"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Both the scientific notation (e.g., ",(0,i.jsx)(n.code,{children:"3e234"}),") and standard floating point numbers\n(",(0,i.jsx)(n.code,{children:"1.23"}),") are valid. The parser will accept decimals formatted as JSON numbers\n(",(0,i.jsx)(n.code,{children:"1.234"}),") or strings (",(0,i.jsx)(n.code,{children:'"1.234"'}),").  The latter representation is more robust as it\navoids loss of precision during parsing (the Rust JSON parser we use represents all\nfractional numbers as 64-bit floating point numbers internally,  which can cause loss\nof precision for decimal numbers that cannot be accurately represented in that way)."]}),"\n",(0,i.jsxs)(n.h3,{id:"floating-point-numbers-float-double",children:["Floating point numbers (",(0,i.jsx)(n.code,{children:"FLOAT"}),", ",(0,i.jsx)(n.code,{children:"DOUBLE"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:["Both the scientific notation (e.g., ",(0,i.jsx)(n.code,{children:"3e234"}),") and standard floating point numbers\n(",(0,i.jsx)(n.code,{children:"1.23"}),") are valid."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"NaN"}),", ",(0,i.jsx)(n.code,{children:"Inf"}),", and ",(0,i.jsx)(n.code,{children:"-Inf"})," floating point values are currently not supported by\nthe JSON parser and encoder."]})}),"\n",(0,i.jsxs)(n.h3,{id:"strings-char-varchar-string-text",children:["Strings (",(0,i.jsx)(n.code,{children:"CHAR"}),", ",(0,i.jsx)(n.code,{children:"VARCHAR"}),", ",(0,i.jsx)(n.code,{children:"STRING"}),", ",(0,i.jsx)(n.code,{children:"TEXT"}),")"]}),"\n",(0,i.jsx)(n.p,{children:"SQL strings are encoded as JSON strings."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The JSON parser does not currently enforce limits on the number\nof characters in a string.  Strings that exceed the length\nspecified in the SQL table declaration are ingested\nwithout truncation."})}),"\n",(0,i.jsx)(n.h3,{id:"time",children:(0,i.jsx)(n.code,{children:"TIME"})}),"\n",(0,i.jsxs)(n.p,{children:["Specifies times using the ",(0,i.jsx)(n.code,{children:"HH:MM:SS.fffffffff"})," format where:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HH"})," is hours from ",(0,i.jsx)(n.code,{children:"00-23"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MM"})," is minutes from ",(0,i.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SS"})," is seconds from ",(0,i.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fffffffff"})," is the sub-second precision up to 9 digits from ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"999999999"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A leading 0 can be skipped in hours, minutes and seconds. Specifying the\nsubsecond precision is optional and can have any number of digits from 0 to 9.\nLeading and trailing whitespaces are ignored."}),"\n",(0,i.jsx)(n.h3,{id:"date",children:(0,i.jsx)(n.code,{children:"DATE"})}),"\n",(0,i.jsxs)(n.p,{children:["Specifies dates using the ",(0,i.jsx)(n.code,{children:"YYYY-MM-DD"})," format."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYY"})," is the year from ",(0,i.jsx)(n.code,{children:"0001-9999"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MM"})," is the month from ",(0,i.jsx)(n.code,{children:"01-12"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DD"})," is the day from ",(0,i.jsx)(n.code,{children:"01-31"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Invalid dates (e.g., ",(0,i.jsx)(n.code,{children:"1997-02-29"}),") are rejected with an error during ingress.\nLeading zeros are skipped, e.g., ",(0,i.jsx)(n.code,{children:"0001-1-01"}),", ",(0,i.jsx)(n.code,{children:"1-1-1"}),", ",(0,i.jsx)(n.code,{children:"0000-1-1"})," are all\nequal and valid. Leading and trailing whitespaces are ignored."]}),"\n",(0,i.jsx)(n.h3,{id:"timestamp",children:(0,i.jsx)(n.code,{children:"TIMESTAMP"})}),"\n",(0,i.jsxs)(n.p,{children:["Specifies dates using the ",(0,i.jsx)(n.code,{children:"YYYY-MM-DD HH:MM:SS.fff"})," format."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"YYYY"})," is the year from ",(0,i.jsx)(n.code,{children:"0001-9999"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MM"})," is the month from ",(0,i.jsx)(n.code,{children:"01-12"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DD"})," is the day from ",(0,i.jsx)(n.code,{children:"01-31"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HH"})," is hours from ",(0,i.jsx)(n.code,{children:"00-23"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MM"})," is minutes from ",(0,i.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SS"})," is seconds from ",(0,i.jsx)(n.code,{children:"00-59"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fff"})," is the sub-second precision up to 3 digits from ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"999"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note that the same rules as specified in the Date and Time sections apply,\nexcept that the sub-second precision is limited to three digits (microseconds).\nSpecifying more digits for the subsecond precision on ingress will trim the\nfraction to microseconds. Leading and trailing whitespaces are ignored."}),"\n",(0,i.jsx)(n.h3,{id:"array",children:(0,i.jsx)(n.code,{children:"ARRAY"})}),"\n",(0,i.jsx)(n.p,{children:"Arrays are encoded as JSON arrays."}),"\n",(0,i.jsx)(n.h2,{id:"encoding-data-change-events",children:"Encoding data change events"}),"\n",(0,i.jsxs)(n.p,{children:["Feldera operates over streams of ",(0,i.jsx)(n.strong,{children:"data change events"}),".\nA data change event represents an insertion, deletion, or modification of a\nsingle row in a SQL table or view.  We currently support two\ndata change event formats in JSON: (1) the raw format and (2) the insert/delete format."]}),"\n",(0,i.jsx)(n.h3,{id:"the-insertdelete-format",children:"The insert/delete format"}),"\n",(0,i.jsxs)(n.p,{children:["A data change event in this format is represented as a JSON object with a\nsingle key, which must be equal to ",(0,i.jsx)(n.code,{children:"insert"})," or ",(0,i.jsx)(n.code,{children:"delete"}),".  The associated value\nrepresents the table row to be inserted or deleted, encoded using the format\ndocumented above.  Example row insertion event:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"insert": {"part": 1, "vendor": 2, "price": 30000}}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example row deletion event:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"delete": {"part": 1, "vendor": 2, "price": 10000}}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"the-raw-format",children:"The raw format"}),"\n",(0,i.jsx)(n.p,{children:"This format is applicable to append-only event streams where rows can only\nbe inserted but not deleted.  In this case, a data change event can be\nrepresented as a SQL record without any additional framing, with the insert\noperation being implied, e.g., the following data change event in the raw\nformat"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"part": 1, "vendor": 2, "price": 30000}\n'})}),"\n",(0,i.jsx)(n.p,{children:"is equivalent to"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"insert": {"part": 1, "vendor": 2, "price": 30000}}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"encoding-multiple-changes",children:"Encoding multiple changes"}),"\n",(0,i.jsx)(n.p,{children:"Data change events are exchanged as data streams transmitted over transports such\nas HTTP or Kafka.  We use a stream of JSON objects, each representing an event:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"delete": {"part": 1, "vendor": 2, "price": 10000}}\n{"insert": {"part": 1, "vendor": 2, "price": 30000}}\n{"insert": {"part": 2, "vendor": 3, "price": 34000}}\n...\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A stream of data change events can be ",(0,i.jsx)(n.a,{href:"#configuring-json-event-streams",children:"configured"}),"\nto combine multiple events into JSON arrays of data change events:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[{"delete": {"part": 1, "vendor": 2, "price": 10000}}, {"insert": {"part": 1, "vendor": 2, "price": 30000}}]\n[{"insert": {"part": 2, "vendor": 3, "price": 34000}}, {"delete": {"part": 3, "vendor": 1, "price": 5000}}]\n...\n'})}),"\n",(0,i.jsx)(n.p,{children:"This format allows one to break up the event stream into transport\nmessages so that each message contains a valid JSON document\nby encoding all events in the message as an array."}),"\n",(0,i.jsx)(n.h2,{id:"configuring-json-event-streams",children:"Configuring JSON event streams"}),"\n",(0,i.jsx)(n.h3,{id:"configure-connectors",children:"Configure connectors"}),"\n",(0,i.jsxs)(n.p,{children:["When adding a new input or output connector on a table or view,\nthe data format is specified in the ",(0,i.jsx)(n.code,{children:"format"})," field of the connector configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:'create table PART (\n  id bigint not null primary key,\n  name varchar\n) with (\n  \'connectors\' = \'[{\n    "transport": {\n        "name": "url_input",\n        "config": { "path":"https://feldera-basics-tutorial.s3.amazonaws.com/part.json" }\n    },\n    "format": {\n        "name": "json",\n        "config": { "update_format": "insert_delete", "array": false }\n    }\n}]\'\n);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"update_format"}),": Choose data change event format for this connector. Supported values are ",(0,i.jsx)(n.code,{children:"insert_delete"})," and ",(0,i.jsx)(n.code,{children:"raw"}),". The default is ",(0,i.jsx)(n.code,{children:"insert_delete"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"array"}),": Whether to enable array encoding. The default is ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lines"}),": How many input lines may be part of a JSON value. The default, ",(0,i.jsx)(n.code,{children:"multiple"}),", allows individual JSON values to span multiple lines. Specify ",(0,i.jsx)(n.code,{children:"single"})," to limit support to newline-delimited JSON (NDJSON), a subset of JSON which does not allow a new-line inside a value."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See also the ",(0,i.jsx)(n.a,{href:"/tutorials/basics/part3",children:"input/output connector tutorial"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"streaming-json-over-http",children:"Streaming JSON over HTTP"}),"\n",(0,i.jsxs)(n.p,{children:["When sending data to a pipeline over HTTP via the ",(0,i.jsx)(n.a,{href:"/api/push-data-to-a-sql-table",children:(0,i.jsx)(n.code,{children:"/ingress"})}),"\nAPI endpoint, the data format is specified as part of the URL, e.g.:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# `?format=json` - Chooses JSON format for the stream.\n# `&update_format=insert_delete` - Specifies data change event format. Supported values are `insert_delete` and `raw`.\n# `&array=false` - Don\'t use array encoding.\n# replace PIPELINE_NAME with the name of the pipeline and TABLE_NAME with the name of the table\ncurl -X \'POST\' \'http://127.0.0.1:8080/v0/pipelines/PIPELINE_NAME/ingress/TABLE_NAME?format=json&update_format=insert_delete&array=false\' -d \'\n{"insert": {"id": 1, "name": "Flux Capacitor"}}\n{"insert": {"id": 2, "name": "Warp Core"}}\n{"insert": {"id": 3, "name": "Kyber Crystal"}}\'\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When receiving data from a pipeline over HTTP via the\n",(0,i.jsx)(n.a,{href:"/api/subscribe-to-a-stream-of-updates-from-a-sql-view-or-table",children:(0,i.jsx)(n.code,{children:"/egress"})}),"\nAPI endpoint, we currently only support the insert/delete data change event\nformat with array encapsulation.  Specify ",(0,i.jsx)(n.code,{children:"?format=json"})," in the URL\nto choose this encoding for output data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# replace PIPELINE_NAME with the name of the pipeline and VIEW_NAME with the name of the table\ncurl -s -N -X 'POST' 'http://127.0.0.1:8080/v0/pipelines/PIPELINE_NAME/egress/VIEW_NAME?format=json'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See also the ",(0,i.jsx)(n.a,{href:"/tutorials/basics/part3",children:"HTTP input and output tutorial"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(96540);const i={},d=r.createContext(i);function t(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);