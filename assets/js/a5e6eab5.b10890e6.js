"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[9121],{28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var l=a(96540);const s={},i=l.createContext(s);function r(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(i.Provider,{value:n},e.children)}},48491:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>t});const l=JSON.parse('{"id":"interface/cli","title":"Command line tool (fda)","description":"fda is a command line utility for interacting with the Feldera Manager\'s REST API.","source":"@site/docs/interface/cli.md","sourceDirName":"interface","slug":"/interface/cli","permalink":"/interface/cli","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Web Console","permalink":"/interface/web-console"},"next":{"title":"Pipelines","permalink":"/pipelines/"}}');var s=a(74848),i=a(28453);const r={},c="Command line tool (fda)",o={},t=[{value:"Installation",id:"installation",level:2},{value:"Using Cargo",id:"using-cargo",level:3},{value:"Binary installation",id:"binary-installation",level:3},{value:"Optional: Shell completion",id:"optional-shell-completion",level:3},{value:"Connecting &amp; Authentication",id:"connecting--authentication",level:2},{value:"Examples",id:"examples",level:2},{value:"Shell",id:"shell",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"command-line-tool-fda",children:"Command line tool (fda)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fda"})," is a command line utility for interacting with the Feldera Manager's REST API.\nIt allows you to create, manage, and monitor pipelines. It also features an interactive\n",(0,s.jsx)(n.a,{href:"#shell",children:"shell"})," for inspecting and modifying the state of tables and views using SQL commands."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["In order to install ",(0,s.jsx)(n.code,{children:"fda"}),", you need a working Rust environment. You can install Rust by following the instructions on\nthe ",(0,s.jsx)(n.a,{href:"https://www.rust-lang.org/tools/install",children:"Rust website"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"using-cargo",children:"Using Cargo"}),"\n",(0,s.jsxs)(n.p,{children:["Install ",(0,s.jsx)(n.code,{children:"fda"})," with Cargo by running the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo install fda\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, to install the latest ",(0,s.jsx)(n.code,{children:"fda"})," revision from our main git branch, run the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo install --git https://github.com/feldera/feldera fda\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To install from the sources in your local feldera repository, you can install ",(0,s.jsx)(n.code,{children:"fda"})," with the\nfollowing commands:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd crates/fda\ncargo install --path .\n"})}),"\n",(0,s.jsx)(n.h3,{id:"binary-installation",children:"Binary installation"}),"\n",(0,s.jsxs)(n.p,{children:["We supply pre-built binaries for ",(0,s.jsx)(n.code,{children:"fda"})," as part of our release artifacts. You can find them in the\n",(0,s.jsx)(n.code,{children:"feldera-binaries"})," ZIP file in the ",(0,s.jsx)(n.a,{href:"https://github.com/feldera/feldera/releases/latest",children:"github release page"}),".\nNote that currently only Linux binaries for amd64 and aarch64 architectures are provided."]}),"\n",(0,s.jsx)(n.h3,{id:"optional-shell-completion",children:"Optional: Shell completion"}),"\n",(0,s.jsxs)(n.p,{children:["Once the ",(0,s.jsx)(n.code,{children:"fda"})," binary is installed, you can enable shell command completion for ",(0,s.jsx)(n.code,{children:"fda"}),"\nby adding the following line to your shell init script."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Bash"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "source <(COMPLETE=bash fda)" >> ~/.bashrc\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Elvish"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "eval (COMPLETE=elvish fda)" >> ~/.elvish/rc.elv\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fish"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "source (COMPLETE=fish fda | psub)" >> ~/.config/fish/config.fish\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Powershell"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "COMPLETE=powershell fda | Invoke-Expression" >> $PROFILE\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Zsh"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "source <(COMPLETE=zsh fda)" >> ~/.zshrc\n'})}),"\n",(0,s.jsx)(n.h2,{id:"connecting--authentication",children:"Connecting & Authentication"}),"\n",(0,s.jsxs)(n.p,{children:["To connect to the Feldera manager, you need to provide the URL of the manager. You can either provide the URL as an\nenvironment variable or as a command line argument. The environment variable is called ",(0,s.jsx)(n.code,{children:"FELDERA_HOST"})," and the\ncommand line argument is called ",(0,s.jsx)(n.code,{children:"--host"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If your Feldera instance requires authentication (not needed in the local docker form factor), you'll also need to\nprovide an API key. You can either set the API key as an environment variable or as a command line argument.\nThe environment variable is called ",(0,s.jsx)(n.code,{children:"FELDERA_API_KEY"})," and the command line argument is called ",(0,s.jsx)(n.code,{children:"--auth"}),".\nIt is recommended to use an environment variable configured in your shell init script to avoid storing the API\nkey in your shell history."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can create a new API key by logging into the Feldera WebConsole. Once logged in, click on your profile in the top\nright. Go to ",(0,s.jsx)(n.strong,{children:"Manage API Keys"})," and click ",(0,s.jsx)(n.strong,{children:"Generate new key"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"Specify the host and API key as command line arguments or environment variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda --host https://try.feldera.com --auth apikey:0aKFj50iE... pipelines\nexport FELDERA_HOST=https://try.feldera.com\nexport FELDERA_API_KEY=apikey:0aKFj50iE...\nfda pipelines\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a new pipeline ",(0,s.jsx)(n.code,{children:"p1"})," from a ",(0,s.jsx)(n.code,{children:"program.sql"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo "CREATE TABLE example ( id INT NOT NULL PRIMARY KEY );\nCREATE VIEW example_count AS ( SELECT COUNT(*) AS num_rows FROM example );" > program.sql\nfda create p1 program.sql\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Retrieve the program for ",(0,s.jsx)(n.code,{children:"p1"})," and create a new pipeline ",(0,s.jsx)(n.code,{children:"p2"})," from it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda program get p1 | fda create p2 -s\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable storage for ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda set-config p1 storage true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Add Rust UDF code to ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda program set p1 --udf-toml udf.toml --udf-rs udf.rs\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Run the pipeline ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda start p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Start a transaction for ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda start-transaction p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Commit a transaction for ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda commit-transaction p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Retrieve the stats for ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda stats p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Retrieve the latest log messages for ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda logs p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Download the support bundle for ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda support-bundle p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Shutdown and delete the pipeline ",(0,s.jsx)(n.code,{children:"p1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda shutdown p1\nfda delete p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Execute ",(0,s.jsx)(n.a,{href:"/sql/ad-hoc",children:"ad-hoc SQL query"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'fda exec pipeline-name "SELECT * FROM materialized_view;"\ncat query.sql | fda exec pipeline-name -s\n'})}),"\n",(0,s.jsx)(n.h2,{id:"shell",children:"Shell"}),"\n",(0,s.jsxs)(n.p,{children:["You can enter the ",(0,s.jsx)(n.code,{children:"fda"})," shell for a pipeline by running the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"fda shell p1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Within the shell, you can interact with the pipeline ",(0,s.jsx)(n.code,{children:"p1"})," by sending ",(0,s.jsx)(n.a,{href:"/sql/ad-hoc",children:"ad-hoc SQL queries"})," to it."]}),"\n",(0,s.jsxs)(n.p,{children:["The shell also lets you execute certain CLI commands like ",(0,s.jsx)(n.code,{children:"start"}),", ",(0,s.jsx)(n.code,{children:"restart"}),", ",(0,s.jsx)(n.code,{children:"shutdown"})," without having to provide the\npipeline name every time. Type ",(0,s.jsx)(n.code,{children:"help"})," for more information."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);