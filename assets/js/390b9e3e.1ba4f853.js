"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[251],{28453:(e,i,s)=>{s.d(i,{R:()=>l,x:()=>c});var n=s(96540);const d={},r=n.createContext(d);function l(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),n.createElement(r.Provider,{value:i},e.children)}},38578:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"sql/decimal","title":"Decimal Operations","description":"A synonym for the `decimal type is numeric`.","source":"@site/docs/sql/decimal.md","sourceDirName":"sql","slug":"/sql/decimal","permalink":"/sql/decimal","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Date- and Time-Related Operations","permalink":"/sql/datetime"},"next":{"title":"Floating Point Operations","permalink":"/sql/float"}}');var d=s(74848),r=s(28453);const l={},c="Decimal Operations",t={},a=[{value:"Operations available for the <code>decimal</code> type",id:"operations-available-for-the-decimal-type",level:2},{value:"Rounding while casting between Decimal types",id:"rounding-while-casting-between-decimal-types",level:2},{value:"Invalid casts between Decimal types",id:"invalid-casts-between-decimal-types",level:3},{value:"Predefined functions on Decimal Values",id:"predefined-functions-on-decimal-values",level:2}];function o(e){const i={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.header,{children:(0,d.jsx)(i.h1,{id:"decimal-operations",children:"Decimal Operations"})}),"\n",(0,d.jsxs)(i.p,{children:["A synonym for the ",(0,d.jsx)(i.code,{children:"decimal"})," type is ",(0,d.jsx)(i.code,{children:"numeric"}),"."]}),"\n",(0,d.jsxs)(i.p,{children:["A decimal number is characterized by two magnitudes: the ",(0,d.jsx)(i.em,{children:"precision"}),",\nwhich his the total number of decimal digits represented, and the\n",(0,d.jsx)(i.em,{children:"scale"}),", which is the count of digits in the fractional part, to the\nright of the decimal point.  For example, the number 3.1415 has a\nprecision of 5 and a scale of 4."]}),"\n",(0,d.jsxs)(i.p,{children:["The type ",(0,d.jsx)(i.code,{children:"NUMERIC(precision, scale)"})," specifies both precision and\nscale, both of which must be constants."]}),"\n",(0,d.jsxs)(i.p,{children:["The type ",(0,d.jsx)(i.code,{children:"NUMERIC(precision)"})," is the same as ",(0,d.jsx)(i.code,{children:"NUMERIC(precision, 0)"}),"."]}),"\n",(0,d.jsxs)(i.p,{children:["The type ",(0,d.jsx)(i.code,{children:"NUMERIC"})," is the same as ",(0,d.jsx)(i.code,{children:"NUMERIC(MAX_PRECISION, 0)"}),"."]}),"\n",(0,d.jsxs)(i.blockquote,{children:["\n",(0,d.jsxs)(i.p,{children:["[!WARNING]\nThis means that casting to ",(0,d.jsx)(i.code,{children:"DECIMAL"})," or ",(0,d.jsx)(i.code,{children:"NUMERIC"})," will round the value to a decimal with no fractional part.\nExample: ",(0,d.jsx)(i.code,{children:"SELECT CAST('0.5' AS DECIMAL)"})," will return ",(0,d.jsx)(i.code,{children:"1"})," as the scale is 0."]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"The maximum precision supported is 38 decimal digits.  The maximum\nscale supported is 38 decimal digits."}),"\n",(0,d.jsxs)(i.h2,{id:"operations-available-for-the-decimal-type",children:["Operations available for the ",(0,d.jsx)(i.code,{children:"decimal"})," type"]}),"\n",(0,d.jsxs)(i.p,{children:["The legal operations are ",(0,d.jsx)(i.code,{children:"+"})," (plus, unary and binary), ",(0,d.jsx)(i.code,{children:"-"})," (minus,\nunary and binary), ",(0,d.jsx)(i.code,{children:"*"})," (multiplication), ",(0,d.jsx)(i.code,{children:"/"})," (division), ",(0,d.jsx)(i.code,{children:"%"}),"\n(modulus)."]}),"\n",(0,d.jsxs)(i.p,{children:["Modulus happens as follows:\nFor: ",(0,d.jsx)(i.code,{children:"mod = x % y"})]}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:["if ",(0,d.jsx)(i.code,{children:"x >= 0"})," and ",(0,d.jsx)(i.code,{children:"y > 0"})," then: ",(0,d.jsx)(i.code,{children:"x - (floor(x / y) * y)"})]}),"\n",(0,d.jsxs)(i.li,{children:["if ",(0,d.jsx)(i.code,{children:"x >= 0"})," and ",(0,d.jsx)(i.code,{children:"y < 0"})," then: ",(0,d.jsx)(i.code,{children:"x % abs(y)"})]}),"\n",(0,d.jsxs)(i.li,{children:["if ",(0,d.jsx)(i.code,{children:"x < 0"})," and ",(0,d.jsx)(i.code,{children:"y > 0"})," then: ",(0,d.jsx)(i.code,{children:"- abs(x) % y"})]}),"\n",(0,d.jsxs)(i.li,{children:["if ",(0,d.jsx)(i.code,{children:"x < 0"})," and ",(0,d.jsx)(i.code,{children:"y < 0"})," then: ",(0,d.jsx)(i.code,{children:"- abs(x) % abs(y)"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:"Division or modulus by zero cause a runtime error."}),"\n",(0,d.jsx)(i.p,{children:"Casting a string to a decimal value will produce a run time error if\nparsing fails."}),"\n",(0,d.jsx)(i.h2,{id:"rounding-while-casting-between-decimal-types",children:"Rounding while casting between Decimal types"}),"\n",(0,d.jsxs)(i.p,{children:["Rounding is performed using ",(0,d.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Rounding#Rounding_half_away_from_zero",children:"to nearest, ties away from zero"})," strategy."]}),"\n",(0,d.jsxs)(i.p,{children:["Example while casting from ",(0,d.jsx)(i.code,{children:"DECIMAL(8, 4)"})," to ",(0,d.jsx)(i.code,{children:"DECIMAL(6, 2)"}),":"]}),"\n",(0,d.jsxs)("table",{children:[(0,d.jsxs)("tr",{children:[(0,d.jsx)("th",{children:"Input Value"}),(0,d.jsx)("th",{children:"Output Value"})]}),(0,d.jsxs)("tr",{children:[(0,d.jsx)("td",{children:"1234.1250"}),(0,d.jsx)("td",{children:"1234.13"})]}),(0,d.jsxs)("tr",{children:[(0,d.jsx)("td",{children:" -1234.1250"}),(0,d.jsx)("td",{children:" -1234.13"})]}),(0,d.jsxs)("tr",{children:[(0,d.jsx)("td",{children:"1234.1264"}),(0,d.jsx)("td",{children:"1234.13"})]}),(0,d.jsxs)("tr",{children:[(0,d.jsx)("td",{children:"1234.1234"}),(0,d.jsx)("td",{children:"1234.12"})]}),(0,d.jsxs)("tr",{children:[(0,d.jsx)("td",{children:" -1234.1264"}),(0,d.jsx)("td",{children:" -1234.13"})]}),(0,d.jsxs)("tr",{children:[(0,d.jsx)("td",{children:" -1234.1234"}),(0,d.jsx)("td",{children:" -1234.12"})]})]}),"\n",(0,d.jsx)(i.h3,{id:"invalid-casts-between-decimal-types",children:"Invalid casts between Decimal types"}),"\n",(0,d.jsx)(i.p,{children:"While casting to decimal types, if the current decimal number cannot be represented\nwith the specified precision and scale, a run time error is thrown."}),"\n",(0,d.jsxs)(i.p,{children:["Example:\nValid casts such as: ",(0,d.jsx)(i.code,{children:"CAST('1234.1234' AS DECIMAL(6, 2))"})," will return ",(0,d.jsx)(i.code,{children:"1234.12"}),".\nBut invalid casts such as: ",(0,d.jsx)(i.code,{children:"CAST('1234.1234' AS DECIMAL(6, 3))"})," will throw a run time error."]}),"\n",(0,d.jsx)(i.h2,{id:"predefined-functions-on-decimal-values",children:"Predefined functions on Decimal Values"}),"\n",(0,d.jsxs)("table",{children:[(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"abs"}),(0,d.jsx)("code",{children:"ABS(value)"})]}),(0,d.jsx)("td",{children:"absolute value"})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"bround"}),(0,d.jsx)("code",{children:"BROUND(decimal, digits)"})]}),(0,d.jsxs)("td",{children:['Performs banker\'s rounding to the specified number of decimal digits after the decimal point.\nNegative values for "digits" are supported (result is a ',(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"ceil"}),(0,d.jsx)("code",{children:"CEIL(value)"})]}),(0,d.jsxs)("td",{children:["Ceiling function: nearest integer value greater than or equal to argument (result is a ",(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"floor"}),(0,d.jsx)("code",{children:"FLOOR(value)"})]}),(0,d.jsxs)("td",{children:["Floor function: nearest integer value less than or equal to argument (result is a ",(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"round"}),(0,d.jsx)("code",{children:"ROUND(value)"})]}),(0,d.jsxs)("td",{children:["same as ",(0,d.jsx)("code",{children:"ROUND(value, 0)"}),"."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"round2"}),(0,d.jsx)("code",{children:"ROUND(value, digits)"})]}),(0,d.jsxs)("td",{children:["where ",(0,d.jsx)("code",{children:"digits"})," is an integer value, which may be negative. Round the value to the specified number of ",(0,d.jsx)("em",{children:"decimal"})," digits after the decimal point (result is a ",(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"sign"}),(0,d.jsx)("code",{children:"SIGN(value)"})]}),(0,d.jsxs)("td",{children:['The "sign" function: -1, 0, or 1 showing if value is <0, =0, or >0 (result is a ',(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"truncate"}),(0,d.jsx)("code",{children:"TRUNCATE(value)"})]}),(0,d.jsxs)("td",{children:["same as ",(0,d.jsx)("code",{children:"TRUNCATE(value, 0)"})," (result is a ",(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"trunc"}),(0,d.jsx)("code",{children:"TRUNC(value [, digits] )"})]}),(0,d.jsxs)("td",{children:["same as ",(0,d.jsx)("code",{children:"TRUNCATE(value [, digits])"})," (result is a ",(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]}),(0,d.jsxs)("tr",{children:[(0,d.jsxs)("td",{children:[(0,d.jsx)("a",{id:"truncate2"}),(0,d.jsx)("code",{children:"TRUNCATE(value, digits)"})]}),(0,d.jsxs)("td",{children:["where ",(0,d.jsx)("code",{children:"digits"})," is an integer value, which may be negative. Truncates the value to the specified number of ",(0,d.jsx)("em",{children:"decimal"})," digits after the decimal point (result is a ",(0,d.jsx)("code",{children:"DECIMAL"})," value)."]})]})]})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}}}]);