"use strict";(self.webpackChunkfeldera_docs=self.webpackChunkfeldera_docs||[]).push([[3516],{13703:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>t,default:()=>o,frontMatter:()=>c,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"sql/array","title":"Array Operations","description":"An array type can be created by applying the ARRAY suffix to another","source":"@site/docs/sql/array.md","sourceDirName":"sql","slug":"/sql/array","permalink":"/sql/array","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Aggregate Operations","permalink":"/sql/aggregates"},"next":{"title":"Binary (Byte Array) Operations","permalink":"/sql/binary"}}');var d=s(74848),i=s(28453);const c={},t="Array Operations",l={},a=[{value:"Array literals",id:"array-literals",level:2},{value:"The <code>UNNEST</code> SQL Operator",id:"the-unnest-sql-operator",level:2},{value:"Comparison Operations on Arrays",id:"comparison-operations-on-arrays",level:2},{value:"Predefined functions on array values",id:"predefined-functions-on-array-values",level:2}];function h(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"array-operations",children:"Array Operations"})}),"\n",(0,d.jsxs)(r.p,{children:["An array type can be created by applying the ",(0,d.jsx)(r.code,{children:"ARRAY"})," suffix to another\ntype.  For example ",(0,d.jsx)(r.code,{children:"INT ARRAY"})," is an array of integers.  Array indexes\nstart from 1.  Array sizes are limited to 2^31 elements.  Array values\nbe nullable types, e.g., ",(0,d.jsx)(r.code,{children:"INT ARRAY NULL"}),".  Multidimensional arrays\nare possible, e.g. ",(0,d.jsx)(r.code,{children:"VARCHAR ARRAY ARRAY"})," is a two-dimensional array."]}),"\n",(0,d.jsxs)(r.p,{children:["In ",(0,d.jsx)(r.code,{children:"CREATE TABLE"})," and ",(0,d.jsx)(r.code,{children:"CREATE TYPE"})," declarations there is no way to\nspecify the nullability of the elements of an ",(0,d.jsx)(r.code,{children:"ARRAY"}),".  The compiler\nwill always assume that array elements are nullable:"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-sql",children:"CREATE TABLE T(a INT ARRAY);\n"})}),"\n",(0,d.jsxs)(r.p,{children:["Table ",(0,d.jsx)(r.code,{children:"T"})," will have a single column ",(0,d.jsx)(r.code,{children:"a"})," whose values are nullable\narrays; the array elements will be nullable INT values."]}),"\n",(0,d.jsx)(r.h2,{id:"array-literals",children:"Array literals"}),"\n",(0,d.jsxs)(r.p,{children:["Array literals have the syntax ",(0,d.jsx)(r.code,{children:"ARRAY["}),"expr [",(0,d.jsx)(r.code,{children:","}),"expr]*",(0,d.jsx)(r.code,{children:"]"}),".  An example\ncreating a nested array is: ",(0,d.jsx)(r.code,{children:"ARRAY[ARRAY[1, 2], ARRAY[3, 4]]"}),"."]}),"\n",(0,d.jsxs)(r.h2,{id:"the-unnest-sql-operator",children:["The ",(0,d.jsx)(r.code,{children:"UNNEST"})," SQL Operator"]}),"\n",(0,d.jsxs)(r.p,{children:["The ",(0,d.jsx)(r.code,{children:"UNNEST"})," operator takes an ",(0,d.jsx)(r.code,{children:"ARRAY"})," and returns a table with a\nrow for each element in the ",(0,d.jsx)(r.code,{children:"ARRAY"}),": ",(0,d.jsx)(r.code,{children:"UNNEST(ARRAY) [WITH ORDINALITY]"}),".  If the input is an array with 5 elements, the output\nis a table with 5 rows, each row holding one element of the array.\nThe additional keyword ",(0,d.jsx)(r.code,{children:"WITH ORDINALITY"})," creates an output table\nwith two columns, where the second column is the index of the element\nwithin the array, with numbering starting at 1.  If the array contains\nduplicated values, the resulting table will be a multiset."]}),"\n",(0,d.jsxs)(r.p,{children:["The ",(0,d.jsx)(r.code,{children:"UNNEST"})," operator can be used in self-joins as follows:"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-sql",children:"CREATE TABLE data(CITIES VARCHAR ARRAY, COUNTRY VARCHAR);\n\nCREATE VIEW V AS SELECT city, country\nFROM data, UNNEST(cities) AS t (city);\n"})}),"\n",(0,d.jsx)(r.p,{children:"The previous query is a shortcut for a CROSS-JOIN query:"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-sql",children:"CREATE VIEW V AS SELECT city, data.country\nFROM data CROSS JOIN UNNEST(data.cities) AS city;\n"})}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"UNNEST"})," applied to a ",(0,d.jsx)(r.code,{children:"NULL"})," value returns an empty table."]}),"\n",(0,d.jsxs)(r.p,{children:["Note that applying ",(0,d.jsx)(r.code,{children:"UNNEST"})," to an ",(0,d.jsx)(r.code,{children:"ARRAY"})," of structure-typed objects\nwill produce a collection whose columns are the fields of the\nstructure, instead of a collection with a single structure-typed\ncolumn."]}),"\n",(0,d.jsx)(r.h2,{id:"comparison-operations-on-arrays",children:"Comparison Operations on Arrays"}),"\n",(0,d.jsxs)(r.p,{children:["Comparison operations (",(0,d.jsx)(r.code,{children:"="}),", ",(0,d.jsx)(r.code,{children:"<>"}),", ",(0,d.jsx)(r.code,{children:"!="}),", ",(0,d.jsx)(r.code,{children:">"}),", ",(0,d.jsx)(r.code,{children:"<"}),", ",(0,d.jsx)(r.code,{children:">="}),", ",(0,d.jsx)(r.code,{children:"<="}),") in arrays occur ",(0,d.jsx)(r.strong,{children:"lexicographically"}),", from left to right. The elements are compared one by one until a difference is found. Arrays can be compared even if they are different in size."]}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.strong,{children:"Examples:"})}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:(0,d.jsx)(r.code,{children:"[45] > [22]"})}),"\n",(0,d.jsx)(r.li,{children:(0,d.jsx)(r.code,{children:"[23, 56, 16] > [23, NULL]"})}),"\n"]}),"\n",(0,d.jsx)(r.h2,{id:"predefined-functions-on-array-values",children:"Predefined functions on array values"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Function"}),(0,d.jsx)(r.th,{children:"Description"}),(0,d.jsx)(r.th,{children:"Example"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.em,{children:"array"}),(0,d.jsx)(r.code,{children:"["}),(0,d.jsx)(r.em,{children:"index"}),(0,d.jsx)(r.code,{children:"]"})]}),(0,d.jsxs)(r.td,{children:["where ",(0,d.jsx)(r.em,{children:"index"})," is an expression that evaluates to an integer, and ",(0,d.jsx)(r.em,{children:"array"})," is an expression that evaluates to an array. Returns the element at the specified position. If the index is out of bounds, the result is ",(0,d.jsx)(r.code,{children:"NULL"}),"."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY[2,3][2]"})," => 3"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"safe_offset"}),(0,d.jsx)(r.em,{children:"array"}),(0,d.jsx)(r.code,{children:"[SAFE_OFFSET("}),(0,d.jsx)(r.em,{children:"index"}),(0,d.jsx)(r.code,{children:")]"})]}),(0,d.jsxs)(r.td,{children:["where ",(0,d.jsx)(r.em,{children:"index"})," is an expression that evaluates to an integer, and ",(0,d.jsx)(r.em,{children:"array"})," is an expression that evaluates to an array. Returns the element at the specified position, with first element at index 0. If the index is out of bounds, the result is ",(0,d.jsx)(r.code,{children:"NULL"}),"."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY[2,3][SAFE_OFFSET(2)]"})," => NULL"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY("})," [ exp [, exp]* ]",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsx)(r.td,{children:"Array constructor function.  Can have zero arguments."}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY()"})," => ",(0,d.jsx)(r.code,{children:"[]"}),", ",(0,d.jsx)(r.code,{children:"ARRAY(NULL, 2)"})," => ",(0,d.jsx)(r.code,{children:"[NULL, 2]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"append"}),(0,d.jsx)(r.code,{children:"ARRAY_APPEND("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:",  "})," ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Appends an element to the end of the array and returns the result. If the array is ",(0,d.jsx)(r.code,{children:"NULL"}),", the function will return ",(0,d.jsx)(r.code,{children:"NULL"}),". If the ",(0,d.jsx)(r.em,{children:"element"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),", the ",(0,d.jsx)(r.code,{children:"NULL"})," element will be added to the end of the array."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_APPEND(ARRAY [1, 2], 3)"})," => ",(0,d.jsx)(r.code,{children:"[1, 2, 3]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"concat"}),(0,d.jsx)(r.code,{children:"ARRAY_CONCAT("})," ",(0,d.jsx)(r.em,{children:"array"}),", [ ",(0,d.jsx)(r.em,{children:"array"})," ]* ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if any argument is ",(0,d.jsx)(r.code,{children:"NULL"}),". Concatenates a list of arrays."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_CONCAT(ARRAY [1, 2, 3], ARRAY[4])"})," => ",(0,d.jsx)(r.code,{children:"[1, 2, 3, 4]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"compact"}),(0,d.jsx)(r.code,{children:"ARRAY_COMPACT("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"array"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),". Returns a new array by removing all the ",(0,d.jsx)(r.code,{children:"NULL"})," values from the ",(0,d.jsx)(r.em,{children:"array"}),"."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_COMPACT(ARRAY [1, 2, 3, NULL])"})," => ",(0,d.jsx)(r.code,{children:"[1, 2, 3]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"contains"}),(0,d.jsx)("a",{id:"contains"}),(0,d.jsx)(r.code,{children:"ARRAY_CONTAINS("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:", "})," ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"element"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),". The right argument must have the same type as array elements. Returns true if the ",(0,d.jsx)(r.em,{children:"array"})," contains the ",(0,d.jsx)(r.em,{children:"element"}),"."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_CONTAINS(ARRAY [1, 2, 3], 2)"})," => true"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"distinct"}),(0,d.jsx)(r.code,{children:"ARRAY_DISTINCT("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"array"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),". Returns a new array removing duplicate values from the ",(0,d.jsx)(r.em,{children:"array"})," and keeping the order of elements."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_DISTINCT(ARRAY [1, 1, 2, 2])"})," => ",(0,d.jsx)(r.code,{children:"[1, 2]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"except"}),(0,d.jsx)(r.code,{children:"ARRAY_EXCEPT("})," ",(0,d.jsx)(r.em,{children:"left"}),", ",(0,d.jsx)(r.em,{children:"right"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if any argument is ",(0,d.jsx)(r.code,{children:"NULL"}),". Returns an array with all elements in the ",(0,d.jsx)(r.em,{children:"left"})," array that do not appear in the  ",(0,d.jsx)(r.em,{children:"right"})," array, removing duplicates."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_EXCEPT(ARRAY [1, 2, 3], ARRAY [3,1,4])"})," => ",(0,d.jsx)(r.code,{children:"[2]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"array_exists"}),(0,d.jsx)(r.code,{children:"ARRAY_EXISTS("})," ",(0,d.jsx)(r.em,{children:"array"}),", ",(0,d.jsx)(r.em,{children:"predicate"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.em,{children:"predicate"})," is a lambda expression with an argument that has the array element type, returning a Boolean. ",(0,d.jsx)(r.code,{children:"ARRAY_EXISTS"})," returns ",(0,d.jsx)(r.code,{children:"true"})," when the predicate returns ",(0,d.jsx)(r.code,{children:"true"})," for at least one element. If the array is empty, returns ",(0,d.jsx)(r.code,{children:"false"}),". If the result is not true and the predicate evaluates to NULL for any element, it returns NULL."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_EXISTS(ARRAY[1, -2, 3], x -> x > 0)"})," => true"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"insert"}),(0,d.jsx)(r.code,{children:"ARRAY_INSERT("})," ",(0,d.jsx)(r.em,{children:"array"}),", ",(0,d.jsx)(r.em,{children:"pos"}),", ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"array"})," or ",(0,d.jsx)(r.em,{children:"pos"})," are ",(0,d.jsx)(r.code,{children:"NULL"}),". Insert ",(0,d.jsx)(r.em,{children:"element"})," in array at specified position, padding with ",(0,d.jsx)(r.code,{children:"NULL"}),"s if necessary. If ",(0,d.jsx)(r.em,{children:"pos"})," is negative, it is considered from the end of the array. Produces error when ",(0,d.jsx)(r.em,{children:"pos"})," is zero or very large"]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_INSERT(ARRAY [1, 2, 3], 3, 4)"})," => ",(0,d.jsx)(r.code,{children:"[1,2,4,3]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"intersect"}),(0,d.jsx)(r.code,{children:"ARRAY_INTERSECT("})," ",(0,d.jsx)(r.em,{children:"left"}),", ",(0,d.jsx)(r.em,{children:"right"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if any argument is ",(0,d.jsx)(r.code,{children:"NULL"}),". Returns an array with all elements that appear in common in both the ",(0,d.jsx)(r.em,{children:"left"})," array and ",(0,d.jsx)(r.em,{children:"right"})," arrays, with no duplicates."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_INTERSECT(ARRAY [1, 2, 3], ARRAY [3,1,4])"})," => ",(0,d.jsx)(r.code,{children:"[1,3]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"join"}),(0,d.jsx)(r.code,{children:"ARRAY_JOIN"})]}),(0,d.jsxs)(r.td,{children:["Another name for ",(0,d.jsx)(r.code,{children:"ARRAY_TO_STRING"})]}),(0,d.jsx)(r.td,{})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"length"}),(0,d.jsx)(r.code,{children:"ARRAY_LENGTH("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Another name for ",(0,d.jsx)(r.code,{children:"CARDINALITY"})]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_LENGTH( ARRAY [1, 2, 3])"})," => ",(0,d.jsx)(r.code,{children:"3"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"max"}),(0,d.jsx)(r.code,{children:"ARRAY_MAX("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns the maximum value in the ",(0,d.jsx)(r.em,{children:"array"})]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_MAX(ARRAY [9, 1, 2, 4, 8, null])"})," => 9"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"min"}),(0,d.jsx)(r.code,{children:"ARRAY_MIN("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns the minimum value in the ",(0,d.jsx)(r.em,{children:"array"}),". Ignores null values."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_MIN(ARRAY [9, 1, 2, 5, 8, null])"})," => 1"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"overlap"}),(0,d.jsx)(r.code,{children:"ARRAYS_OVERLAP("})," ",(0,d.jsx)(r.em,{children:"array1"})," ",(0,d.jsx)(r.code,{children:", "})," ",(0,d.jsx)(r.em,{children:"array2"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"array1"})," or ",(0,d.jsx)(r.em,{children:"array2"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),". Errors if the two arrays are of different types. Returns true if the two arrays have at least one element in common."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAYS_OVERLAP(ARRAY [1, 2, 3], ARRAY [3, 4, 5])"})," => true"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"position"}),(0,d.jsx)(r.code,{children:"ARRAY_POSITION("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:", "})," ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"array"})," or ",(0,d.jsx)(r.em,{children:"element"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),". The right argument must have the same type as array elements. Returns the (1-based) index of the first ",(0,d.jsx)(r.em,{children:"element"})," of the ",(0,d.jsx)(r.em,{children:"array"})," as a long. Returns 0 if ",(0,d.jsx)(r.em,{children:"element"})," doesn't exist in ",(0,d.jsx)(r.em,{children:"array"}),"."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_POSITION(ARRAY [1, 3, 4, 6], 4)"})," => 3"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"prepend"}),(0,d.jsx)(r.code,{children:"ARRAY_PREPEND("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:",  "})," ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Prepends an element to the start of the array and returns the result. If the array is ",(0,d.jsx)(r.code,{children:"NULL"}),", the function will return ",(0,d.jsx)(r.code,{children:"NULL"}),". If the element is ",(0,d.jsx)(r.code,{children:"NULL"}),", the ",(0,d.jsx)(r.code,{children:"NULL"})," element will be added to the start of the array."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_PREPEND(ARRAY [2, 3], 1)"})," => ",(0,d.jsx)(r.code,{children:"[1, 2, 3]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"remove"}),(0,d.jsx)(r.code,{children:"ARRAY_REMOVE("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:", "})," ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"array"})," or ",(0,d.jsx)(r.em,{children:"element"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),". The right argument must have the same type as array elements. Returns a new array removing all elements that are equal to ",(0,d.jsx)(r.em,{children:"element"})," from the given ",(0,d.jsx)(r.em,{children:"array"}),"."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_REMOVE(ARRAY [2, 2, 6, 8], 2)"})," => ",(0,d.jsx)(r.code,{children:"[6, 8]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"reverse"}),(0,d.jsx)(r.code,{children:"ARRAY_REVERSE("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if ",(0,d.jsx)(r.em,{children:"array"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),". Returns array with the elements in reverse order."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_REVERSE(ARRAY [2, 2, 6, 8])"})," => ",(0,d.jsx)(r.code,{children:"[8, 6, 2, 2]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"repeat"}),(0,d.jsx)(r.code,{children:"ARRAY_REPEAT("})," ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.code,{children:", "})," ",(0,d.jsx)(r.em,{children:"count"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns the array containing ",(0,d.jsx)(r.em,{children:"element"})," ",(0,d.jsx)(r.em,{children:"count"})," times. If ",(0,d.jsx)(r.em,{children:"count"})," is negative, an empty array is returned. If ",(0,d.jsx)(r.em,{children:"count"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),", ",(0,d.jsx)(r.code,{children:"NULL"})," is returned. If ",(0,d.jsx)(r.em,{children:"element"})," is ",(0,d.jsx)(r.code,{children:"NULL"}),", an array containing ",(0,d.jsx)(r.em,{children:"count"})," number of ",(0,d.jsx)(r.code,{children:"NULL"}),"s is returned."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_REPEAT(3, 4)"})," => ",(0,d.jsx)(r.code,{children:"[3, 3, 3, 3]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"size"}),(0,d.jsx)(r.code,{children:"ARRAY_SIZE("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Another name for ",(0,d.jsx)(r.code,{children:"CARDINALITY"})]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_SIZE( ARRAY [1, 2, 3])"})," => ",(0,d.jsx)(r.code,{children:"3"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"to_string"}),(0,d.jsx)(r.code,{children:"ARRAY_TO_STRING("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:", "})," ",(0,d.jsx)(r.em,{children:"separator"})," [",(0,d.jsx)(r.code,{children:", "})," ",(0,d.jsx)(r.em,{children:"null_string"})," ]",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Concatenates the values of the string array ",(0,d.jsx)(r.em,{children:"array"}),", separated by the ",(0,d.jsx)(r.em,{children:"separator"})," string. If ",(0,d.jsx)(r.em,{children:"null_string"})," is given and is not ",(0,d.jsx)(r.code,{children:"NULL"}),", then ",(0,d.jsx)(r.code,{children:"NULL"})," array entries are represented by that string; otherwise, they are omitted."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_TO_STRING(ARRAY[1, 2, 3, NULL, 5], ',', '*')"})," => ",(0,d.jsx)(r.code,{children:"1,2,3,*,5"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"union"}),(0,d.jsx)(r.code,{children:"ARRAY_UNION("})," ",(0,d.jsx)(r.em,{children:"left"}),", ",(0,d.jsx)(r.em,{children:"right"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns ",(0,d.jsx)(r.code,{children:"NULL"})," if any argument is ",(0,d.jsx)(r.code,{children:"NULL"}),". Returns an array with all elements that either in the ",(0,d.jsx)(r.em,{children:"left"})," array or the ",(0,d.jsx)(r.em,{children:"right"})," arrays, with no duplicates."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ARRAY_UNION(ARRAY [1, 2, 3], ARRAY [3,1,4])"})," => ",(0,d.jsx)(r.code,{children:"[1,2,3,4]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"cardinality"}),(0,d.jsx)(r.code,{children:"CARDINALITY("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns the size of the ",(0,d.jsx)(r.em,{children:"array"})," expression (number of elements)."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"CARDINALITY(ARRAY[2,3])"})," => 2"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"element"}),(0,d.jsx)(r.code,{children:"ELEMENT("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:["Returns the single element of an ",(0,d.jsx)(r.em,{children:"array"})," of any type. If the array has zero elements, returns ",(0,d.jsx)(r.code,{children:"NULL"}),". If the array has more than one element, it causes a runtime exception."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"ELEMENT(ARRAY[2])"})," => 2"]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"sort"}),(0,d.jsx)(r.code,{children:"SORT_ARRAY("})," ",(0,d.jsx)(r.em,{children:"array"})," ",(0,d.jsx)(r.code,{children:", ["})," ",(0,d.jsx)(r.em,{children:"ascendingOrder"})," ",(0,d.jsx)(r.code,{children:"])"})]}),(0,d.jsxs)(r.td,{children:["Returns a new array, sorted in ascending (",(0,d.jsx)(r.em,{children:"ascendingOrder"})," is ",(0,d.jsx)(r.code,{children:"true"}),") or descending order (",(0,d.jsx)(r.em,{children:"ascendingOrder"})," is ",(0,d.jsx)(r.code,{children:"false"}),") according to the natural ordering of the array elements. The default order is ascending if ascendingOrder is not specified. Null elements are considered to be the smallest."]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"SORT_ARRAY(ARRAY [4, 7, 1, null])"})," => ",(0,d.jsx)(r.code,{children:"[null, 1, 4, 7]"})]})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsxs)(r.td,{children:[(0,d.jsx)("a",{id:"transform"}),(0,d.jsx)(r.code,{children:"TRANSFORM("})," ",(0,d.jsx)(r.em,{children:"array"}),", ",(0,d.jsx)(r.em,{children:"function"})," ",(0,d.jsx)(r.code,{children:")"})]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.em,{children:"function"})," is a lambda expression with an argument that has the array element type. ",(0,d.jsx)(r.code,{children:"TRANSFORM"})," returns a new array constructed by applying the function to every element of ",(0,d.jsx)(r.em,{children:"array"}),". If ",(0,d.jsx)(r.em,{children:"array"})," is NULL, it returns NULL"]}),(0,d.jsxs)(r.td,{children:[(0,d.jsx)(r.code,{children:"TRANSFORM(ARRAY[1, 2, 3], x -> x % 2)"})," => ",(0,d.jsx)(r.code,{children:"[1, 0, 1]"})]})]})]})]})]})}function o(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>c,x:()=>t});var n=s(96540);const d={},i=n.createContext(d);function c(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);